
Lcdtest_VRMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004838  08004838  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004838  08004838  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004838  08004838  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  2000005c  0800489c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800489c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4fd  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7f  00000000  00000000  0002b5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a10  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016285  00000000  00000000  0002eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eac4  00000000  00000000  00044ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008df65  00000000  00000000  000538b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003568  00000000  00000000  000e1818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000e4d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080046f4 	.word	0x080046f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080046f4 	.word	0x080046f4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_f2uiz>:
 800022c:	219e      	movs	r1, #158	; 0x9e
 800022e:	b510      	push	{r4, lr}
 8000230:	05c9      	lsls	r1, r1, #23
 8000232:	1c04      	adds	r4, r0, #0
 8000234:	f000 fcb2 	bl	8000b9c <__aeabi_fcmpge>
 8000238:	2800      	cmp	r0, #0
 800023a:	d103      	bne.n	8000244 <__aeabi_f2uiz+0x18>
 800023c:	1c20      	adds	r0, r4, #0
 800023e:	f000 fc15 	bl	8000a6c <__aeabi_f2iz>
 8000242:	bd10      	pop	{r4, pc}
 8000244:	219e      	movs	r1, #158	; 0x9e
 8000246:	1c20      	adds	r0, r4, #0
 8000248:	05c9      	lsls	r1, r1, #23
 800024a:	f000 fa6f 	bl	800072c <__aeabi_fsub>
 800024e:	f000 fc0d 	bl	8000a6c <__aeabi_f2iz>
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	061b      	lsls	r3, r3, #24
 8000256:	469c      	mov	ip, r3
 8000258:	4460      	add	r0, ip
 800025a:	e7f2      	b.n	8000242 <__aeabi_f2uiz+0x16>

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0245      	lsls	r5, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0047      	lsls	r7, r0, #1
 800026a:	1c0c      	adds	r4, r1, #0
 800026c:	0a6d      	lsrs	r5, r5, #9
 800026e:	0e3f      	lsrs	r7, r7, #24
 8000270:	0fc6      	lsrs	r6, r0, #31
 8000272:	2f00      	cmp	r7, #0
 8000274:	d100      	bne.n	8000278 <__aeabi_fdiv+0x1c>
 8000276:	e06f      	b.n	8000358 <__aeabi_fdiv+0xfc>
 8000278:	2fff      	cmp	r7, #255	; 0xff
 800027a:	d100      	bne.n	800027e <__aeabi_fdiv+0x22>
 800027c:	e074      	b.n	8000368 <__aeabi_fdiv+0x10c>
 800027e:	2300      	movs	r3, #0
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	4699      	mov	r9, r3
 8000284:	469a      	mov	sl, r3
 8000286:	00ed      	lsls	r5, r5, #3
 8000288:	04d2      	lsls	r2, r2, #19
 800028a:	4315      	orrs	r5, r2
 800028c:	3f7f      	subs	r7, #127	; 0x7f
 800028e:	0263      	lsls	r3, r4, #9
 8000290:	0a5b      	lsrs	r3, r3, #9
 8000292:	4698      	mov	r8, r3
 8000294:	0063      	lsls	r3, r4, #1
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0fe4      	lsrs	r4, r4, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d04d      	beq.n	800033a <__aeabi_fdiv+0xde>
 800029e:	2bff      	cmp	r3, #255	; 0xff
 80002a0:	d045      	beq.n	800032e <__aeabi_fdiv+0xd2>
 80002a2:	4642      	mov	r2, r8
 80002a4:	2180      	movs	r1, #128	; 0x80
 80002a6:	00d2      	lsls	r2, r2, #3
 80002a8:	04c9      	lsls	r1, r1, #19
 80002aa:	4311      	orrs	r1, r2
 80002ac:	4688      	mov	r8, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	3b7f      	subs	r3, #127	; 0x7f
 80002b2:	0031      	movs	r1, r6
 80002b4:	1aff      	subs	r7, r7, r3
 80002b6:	464b      	mov	r3, r9
 80002b8:	4061      	eors	r1, r4
 80002ba:	b2c9      	uxtb	r1, r1
 80002bc:	2b0f      	cmp	r3, #15
 80002be:	d900      	bls.n	80002c2 <__aeabi_fdiv+0x66>
 80002c0:	e0b8      	b.n	8000434 <__aeabi_fdiv+0x1d8>
 80002c2:	4870      	ldr	r0, [pc, #448]	; (8000484 <__aeabi_fdiv+0x228>)
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	58c3      	ldr	r3, [r0, r3]
 80002c8:	469f      	mov	pc, r3
 80002ca:	2300      	movs	r3, #0
 80002cc:	4698      	mov	r8, r3
 80002ce:	0026      	movs	r6, r4
 80002d0:	4645      	mov	r5, r8
 80002d2:	4692      	mov	sl, r2
 80002d4:	4653      	mov	r3, sl
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d100      	bne.n	80002dc <__aeabi_fdiv+0x80>
 80002da:	e08d      	b.n	80003f8 <__aeabi_fdiv+0x19c>
 80002dc:	2b03      	cmp	r3, #3
 80002de:	d100      	bne.n	80002e2 <__aeabi_fdiv+0x86>
 80002e0:	e0a1      	b.n	8000426 <__aeabi_fdiv+0x1ca>
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d018      	beq.n	8000318 <__aeabi_fdiv+0xbc>
 80002e6:	003b      	movs	r3, r7
 80002e8:	337f      	adds	r3, #127	; 0x7f
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	dd6d      	ble.n	80003ca <__aeabi_fdiv+0x16e>
 80002ee:	076a      	lsls	r2, r5, #29
 80002f0:	d004      	beq.n	80002fc <__aeabi_fdiv+0xa0>
 80002f2:	220f      	movs	r2, #15
 80002f4:	402a      	ands	r2, r5
 80002f6:	2a04      	cmp	r2, #4
 80002f8:	d000      	beq.n	80002fc <__aeabi_fdiv+0xa0>
 80002fa:	3504      	adds	r5, #4
 80002fc:	012a      	lsls	r2, r5, #4
 80002fe:	d503      	bpl.n	8000308 <__aeabi_fdiv+0xac>
 8000300:	4b61      	ldr	r3, [pc, #388]	; (8000488 <__aeabi_fdiv+0x22c>)
 8000302:	401d      	ands	r5, r3
 8000304:	003b      	movs	r3, r7
 8000306:	3380      	adds	r3, #128	; 0x80
 8000308:	2bfe      	cmp	r3, #254	; 0xfe
 800030a:	dd00      	ble.n	800030e <__aeabi_fdiv+0xb2>
 800030c:	e074      	b.n	80003f8 <__aeabi_fdiv+0x19c>
 800030e:	01aa      	lsls	r2, r5, #6
 8000310:	0a52      	lsrs	r2, r2, #9
 8000312:	b2d8      	uxtb	r0, r3
 8000314:	e002      	b.n	800031c <__aeabi_fdiv+0xc0>
 8000316:	000e      	movs	r6, r1
 8000318:	2000      	movs	r0, #0
 800031a:	2200      	movs	r2, #0
 800031c:	05c0      	lsls	r0, r0, #23
 800031e:	07f6      	lsls	r6, r6, #31
 8000320:	4310      	orrs	r0, r2
 8000322:	4330      	orrs	r0, r6
 8000324:	bce0      	pop	{r5, r6, r7}
 8000326:	46ba      	mov	sl, r7
 8000328:	46b1      	mov	r9, r6
 800032a:	46a8      	mov	r8, r5
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	4643      	mov	r3, r8
 8000330:	2b00      	cmp	r3, #0
 8000332:	d13f      	bne.n	80003b4 <__aeabi_fdiv+0x158>
 8000334:	2202      	movs	r2, #2
 8000336:	3fff      	subs	r7, #255	; 0xff
 8000338:	e003      	b.n	8000342 <__aeabi_fdiv+0xe6>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d12d      	bne.n	800039c <__aeabi_fdiv+0x140>
 8000340:	2201      	movs	r2, #1
 8000342:	0031      	movs	r1, r6
 8000344:	464b      	mov	r3, r9
 8000346:	4061      	eors	r1, r4
 8000348:	b2c9      	uxtb	r1, r1
 800034a:	4313      	orrs	r3, r2
 800034c:	2b0f      	cmp	r3, #15
 800034e:	d838      	bhi.n	80003c2 <__aeabi_fdiv+0x166>
 8000350:	484e      	ldr	r0, [pc, #312]	; (800048c <__aeabi_fdiv+0x230>)
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	58c3      	ldr	r3, [r0, r3]
 8000356:	469f      	mov	pc, r3
 8000358:	2d00      	cmp	r5, #0
 800035a:	d113      	bne.n	8000384 <__aeabi_fdiv+0x128>
 800035c:	2304      	movs	r3, #4
 800035e:	4699      	mov	r9, r3
 8000360:	3b03      	subs	r3, #3
 8000362:	2700      	movs	r7, #0
 8000364:	469a      	mov	sl, r3
 8000366:	e792      	b.n	800028e <__aeabi_fdiv+0x32>
 8000368:	2d00      	cmp	r5, #0
 800036a:	d105      	bne.n	8000378 <__aeabi_fdiv+0x11c>
 800036c:	2308      	movs	r3, #8
 800036e:	4699      	mov	r9, r3
 8000370:	3b06      	subs	r3, #6
 8000372:	27ff      	movs	r7, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e78a      	b.n	800028e <__aeabi_fdiv+0x32>
 8000378:	230c      	movs	r3, #12
 800037a:	4699      	mov	r9, r3
 800037c:	3b09      	subs	r3, #9
 800037e:	27ff      	movs	r7, #255	; 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e784      	b.n	800028e <__aeabi_fdiv+0x32>
 8000384:	0028      	movs	r0, r5
 8000386:	f000 fc13 	bl	8000bb0 <__clzsi2>
 800038a:	2776      	movs	r7, #118	; 0x76
 800038c:	1f43      	subs	r3, r0, #5
 800038e:	409d      	lsls	r5, r3
 8000390:	2300      	movs	r3, #0
 8000392:	427f      	negs	r7, r7
 8000394:	4699      	mov	r9, r3
 8000396:	469a      	mov	sl, r3
 8000398:	1a3f      	subs	r7, r7, r0
 800039a:	e778      	b.n	800028e <__aeabi_fdiv+0x32>
 800039c:	4640      	mov	r0, r8
 800039e:	f000 fc07 	bl	8000bb0 <__clzsi2>
 80003a2:	4642      	mov	r2, r8
 80003a4:	1f43      	subs	r3, r0, #5
 80003a6:	409a      	lsls	r2, r3
 80003a8:	2376      	movs	r3, #118	; 0x76
 80003aa:	425b      	negs	r3, r3
 80003ac:	4690      	mov	r8, r2
 80003ae:	1a1b      	subs	r3, r3, r0
 80003b0:	2200      	movs	r2, #0
 80003b2:	e77e      	b.n	80002b2 <__aeabi_fdiv+0x56>
 80003b4:	2303      	movs	r3, #3
 80003b6:	464a      	mov	r2, r9
 80003b8:	431a      	orrs	r2, r3
 80003ba:	4691      	mov	r9, r2
 80003bc:	33fc      	adds	r3, #252	; 0xfc
 80003be:	2203      	movs	r2, #3
 80003c0:	e777      	b.n	80002b2 <__aeabi_fdiv+0x56>
 80003c2:	000e      	movs	r6, r1
 80003c4:	20ff      	movs	r0, #255	; 0xff
 80003c6:	2200      	movs	r2, #0
 80003c8:	e7a8      	b.n	800031c <__aeabi_fdiv+0xc0>
 80003ca:	2201      	movs	r2, #1
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	2b1b      	cmp	r3, #27
 80003d0:	dca2      	bgt.n	8000318 <__aeabi_fdiv+0xbc>
 80003d2:	379e      	adds	r7, #158	; 0x9e
 80003d4:	002a      	movs	r2, r5
 80003d6:	40bd      	lsls	r5, r7
 80003d8:	40da      	lsrs	r2, r3
 80003da:	1e6b      	subs	r3, r5, #1
 80003dc:	419d      	sbcs	r5, r3
 80003de:	4315      	orrs	r5, r2
 80003e0:	076a      	lsls	r2, r5, #29
 80003e2:	d004      	beq.n	80003ee <__aeabi_fdiv+0x192>
 80003e4:	220f      	movs	r2, #15
 80003e6:	402a      	ands	r2, r5
 80003e8:	2a04      	cmp	r2, #4
 80003ea:	d000      	beq.n	80003ee <__aeabi_fdiv+0x192>
 80003ec:	3504      	adds	r5, #4
 80003ee:	016a      	lsls	r2, r5, #5
 80003f0:	d544      	bpl.n	800047c <__aeabi_fdiv+0x220>
 80003f2:	2001      	movs	r0, #1
 80003f4:	2200      	movs	r2, #0
 80003f6:	e791      	b.n	800031c <__aeabi_fdiv+0xc0>
 80003f8:	20ff      	movs	r0, #255	; 0xff
 80003fa:	2200      	movs	r2, #0
 80003fc:	e78e      	b.n	800031c <__aeabi_fdiv+0xc0>
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	2600      	movs	r6, #0
 8000402:	20ff      	movs	r0, #255	; 0xff
 8000404:	03d2      	lsls	r2, r2, #15
 8000406:	e789      	b.n	800031c <__aeabi_fdiv+0xc0>
 8000408:	2300      	movs	r3, #0
 800040a:	4698      	mov	r8, r3
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	03d2      	lsls	r2, r2, #15
 8000410:	4215      	tst	r5, r2
 8000412:	d008      	beq.n	8000426 <__aeabi_fdiv+0x1ca>
 8000414:	4643      	mov	r3, r8
 8000416:	4213      	tst	r3, r2
 8000418:	d105      	bne.n	8000426 <__aeabi_fdiv+0x1ca>
 800041a:	431a      	orrs	r2, r3
 800041c:	0252      	lsls	r2, r2, #9
 800041e:	0026      	movs	r6, r4
 8000420:	20ff      	movs	r0, #255	; 0xff
 8000422:	0a52      	lsrs	r2, r2, #9
 8000424:	e77a      	b.n	800031c <__aeabi_fdiv+0xc0>
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	03d2      	lsls	r2, r2, #15
 800042a:	432a      	orrs	r2, r5
 800042c:	0252      	lsls	r2, r2, #9
 800042e:	20ff      	movs	r0, #255	; 0xff
 8000430:	0a52      	lsrs	r2, r2, #9
 8000432:	e773      	b.n	800031c <__aeabi_fdiv+0xc0>
 8000434:	4642      	mov	r2, r8
 8000436:	016b      	lsls	r3, r5, #5
 8000438:	0155      	lsls	r5, r2, #5
 800043a:	42ab      	cmp	r3, r5
 800043c:	d21a      	bcs.n	8000474 <__aeabi_fdiv+0x218>
 800043e:	201b      	movs	r0, #27
 8000440:	2200      	movs	r2, #0
 8000442:	3f01      	subs	r7, #1
 8000444:	2601      	movs	r6, #1
 8000446:	001c      	movs	r4, r3
 8000448:	0052      	lsls	r2, r2, #1
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	2c00      	cmp	r4, #0
 800044e:	db01      	blt.n	8000454 <__aeabi_fdiv+0x1f8>
 8000450:	429d      	cmp	r5, r3
 8000452:	d801      	bhi.n	8000458 <__aeabi_fdiv+0x1fc>
 8000454:	1b5b      	subs	r3, r3, r5
 8000456:	4332      	orrs	r2, r6
 8000458:	3801      	subs	r0, #1
 800045a:	2800      	cmp	r0, #0
 800045c:	d1f3      	bne.n	8000446 <__aeabi_fdiv+0x1ea>
 800045e:	1e58      	subs	r0, r3, #1
 8000460:	4183      	sbcs	r3, r0
 8000462:	4313      	orrs	r3, r2
 8000464:	001d      	movs	r5, r3
 8000466:	003b      	movs	r3, r7
 8000468:	337f      	adds	r3, #127	; 0x7f
 800046a:	000e      	movs	r6, r1
 800046c:	2b00      	cmp	r3, #0
 800046e:	dd00      	ble.n	8000472 <__aeabi_fdiv+0x216>
 8000470:	e73d      	b.n	80002ee <__aeabi_fdiv+0x92>
 8000472:	e7aa      	b.n	80003ca <__aeabi_fdiv+0x16e>
 8000474:	201a      	movs	r0, #26
 8000476:	2201      	movs	r2, #1
 8000478:	1b5b      	subs	r3, r3, r5
 800047a:	e7e3      	b.n	8000444 <__aeabi_fdiv+0x1e8>
 800047c:	01aa      	lsls	r2, r5, #6
 800047e:	2000      	movs	r0, #0
 8000480:	0a52      	lsrs	r2, r2, #9
 8000482:	e74b      	b.n	800031c <__aeabi_fdiv+0xc0>
 8000484:	08004744 	.word	0x08004744
 8000488:	f7ffffff 	.word	0xf7ffffff
 800048c:	08004784 	.word	0x08004784

08000490 <__aeabi_fmul>:
 8000490:	0243      	lsls	r3, r0, #9
 8000492:	0a5b      	lsrs	r3, r3, #9
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	464f      	mov	r7, r9
 8000498:	4646      	mov	r6, r8
 800049a:	4699      	mov	r9, r3
 800049c:	46d6      	mov	lr, sl
 800049e:	0fc3      	lsrs	r3, r0, #31
 80004a0:	0045      	lsls	r5, r0, #1
 80004a2:	4698      	mov	r8, r3
 80004a4:	b5c0      	push	{r6, r7, lr}
 80004a6:	464b      	mov	r3, r9
 80004a8:	1c0f      	adds	r7, r1, #0
 80004aa:	0e2d      	lsrs	r5, r5, #24
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fmul+0x20>
 80004ae:	e0cb      	b.n	8000648 <__aeabi_fmul+0x1b8>
 80004b0:	2dff      	cmp	r5, #255	; 0xff
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fmul+0x26>
 80004b4:	e0cf      	b.n	8000656 <__aeabi_fmul+0x1c6>
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	04d2      	lsls	r2, r2, #19
 80004bc:	431a      	orrs	r2, r3
 80004be:	2300      	movs	r3, #0
 80004c0:	4691      	mov	r9, r2
 80004c2:	2600      	movs	r6, #0
 80004c4:	469a      	mov	sl, r3
 80004c6:	3d7f      	subs	r5, #127	; 0x7f
 80004c8:	027c      	lsls	r4, r7, #9
 80004ca:	007b      	lsls	r3, r7, #1
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0e1b      	lsrs	r3, r3, #24
 80004d0:	0fff      	lsrs	r7, r7, #31
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fmul+0x48>
 80004d6:	e0a9      	b.n	800062c <__aeabi_fmul+0x19c>
 80004d8:	2bff      	cmp	r3, #255	; 0xff
 80004da:	d011      	beq.n	8000500 <__aeabi_fmul+0x70>
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	00e4      	lsls	r4, r4, #3
 80004e0:	04d2      	lsls	r2, r2, #19
 80004e2:	4314      	orrs	r4, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	3b7f      	subs	r3, #127	; 0x7f
 80004e8:	195b      	adds	r3, r3, r5
 80004ea:	407a      	eors	r2, r7
 80004ec:	2000      	movs	r0, #0
 80004ee:	b2d2      	uxtb	r2, r2
 80004f0:	1c5d      	adds	r5, r3, #1
 80004f2:	2e0a      	cmp	r6, #10
 80004f4:	dd13      	ble.n	800051e <__aeabi_fmul+0x8e>
 80004f6:	003a      	movs	r2, r7
 80004f8:	2e0b      	cmp	r6, #11
 80004fa:	d047      	beq.n	800058c <__aeabi_fmul+0xfc>
 80004fc:	4647      	mov	r7, r8
 80004fe:	e03f      	b.n	8000580 <__aeabi_fmul+0xf0>
 8000500:	002b      	movs	r3, r5
 8000502:	33ff      	adds	r3, #255	; 0xff
 8000504:	2c00      	cmp	r4, #0
 8000506:	d11e      	bne.n	8000546 <__aeabi_fmul+0xb6>
 8000508:	2202      	movs	r2, #2
 800050a:	4316      	orrs	r6, r2
 800050c:	4642      	mov	r2, r8
 800050e:	3501      	adds	r5, #1
 8000510:	407a      	eors	r2, r7
 8000512:	b2d2      	uxtb	r2, r2
 8000514:	35ff      	adds	r5, #255	; 0xff
 8000516:	2e0a      	cmp	r6, #10
 8000518:	dd00      	ble.n	800051c <__aeabi_fmul+0x8c>
 800051a:	e0e4      	b.n	80006e6 <__aeabi_fmul+0x256>
 800051c:	2002      	movs	r0, #2
 800051e:	2e02      	cmp	r6, #2
 8000520:	dc1c      	bgt.n	800055c <__aeabi_fmul+0xcc>
 8000522:	3e01      	subs	r6, #1
 8000524:	2e01      	cmp	r6, #1
 8000526:	d842      	bhi.n	80005ae <__aeabi_fmul+0x11e>
 8000528:	2802      	cmp	r0, #2
 800052a:	d03d      	beq.n	80005a8 <__aeabi_fmul+0x118>
 800052c:	2801      	cmp	r0, #1
 800052e:	d166      	bne.n	80005fe <__aeabi_fmul+0x16e>
 8000530:	2000      	movs	r0, #0
 8000532:	2100      	movs	r1, #0
 8000534:	05c0      	lsls	r0, r0, #23
 8000536:	4308      	orrs	r0, r1
 8000538:	07d2      	lsls	r2, r2, #31
 800053a:	4310      	orrs	r0, r2
 800053c:	bce0      	pop	{r5, r6, r7}
 800053e:	46ba      	mov	sl, r7
 8000540:	46b1      	mov	r9, r6
 8000542:	46a8      	mov	r8, r5
 8000544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000546:	2203      	movs	r2, #3
 8000548:	4316      	orrs	r6, r2
 800054a:	4642      	mov	r2, r8
 800054c:	3501      	adds	r5, #1
 800054e:	407a      	eors	r2, r7
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	35ff      	adds	r5, #255	; 0xff
 8000554:	2e0a      	cmp	r6, #10
 8000556:	dd00      	ble.n	800055a <__aeabi_fmul+0xca>
 8000558:	e0e4      	b.n	8000724 <__aeabi_fmul+0x294>
 800055a:	2003      	movs	r0, #3
 800055c:	2101      	movs	r1, #1
 800055e:	40b1      	lsls	r1, r6
 8000560:	26a6      	movs	r6, #166	; 0xa6
 8000562:	00f6      	lsls	r6, r6, #3
 8000564:	4231      	tst	r1, r6
 8000566:	d10a      	bne.n	800057e <__aeabi_fmul+0xee>
 8000568:	2690      	movs	r6, #144	; 0x90
 800056a:	00b6      	lsls	r6, r6, #2
 800056c:	4231      	tst	r1, r6
 800056e:	d116      	bne.n	800059e <__aeabi_fmul+0x10e>
 8000570:	3eb9      	subs	r6, #185	; 0xb9
 8000572:	3eff      	subs	r6, #255	; 0xff
 8000574:	420e      	tst	r6, r1
 8000576:	d01a      	beq.n	80005ae <__aeabi_fmul+0x11e>
 8000578:	46a1      	mov	r9, r4
 800057a:	4682      	mov	sl, r0
 800057c:	e000      	b.n	8000580 <__aeabi_fmul+0xf0>
 800057e:	0017      	movs	r7, r2
 8000580:	4653      	mov	r3, sl
 8000582:	003a      	movs	r2, r7
 8000584:	2b02      	cmp	r3, #2
 8000586:	d00f      	beq.n	80005a8 <__aeabi_fmul+0x118>
 8000588:	464c      	mov	r4, r9
 800058a:	4650      	mov	r0, sl
 800058c:	2803      	cmp	r0, #3
 800058e:	d1cd      	bne.n	800052c <__aeabi_fmul+0x9c>
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	03c9      	lsls	r1, r1, #15
 8000594:	4321      	orrs	r1, r4
 8000596:	0249      	lsls	r1, r1, #9
 8000598:	20ff      	movs	r0, #255	; 0xff
 800059a:	0a49      	lsrs	r1, r1, #9
 800059c:	e7ca      	b.n	8000534 <__aeabi_fmul+0xa4>
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	2200      	movs	r2, #0
 80005a2:	20ff      	movs	r0, #255	; 0xff
 80005a4:	03c9      	lsls	r1, r1, #15
 80005a6:	e7c5      	b.n	8000534 <__aeabi_fmul+0xa4>
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	2100      	movs	r1, #0
 80005ac:	e7c2      	b.n	8000534 <__aeabi_fmul+0xa4>
 80005ae:	0c20      	lsrs	r0, r4, #16
 80005b0:	4649      	mov	r1, r9
 80005b2:	0424      	lsls	r4, r4, #16
 80005b4:	0c24      	lsrs	r4, r4, #16
 80005b6:	0027      	movs	r7, r4
 80005b8:	0c0e      	lsrs	r6, r1, #16
 80005ba:	0409      	lsls	r1, r1, #16
 80005bc:	0c09      	lsrs	r1, r1, #16
 80005be:	4374      	muls	r4, r6
 80005c0:	434f      	muls	r7, r1
 80005c2:	4346      	muls	r6, r0
 80005c4:	4348      	muls	r0, r1
 80005c6:	0c39      	lsrs	r1, r7, #16
 80005c8:	1900      	adds	r0, r0, r4
 80005ca:	1809      	adds	r1, r1, r0
 80005cc:	428c      	cmp	r4, r1
 80005ce:	d903      	bls.n	80005d8 <__aeabi_fmul+0x148>
 80005d0:	2080      	movs	r0, #128	; 0x80
 80005d2:	0240      	lsls	r0, r0, #9
 80005d4:	4684      	mov	ip, r0
 80005d6:	4466      	add	r6, ip
 80005d8:	043f      	lsls	r7, r7, #16
 80005da:	0408      	lsls	r0, r1, #16
 80005dc:	0c3f      	lsrs	r7, r7, #16
 80005de:	19c0      	adds	r0, r0, r7
 80005e0:	0184      	lsls	r4, r0, #6
 80005e2:	1e67      	subs	r7, r4, #1
 80005e4:	41bc      	sbcs	r4, r7
 80005e6:	0c09      	lsrs	r1, r1, #16
 80005e8:	0e80      	lsrs	r0, r0, #26
 80005ea:	1989      	adds	r1, r1, r6
 80005ec:	4304      	orrs	r4, r0
 80005ee:	0189      	lsls	r1, r1, #6
 80005f0:	430c      	orrs	r4, r1
 80005f2:	0109      	lsls	r1, r1, #4
 80005f4:	d571      	bpl.n	80006da <__aeabi_fmul+0x24a>
 80005f6:	2301      	movs	r3, #1
 80005f8:	0861      	lsrs	r1, r4, #1
 80005fa:	401c      	ands	r4, r3
 80005fc:	430c      	orrs	r4, r1
 80005fe:	002b      	movs	r3, r5
 8000600:	337f      	adds	r3, #127	; 0x7f
 8000602:	2b00      	cmp	r3, #0
 8000604:	dd51      	ble.n	80006aa <__aeabi_fmul+0x21a>
 8000606:	0761      	lsls	r1, r4, #29
 8000608:	d004      	beq.n	8000614 <__aeabi_fmul+0x184>
 800060a:	210f      	movs	r1, #15
 800060c:	4021      	ands	r1, r4
 800060e:	2904      	cmp	r1, #4
 8000610:	d000      	beq.n	8000614 <__aeabi_fmul+0x184>
 8000612:	3404      	adds	r4, #4
 8000614:	0121      	lsls	r1, r4, #4
 8000616:	d503      	bpl.n	8000620 <__aeabi_fmul+0x190>
 8000618:	4b43      	ldr	r3, [pc, #268]	; (8000728 <__aeabi_fmul+0x298>)
 800061a:	401c      	ands	r4, r3
 800061c:	002b      	movs	r3, r5
 800061e:	3380      	adds	r3, #128	; 0x80
 8000620:	2bfe      	cmp	r3, #254	; 0xfe
 8000622:	dcc1      	bgt.n	80005a8 <__aeabi_fmul+0x118>
 8000624:	01a1      	lsls	r1, r4, #6
 8000626:	0a49      	lsrs	r1, r1, #9
 8000628:	b2d8      	uxtb	r0, r3
 800062a:	e783      	b.n	8000534 <__aeabi_fmul+0xa4>
 800062c:	2c00      	cmp	r4, #0
 800062e:	d12c      	bne.n	800068a <__aeabi_fmul+0x1fa>
 8000630:	2301      	movs	r3, #1
 8000632:	4642      	mov	r2, r8
 8000634:	431e      	orrs	r6, r3
 8000636:	002b      	movs	r3, r5
 8000638:	407a      	eors	r2, r7
 800063a:	2001      	movs	r0, #1
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	1c5d      	adds	r5, r3, #1
 8000640:	2e0a      	cmp	r6, #10
 8000642:	dd00      	ble.n	8000646 <__aeabi_fmul+0x1b6>
 8000644:	e757      	b.n	80004f6 <__aeabi_fmul+0x66>
 8000646:	e76a      	b.n	800051e <__aeabi_fmul+0x8e>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d110      	bne.n	800066e <__aeabi_fmul+0x1de>
 800064c:	2301      	movs	r3, #1
 800064e:	2604      	movs	r6, #4
 8000650:	2500      	movs	r5, #0
 8000652:	469a      	mov	sl, r3
 8000654:	e738      	b.n	80004c8 <__aeabi_fmul+0x38>
 8000656:	2b00      	cmp	r3, #0
 8000658:	d104      	bne.n	8000664 <__aeabi_fmul+0x1d4>
 800065a:	2302      	movs	r3, #2
 800065c:	2608      	movs	r6, #8
 800065e:	25ff      	movs	r5, #255	; 0xff
 8000660:	469a      	mov	sl, r3
 8000662:	e731      	b.n	80004c8 <__aeabi_fmul+0x38>
 8000664:	2303      	movs	r3, #3
 8000666:	260c      	movs	r6, #12
 8000668:	25ff      	movs	r5, #255	; 0xff
 800066a:	469a      	mov	sl, r3
 800066c:	e72c      	b.n	80004c8 <__aeabi_fmul+0x38>
 800066e:	4648      	mov	r0, r9
 8000670:	f000 fa9e 	bl	8000bb0 <__clzsi2>
 8000674:	464a      	mov	r2, r9
 8000676:	1f43      	subs	r3, r0, #5
 8000678:	2576      	movs	r5, #118	; 0x76
 800067a:	409a      	lsls	r2, r3
 800067c:	2300      	movs	r3, #0
 800067e:	426d      	negs	r5, r5
 8000680:	4691      	mov	r9, r2
 8000682:	2600      	movs	r6, #0
 8000684:	469a      	mov	sl, r3
 8000686:	1a2d      	subs	r5, r5, r0
 8000688:	e71e      	b.n	80004c8 <__aeabi_fmul+0x38>
 800068a:	0020      	movs	r0, r4
 800068c:	f000 fa90 	bl	8000bb0 <__clzsi2>
 8000690:	4642      	mov	r2, r8
 8000692:	1f43      	subs	r3, r0, #5
 8000694:	409c      	lsls	r4, r3
 8000696:	1a2b      	subs	r3, r5, r0
 8000698:	3b76      	subs	r3, #118	; 0x76
 800069a:	407a      	eors	r2, r7
 800069c:	2000      	movs	r0, #0
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	1c5d      	adds	r5, r3, #1
 80006a2:	2e0a      	cmp	r6, #10
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_fmul+0x218>
 80006a6:	e726      	b.n	80004f6 <__aeabi_fmul+0x66>
 80006a8:	e739      	b.n	800051e <__aeabi_fmul+0x8e>
 80006aa:	2101      	movs	r1, #1
 80006ac:	1acb      	subs	r3, r1, r3
 80006ae:	2b1b      	cmp	r3, #27
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fmul+0x224>
 80006b2:	e73d      	b.n	8000530 <__aeabi_fmul+0xa0>
 80006b4:	359e      	adds	r5, #158	; 0x9e
 80006b6:	0021      	movs	r1, r4
 80006b8:	40ac      	lsls	r4, r5
 80006ba:	40d9      	lsrs	r1, r3
 80006bc:	1e63      	subs	r3, r4, #1
 80006be:	419c      	sbcs	r4, r3
 80006c0:	4321      	orrs	r1, r4
 80006c2:	074b      	lsls	r3, r1, #29
 80006c4:	d004      	beq.n	80006d0 <__aeabi_fmul+0x240>
 80006c6:	230f      	movs	r3, #15
 80006c8:	400b      	ands	r3, r1
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	d000      	beq.n	80006d0 <__aeabi_fmul+0x240>
 80006ce:	3104      	adds	r1, #4
 80006d0:	014b      	lsls	r3, r1, #5
 80006d2:	d504      	bpl.n	80006de <__aeabi_fmul+0x24e>
 80006d4:	2001      	movs	r0, #1
 80006d6:	2100      	movs	r1, #0
 80006d8:	e72c      	b.n	8000534 <__aeabi_fmul+0xa4>
 80006da:	001d      	movs	r5, r3
 80006dc:	e78f      	b.n	80005fe <__aeabi_fmul+0x16e>
 80006de:	0189      	lsls	r1, r1, #6
 80006e0:	2000      	movs	r0, #0
 80006e2:	0a49      	lsrs	r1, r1, #9
 80006e4:	e726      	b.n	8000534 <__aeabi_fmul+0xa4>
 80006e6:	2302      	movs	r3, #2
 80006e8:	2e0f      	cmp	r6, #15
 80006ea:	d10c      	bne.n	8000706 <__aeabi_fmul+0x276>
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	464b      	mov	r3, r9
 80006f0:	03c9      	lsls	r1, r1, #15
 80006f2:	420b      	tst	r3, r1
 80006f4:	d00d      	beq.n	8000712 <__aeabi_fmul+0x282>
 80006f6:	420c      	tst	r4, r1
 80006f8:	d10b      	bne.n	8000712 <__aeabi_fmul+0x282>
 80006fa:	4321      	orrs	r1, r4
 80006fc:	0249      	lsls	r1, r1, #9
 80006fe:	003a      	movs	r2, r7
 8000700:	20ff      	movs	r0, #255	; 0xff
 8000702:	0a49      	lsrs	r1, r1, #9
 8000704:	e716      	b.n	8000534 <__aeabi_fmul+0xa4>
 8000706:	2e0b      	cmp	r6, #11
 8000708:	d000      	beq.n	800070c <__aeabi_fmul+0x27c>
 800070a:	e6f7      	b.n	80004fc <__aeabi_fmul+0x6c>
 800070c:	46a1      	mov	r9, r4
 800070e:	469a      	mov	sl, r3
 8000710:	e736      	b.n	8000580 <__aeabi_fmul+0xf0>
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	464b      	mov	r3, r9
 8000716:	03c9      	lsls	r1, r1, #15
 8000718:	4319      	orrs	r1, r3
 800071a:	0249      	lsls	r1, r1, #9
 800071c:	4642      	mov	r2, r8
 800071e:	20ff      	movs	r0, #255	; 0xff
 8000720:	0a49      	lsrs	r1, r1, #9
 8000722:	e707      	b.n	8000534 <__aeabi_fmul+0xa4>
 8000724:	2303      	movs	r3, #3
 8000726:	e7df      	b.n	80006e8 <__aeabi_fmul+0x258>
 8000728:	f7ffffff 	.word	0xf7ffffff

0800072c <__aeabi_fsub>:
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	46c6      	mov	lr, r8
 8000730:	0243      	lsls	r3, r0, #9
 8000732:	0a5b      	lsrs	r3, r3, #9
 8000734:	0045      	lsls	r5, r0, #1
 8000736:	00da      	lsls	r2, r3, #3
 8000738:	0fc4      	lsrs	r4, r0, #31
 800073a:	0248      	lsls	r0, r1, #9
 800073c:	004f      	lsls	r7, r1, #1
 800073e:	4694      	mov	ip, r2
 8000740:	0a42      	lsrs	r2, r0, #9
 8000742:	001e      	movs	r6, r3
 8000744:	4690      	mov	r8, r2
 8000746:	b500      	push	{lr}
 8000748:	0e2d      	lsrs	r5, r5, #24
 800074a:	0e3f      	lsrs	r7, r7, #24
 800074c:	0fc9      	lsrs	r1, r1, #31
 800074e:	0980      	lsrs	r0, r0, #6
 8000750:	2fff      	cmp	r7, #255	; 0xff
 8000752:	d059      	beq.n	8000808 <__aeabi_fsub+0xdc>
 8000754:	2201      	movs	r2, #1
 8000756:	4051      	eors	r1, r2
 8000758:	428c      	cmp	r4, r1
 800075a:	d039      	beq.n	80007d0 <__aeabi_fsub+0xa4>
 800075c:	1bea      	subs	r2, r5, r7
 800075e:	2a00      	cmp	r2, #0
 8000760:	dd58      	ble.n	8000814 <__aeabi_fsub+0xe8>
 8000762:	2f00      	cmp	r7, #0
 8000764:	d068      	beq.n	8000838 <__aeabi_fsub+0x10c>
 8000766:	2dff      	cmp	r5, #255	; 0xff
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x40>
 800076a:	e0d1      	b.n	8000910 <__aeabi_fsub+0x1e4>
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	04db      	lsls	r3, r3, #19
 8000770:	4318      	orrs	r0, r3
 8000772:	2a1b      	cmp	r2, #27
 8000774:	dc00      	bgt.n	8000778 <__aeabi_fsub+0x4c>
 8000776:	e0e3      	b.n	8000940 <__aeabi_fsub+0x214>
 8000778:	2301      	movs	r3, #1
 800077a:	4662      	mov	r2, ip
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	015a      	lsls	r2, r3, #5
 8000780:	d400      	bmi.n	8000784 <__aeabi_fsub+0x58>
 8000782:	e0ac      	b.n	80008de <__aeabi_fsub+0x1b2>
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	099e      	lsrs	r6, r3, #6
 8000788:	0030      	movs	r0, r6
 800078a:	f000 fa11 	bl	8000bb0 <__clzsi2>
 800078e:	0033      	movs	r3, r6
 8000790:	3805      	subs	r0, #5
 8000792:	4083      	lsls	r3, r0
 8000794:	4285      	cmp	r5, r0
 8000796:	dc00      	bgt.n	800079a <__aeabi_fsub+0x6e>
 8000798:	e0c6      	b.n	8000928 <__aeabi_fsub+0x1fc>
 800079a:	4ab2      	ldr	r2, [pc, #712]	; (8000a64 <__aeabi_fsub+0x338>)
 800079c:	1a2d      	subs	r5, r5, r0
 800079e:	4013      	ands	r3, r2
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007a4:	220f      	movs	r2, #15
 80007a6:	401a      	ands	r2, r3
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fsub+0x82>
 80007ac:	3304      	adds	r3, #4
 80007ae:	015a      	lsls	r2, r3, #5
 80007b0:	d400      	bmi.n	80007b4 <__aeabi_fsub+0x88>
 80007b2:	e097      	b.n	80008e4 <__aeabi_fsub+0x1b8>
 80007b4:	1c6a      	adds	r2, r5, #1
 80007b6:	2dfe      	cmp	r5, #254	; 0xfe
 80007b8:	d100      	bne.n	80007bc <__aeabi_fsub+0x90>
 80007ba:	e084      	b.n	80008c6 <__aeabi_fsub+0x19a>
 80007bc:	019b      	lsls	r3, r3, #6
 80007be:	0a5e      	lsrs	r6, r3, #9
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	05d0      	lsls	r0, r2, #23
 80007c4:	4330      	orrs	r0, r6
 80007c6:	07e4      	lsls	r4, r4, #31
 80007c8:	4320      	orrs	r0, r4
 80007ca:	bc80      	pop	{r7}
 80007cc:	46b8      	mov	r8, r7
 80007ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d0:	1bea      	subs	r2, r5, r7
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	dd41      	ble.n	800085a <__aeabi_fsub+0x12e>
 80007d6:	2f00      	cmp	r7, #0
 80007d8:	d06b      	beq.n	80008b2 <__aeabi_fsub+0x186>
 80007da:	2dff      	cmp	r5, #255	; 0xff
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fsub+0xb4>
 80007de:	e097      	b.n	8000910 <__aeabi_fsub+0x1e4>
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	04db      	lsls	r3, r3, #19
 80007e4:	4318      	orrs	r0, r3
 80007e6:	2a1b      	cmp	r2, #27
 80007e8:	dc00      	bgt.n	80007ec <__aeabi_fsub+0xc0>
 80007ea:	e0cc      	b.n	8000986 <__aeabi_fsub+0x25a>
 80007ec:	2301      	movs	r3, #1
 80007ee:	4463      	add	r3, ip
 80007f0:	015a      	lsls	r2, r3, #5
 80007f2:	d574      	bpl.n	80008de <__aeabi_fsub+0x1b2>
 80007f4:	3501      	adds	r5, #1
 80007f6:	2dff      	cmp	r5, #255	; 0xff
 80007f8:	d065      	beq.n	80008c6 <__aeabi_fsub+0x19a>
 80007fa:	2201      	movs	r2, #1
 80007fc:	499a      	ldr	r1, [pc, #616]	; (8000a68 <__aeabi_fsub+0x33c>)
 80007fe:	401a      	ands	r2, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	400b      	ands	r3, r1
 8000804:	4313      	orrs	r3, r2
 8000806:	e7cb      	b.n	80007a0 <__aeabi_fsub+0x74>
 8000808:	2800      	cmp	r0, #0
 800080a:	d01f      	beq.n	800084c <__aeabi_fsub+0x120>
 800080c:	428c      	cmp	r4, r1
 800080e:	d022      	beq.n	8000856 <__aeabi_fsub+0x12a>
 8000810:	002a      	movs	r2, r5
 8000812:	3aff      	subs	r2, #255	; 0xff
 8000814:	2a00      	cmp	r2, #0
 8000816:	d035      	beq.n	8000884 <__aeabi_fsub+0x158>
 8000818:	1b7a      	subs	r2, r7, r5
 800081a:	2d00      	cmp	r5, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fsub+0xf4>
 800081e:	e099      	b.n	8000954 <__aeabi_fsub+0x228>
 8000820:	4663      	mov	r3, ip
 8000822:	2b00      	cmp	r3, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fsub+0xfc>
 8000826:	e0dd      	b.n	80009e4 <__aeabi_fsub+0x2b8>
 8000828:	1e53      	subs	r3, r2, #1
 800082a:	2a01      	cmp	r2, #1
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0x104>
 800082e:	e105      	b.n	8000a3c <__aeabi_fsub+0x310>
 8000830:	2aff      	cmp	r2, #255	; 0xff
 8000832:	d06b      	beq.n	800090c <__aeabi_fsub+0x1e0>
 8000834:	001a      	movs	r2, r3
 8000836:	e094      	b.n	8000962 <__aeabi_fsub+0x236>
 8000838:	2800      	cmp	r0, #0
 800083a:	d073      	beq.n	8000924 <__aeabi_fsub+0x1f8>
 800083c:	1e51      	subs	r1, r2, #1
 800083e:	2a01      	cmp	r2, #1
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x118>
 8000842:	e0df      	b.n	8000a04 <__aeabi_fsub+0x2d8>
 8000844:	2aff      	cmp	r2, #255	; 0xff
 8000846:	d063      	beq.n	8000910 <__aeabi_fsub+0x1e4>
 8000848:	000a      	movs	r2, r1
 800084a:	e792      	b.n	8000772 <__aeabi_fsub+0x46>
 800084c:	2201      	movs	r2, #1
 800084e:	4051      	eors	r1, r2
 8000850:	42a1      	cmp	r1, r4
 8000852:	d000      	beq.n	8000856 <__aeabi_fsub+0x12a>
 8000854:	e782      	b.n	800075c <__aeabi_fsub+0x30>
 8000856:	002a      	movs	r2, r5
 8000858:	3aff      	subs	r2, #255	; 0xff
 800085a:	2a00      	cmp	r2, #0
 800085c:	d036      	beq.n	80008cc <__aeabi_fsub+0x1a0>
 800085e:	1b7a      	subs	r2, r7, r5
 8000860:	2d00      	cmp	r5, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fsub+0x13a>
 8000864:	e0aa      	b.n	80009bc <__aeabi_fsub+0x290>
 8000866:	2fff      	cmp	r7, #255	; 0xff
 8000868:	d100      	bne.n	800086c <__aeabi_fsub+0x140>
 800086a:	e0da      	b.n	8000a22 <__aeabi_fsub+0x2f6>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	4661      	mov	r1, ip
 8000870:	04db      	lsls	r3, r3, #19
 8000872:	4319      	orrs	r1, r3
 8000874:	468c      	mov	ip, r1
 8000876:	2a1b      	cmp	r2, #27
 8000878:	dc00      	bgt.n	800087c <__aeabi_fsub+0x150>
 800087a:	e0d4      	b.n	8000a26 <__aeabi_fsub+0x2fa>
 800087c:	2301      	movs	r3, #1
 800087e:	003d      	movs	r5, r7
 8000880:	181b      	adds	r3, r3, r0
 8000882:	e7b5      	b.n	80007f0 <__aeabi_fsub+0xc4>
 8000884:	27fe      	movs	r7, #254	; 0xfe
 8000886:	1c6a      	adds	r2, r5, #1
 8000888:	4217      	tst	r7, r2
 800088a:	d171      	bne.n	8000970 <__aeabi_fsub+0x244>
 800088c:	2d00      	cmp	r5, #0
 800088e:	d000      	beq.n	8000892 <__aeabi_fsub+0x166>
 8000890:	e09e      	b.n	80009d0 <__aeabi_fsub+0x2a4>
 8000892:	4663      	mov	r3, ip
 8000894:	2b00      	cmp	r3, #0
 8000896:	d100      	bne.n	800089a <__aeabi_fsub+0x16e>
 8000898:	e0d5      	b.n	8000a46 <__aeabi_fsub+0x31a>
 800089a:	2200      	movs	r2, #0
 800089c:	2800      	cmp	r0, #0
 800089e:	d100      	bne.n	80008a2 <__aeabi_fsub+0x176>
 80008a0:	e78f      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	015e      	lsls	r6, r3, #5
 80008a6:	d400      	bmi.n	80008aa <__aeabi_fsub+0x17e>
 80008a8:	e0d6      	b.n	8000a58 <__aeabi_fsub+0x32c>
 80008aa:	4663      	mov	r3, ip
 80008ac:	000c      	movs	r4, r1
 80008ae:	1ac3      	subs	r3, r0, r3
 80008b0:	e776      	b.n	80007a0 <__aeabi_fsub+0x74>
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d036      	beq.n	8000924 <__aeabi_fsub+0x1f8>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_fsub+0x192>
 80008bc:	e09a      	b.n	80009f4 <__aeabi_fsub+0x2c8>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d026      	beq.n	8000910 <__aeabi_fsub+0x1e4>
 80008c2:	000a      	movs	r2, r1
 80008c4:	e78f      	b.n	80007e6 <__aeabi_fsub+0xba>
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	2600      	movs	r6, #0
 80008ca:	e77a      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008cc:	27fe      	movs	r7, #254	; 0xfe
 80008ce:	1c6a      	adds	r2, r5, #1
 80008d0:	4217      	tst	r7, r2
 80008d2:	d062      	beq.n	800099a <__aeabi_fsub+0x26e>
 80008d4:	2aff      	cmp	r2, #255	; 0xff
 80008d6:	d0f6      	beq.n	80008c6 <__aeabi_fsub+0x19a>
 80008d8:	0015      	movs	r5, r2
 80008da:	4460      	add	r0, ip
 80008dc:	0843      	lsrs	r3, r0, #1
 80008de:	075a      	lsls	r2, r3, #29
 80008e0:	d000      	beq.n	80008e4 <__aeabi_fsub+0x1b8>
 80008e2:	e75f      	b.n	80007a4 <__aeabi_fsub+0x78>
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	2dff      	cmp	r5, #255	; 0xff
 80008e8:	d012      	beq.n	8000910 <__aeabi_fsub+0x1e4>
 80008ea:	025b      	lsls	r3, r3, #9
 80008ec:	0a5e      	lsrs	r6, r3, #9
 80008ee:	b2ea      	uxtb	r2, r5
 80008f0:	e767      	b.n	80007c2 <__aeabi_fsub+0x96>
 80008f2:	4662      	mov	r2, ip
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fsub+0x1ce>
 80008f8:	e093      	b.n	8000a22 <__aeabi_fsub+0x2f6>
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d008      	beq.n	8000910 <__aeabi_fsub+0x1e4>
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	4213      	tst	r3, r2
 8000904:	d004      	beq.n	8000910 <__aeabi_fsub+0x1e4>
 8000906:	4640      	mov	r0, r8
 8000908:	4210      	tst	r0, r2
 800090a:	d101      	bne.n	8000910 <__aeabi_fsub+0x1e4>
 800090c:	000c      	movs	r4, r1
 800090e:	4643      	mov	r3, r8
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0d8      	beq.n	80008c6 <__aeabi_fsub+0x19a>
 8000914:	2680      	movs	r6, #128	; 0x80
 8000916:	03f6      	lsls	r6, r6, #15
 8000918:	431e      	orrs	r6, r3
 800091a:	0276      	lsls	r6, r6, #9
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	0a76      	lsrs	r6, r6, #9
 8000920:	e74f      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000922:	4643      	mov	r3, r8
 8000924:	0015      	movs	r5, r2
 8000926:	e7de      	b.n	80008e6 <__aeabi_fsub+0x1ba>
 8000928:	2220      	movs	r2, #32
 800092a:	1b40      	subs	r0, r0, r5
 800092c:	3001      	adds	r0, #1
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	0019      	movs	r1, r3
 8000932:	4093      	lsls	r3, r2
 8000934:	40c1      	lsrs	r1, r0
 8000936:	1e5a      	subs	r2, r3, #1
 8000938:	4193      	sbcs	r3, r2
 800093a:	2500      	movs	r5, #0
 800093c:	430b      	orrs	r3, r1
 800093e:	e72f      	b.n	80007a0 <__aeabi_fsub+0x74>
 8000940:	2320      	movs	r3, #32
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	0001      	movs	r1, r0
 8000946:	4098      	lsls	r0, r3
 8000948:	0003      	movs	r3, r0
 800094a:	40d1      	lsrs	r1, r2
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	4193      	sbcs	r3, r2
 8000950:	430b      	orrs	r3, r1
 8000952:	e712      	b.n	800077a <__aeabi_fsub+0x4e>
 8000954:	2fff      	cmp	r7, #255	; 0xff
 8000956:	d0d9      	beq.n	800090c <__aeabi_fsub+0x1e0>
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	4664      	mov	r4, ip
 800095c:	04db      	lsls	r3, r3, #19
 800095e:	431c      	orrs	r4, r3
 8000960:	46a4      	mov	ip, r4
 8000962:	2a1b      	cmp	r2, #27
 8000964:	dd52      	ble.n	8000a0c <__aeabi_fsub+0x2e0>
 8000966:	2301      	movs	r3, #1
 8000968:	000c      	movs	r4, r1
 800096a:	003d      	movs	r5, r7
 800096c:	1ac3      	subs	r3, r0, r3
 800096e:	e706      	b.n	800077e <__aeabi_fsub+0x52>
 8000970:	4663      	mov	r3, ip
 8000972:	1a1e      	subs	r6, r3, r0
 8000974:	0173      	lsls	r3, r6, #5
 8000976:	d439      	bmi.n	80009ec <__aeabi_fsub+0x2c0>
 8000978:	2e00      	cmp	r6, #0
 800097a:	d000      	beq.n	800097e <__aeabi_fsub+0x252>
 800097c:	e704      	b.n	8000788 <__aeabi_fsub+0x5c>
 800097e:	2400      	movs	r4, #0
 8000980:	2200      	movs	r2, #0
 8000982:	2600      	movs	r6, #0
 8000984:	e71d      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000986:	2320      	movs	r3, #32
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	0001      	movs	r1, r0
 800098c:	4098      	lsls	r0, r3
 800098e:	0003      	movs	r3, r0
 8000990:	40d1      	lsrs	r1, r2
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	430b      	orrs	r3, r1
 8000998:	e729      	b.n	80007ee <__aeabi_fsub+0xc2>
 800099a:	2d00      	cmp	r5, #0
 800099c:	d1a9      	bne.n	80008f2 <__aeabi_fsub+0x1c6>
 800099e:	4663      	mov	r3, ip
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d056      	beq.n	8000a52 <__aeabi_fsub+0x326>
 80009a4:	2200      	movs	r2, #0
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x280>
 80009aa:	e70a      	b.n	80007c2 <__aeabi_fsub+0x96>
 80009ac:	0003      	movs	r3, r0
 80009ae:	4463      	add	r3, ip
 80009b0:	015a      	lsls	r2, r3, #5
 80009b2:	d594      	bpl.n	80008de <__aeabi_fsub+0x1b2>
 80009b4:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <__aeabi_fsub+0x338>)
 80009b6:	3501      	adds	r5, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	e790      	b.n	80008de <__aeabi_fsub+0x1b2>
 80009bc:	4663      	mov	r3, ip
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0af      	beq.n	8000922 <__aeabi_fsub+0x1f6>
 80009c2:	1e53      	subs	r3, r2, #1
 80009c4:	2a01      	cmp	r2, #1
 80009c6:	d015      	beq.n	80009f4 <__aeabi_fsub+0x2c8>
 80009c8:	2aff      	cmp	r2, #255	; 0xff
 80009ca:	d02a      	beq.n	8000a22 <__aeabi_fsub+0x2f6>
 80009cc:	001a      	movs	r2, r3
 80009ce:	e752      	b.n	8000876 <__aeabi_fsub+0x14a>
 80009d0:	4662      	mov	r2, ip
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d191      	bne.n	80008fa <__aeabi_fsub+0x1ce>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	d198      	bne.n	800090c <__aeabi_fsub+0x1e0>
 80009da:	2680      	movs	r6, #128	; 0x80
 80009dc:	2400      	movs	r4, #0
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	03f6      	lsls	r6, r6, #15
 80009e2:	e6ee      	b.n	80007c2 <__aeabi_fsub+0x96>
 80009e4:	000c      	movs	r4, r1
 80009e6:	4643      	mov	r3, r8
 80009e8:	0015      	movs	r5, r2
 80009ea:	e77c      	b.n	80008e6 <__aeabi_fsub+0x1ba>
 80009ec:	4663      	mov	r3, ip
 80009ee:	000c      	movs	r4, r1
 80009f0:	1ac6      	subs	r6, r0, r3
 80009f2:	e6c9      	b.n	8000788 <__aeabi_fsub+0x5c>
 80009f4:	0003      	movs	r3, r0
 80009f6:	4463      	add	r3, ip
 80009f8:	2501      	movs	r5, #1
 80009fa:	015a      	lsls	r2, r3, #5
 80009fc:	d400      	bmi.n	8000a00 <__aeabi_fsub+0x2d4>
 80009fe:	e76e      	b.n	80008de <__aeabi_fsub+0x1b2>
 8000a00:	2502      	movs	r5, #2
 8000a02:	e6fa      	b.n	80007fa <__aeabi_fsub+0xce>
 8000a04:	4663      	mov	r3, ip
 8000a06:	2501      	movs	r5, #1
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	e6b8      	b.n	800077e <__aeabi_fsub+0x52>
 8000a0c:	4664      	mov	r4, ip
 8000a0e:	2320      	movs	r3, #32
 8000a10:	40d4      	lsrs	r4, r2
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	4193      	sbcs	r3, r2
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	e7a2      	b.n	8000968 <__aeabi_fsub+0x23c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	e774      	b.n	8000910 <__aeabi_fsub+0x1e4>
 8000a26:	4661      	mov	r1, ip
 8000a28:	2320      	movs	r3, #32
 8000a2a:	40d1      	lsrs	r1, r2
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	4662      	mov	r2, ip
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	1e5a      	subs	r2, r3, #1
 8000a36:	4193      	sbcs	r3, r2
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	e720      	b.n	800087e <__aeabi_fsub+0x152>
 8000a3c:	4663      	mov	r3, ip
 8000a3e:	000c      	movs	r4, r1
 8000a40:	2501      	movs	r5, #1
 8000a42:	1ac3      	subs	r3, r0, r3
 8000a44:	e69b      	b.n	800077e <__aeabi_fsub+0x52>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d099      	beq.n	800097e <__aeabi_fsub+0x252>
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	4646      	mov	r6, r8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	e6b7      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a52:	4646      	mov	r6, r8
 8000a54:	2200      	movs	r2, #0
 8000a56:	e6b4      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fsub+0x332>
 8000a5c:	e73f      	b.n	80008de <__aeabi_fsub+0x1b2>
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2600      	movs	r6, #0
 8000a62:	e6ae      	b.n	80007c2 <__aeabi_fsub+0x96>
 8000a64:	fbffffff 	.word	0xfbffffff
 8000a68:	7dffffff 	.word	0x7dffffff

08000a6c <__aeabi_f2iz>:
 8000a6c:	0241      	lsls	r1, r0, #9
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0fc3      	lsrs	r3, r0, #31
 8000a72:	0a49      	lsrs	r1, r1, #9
 8000a74:	2000      	movs	r0, #0
 8000a76:	0e12      	lsrs	r2, r2, #24
 8000a78:	2a7e      	cmp	r2, #126	; 0x7e
 8000a7a:	dd03      	ble.n	8000a84 <__aeabi_f2iz+0x18>
 8000a7c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a7e:	dd02      	ble.n	8000a86 <__aeabi_f2iz+0x1a>
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <__aeabi_f2iz+0x3c>)
 8000a82:	1898      	adds	r0, r3, r2
 8000a84:	4770      	bx	lr
 8000a86:	2080      	movs	r0, #128	; 0x80
 8000a88:	0400      	lsls	r0, r0, #16
 8000a8a:	4301      	orrs	r1, r0
 8000a8c:	2a95      	cmp	r2, #149	; 0x95
 8000a8e:	dc07      	bgt.n	8000aa0 <__aeabi_f2iz+0x34>
 8000a90:	2096      	movs	r0, #150	; 0x96
 8000a92:	1a82      	subs	r2, r0, r2
 8000a94:	40d1      	lsrs	r1, r2
 8000a96:	4248      	negs	r0, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f3      	bne.n	8000a84 <__aeabi_f2iz+0x18>
 8000a9c:	0008      	movs	r0, r1
 8000a9e:	e7f1      	b.n	8000a84 <__aeabi_f2iz+0x18>
 8000aa0:	3a96      	subs	r2, #150	; 0x96
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	e7f7      	b.n	8000a96 <__aeabi_f2iz+0x2a>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	7fffffff 	.word	0x7fffffff

08000aac <__aeabi_ui2f>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	1e04      	subs	r4, r0, #0
 8000ab0:	d00e      	beq.n	8000ad0 <__aeabi_ui2f+0x24>
 8000ab2:	f000 f87d 	bl	8000bb0 <__clzsi2>
 8000ab6:	239e      	movs	r3, #158	; 0x9e
 8000ab8:	0001      	movs	r1, r0
 8000aba:	1a1b      	subs	r3, r3, r0
 8000abc:	2b96      	cmp	r3, #150	; 0x96
 8000abe:	dc0c      	bgt.n	8000ada <__aeabi_ui2f+0x2e>
 8000ac0:	2808      	cmp	r0, #8
 8000ac2:	d02c      	beq.n	8000b1e <__aeabi_ui2f+0x72>
 8000ac4:	3908      	subs	r1, #8
 8000ac6:	408c      	lsls	r4, r1
 8000ac8:	0264      	lsls	r4, r4, #9
 8000aca:	0a64      	lsrs	r4, r4, #9
 8000acc:	b2d8      	uxtb	r0, r3
 8000ace:	e001      	b.n	8000ad4 <__aeabi_ui2f+0x28>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	05c0      	lsls	r0, r0, #23
 8000ad6:	4320      	orrs	r0, r4
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
 8000ada:	2b99      	cmp	r3, #153	; 0x99
 8000adc:	dd0a      	ble.n	8000af4 <__aeabi_ui2f+0x48>
 8000ade:	0002      	movs	r2, r0
 8000ae0:	0020      	movs	r0, r4
 8000ae2:	321b      	adds	r2, #27
 8000ae4:	4090      	lsls	r0, r2
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1e50      	subs	r0, r2, #1
 8000aea:	4182      	sbcs	r2, r0
 8000aec:	2005      	movs	r0, #5
 8000aee:	1a40      	subs	r0, r0, r1
 8000af0:	40c4      	lsrs	r4, r0
 8000af2:	4314      	orrs	r4, r2
 8000af4:	2905      	cmp	r1, #5
 8000af6:	dc16      	bgt.n	8000b26 <__aeabi_ui2f+0x7a>
 8000af8:	0022      	movs	r2, r4
 8000afa:	480f      	ldr	r0, [pc, #60]	; (8000b38 <__aeabi_ui2f+0x8c>)
 8000afc:	4002      	ands	r2, r0
 8000afe:	0765      	lsls	r5, r4, #29
 8000b00:	d009      	beq.n	8000b16 <__aeabi_ui2f+0x6a>
 8000b02:	250f      	movs	r5, #15
 8000b04:	402c      	ands	r4, r5
 8000b06:	2c04      	cmp	r4, #4
 8000b08:	d005      	beq.n	8000b16 <__aeabi_ui2f+0x6a>
 8000b0a:	3204      	adds	r2, #4
 8000b0c:	0154      	lsls	r4, r2, #5
 8000b0e:	d502      	bpl.n	8000b16 <__aeabi_ui2f+0x6a>
 8000b10:	239f      	movs	r3, #159	; 0x9f
 8000b12:	4002      	ands	r2, r0
 8000b14:	1a5b      	subs	r3, r3, r1
 8000b16:	0192      	lsls	r2, r2, #6
 8000b18:	0a54      	lsrs	r4, r2, #9
 8000b1a:	b2d8      	uxtb	r0, r3
 8000b1c:	e7da      	b.n	8000ad4 <__aeabi_ui2f+0x28>
 8000b1e:	0264      	lsls	r4, r4, #9
 8000b20:	2096      	movs	r0, #150	; 0x96
 8000b22:	0a64      	lsrs	r4, r4, #9
 8000b24:	e7d6      	b.n	8000ad4 <__aeabi_ui2f+0x28>
 8000b26:	1f4a      	subs	r2, r1, #5
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	0022      	movs	r2, r4
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <__aeabi_ui2f+0x8c>)
 8000b2e:	4002      	ands	r2, r0
 8000b30:	0765      	lsls	r5, r4, #29
 8000b32:	d0f0      	beq.n	8000b16 <__aeabi_ui2f+0x6a>
 8000b34:	e7e5      	b.n	8000b02 <__aeabi_ui2f+0x56>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	fbffffff 	.word	0xfbffffff

08000b3c <__aeabi_cfrcmple>:
 8000b3c:	4684      	mov	ip, r0
 8000b3e:	0008      	movs	r0, r1
 8000b40:	4661      	mov	r1, ip
 8000b42:	e7ff      	b.n	8000b44 <__aeabi_cfcmpeq>

08000b44 <__aeabi_cfcmpeq>:
 8000b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b46:	f000 f8bd 	bl	8000cc4 <__lesf2>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	d401      	bmi.n	8000b52 <__aeabi_cfcmpeq+0xe>
 8000b4e:	2100      	movs	r1, #0
 8000b50:	42c8      	cmn	r0, r1
 8000b52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b54 <__aeabi_fcmpeq>:
 8000b54:	b510      	push	{r4, lr}
 8000b56:	f000 f849 	bl	8000bec <__eqsf2>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	3001      	adds	r0, #1
 8000b5e:	bd10      	pop	{r4, pc}

08000b60 <__aeabi_fcmplt>:
 8000b60:	b510      	push	{r4, lr}
 8000b62:	f000 f8af 	bl	8000cc4 <__lesf2>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	db01      	blt.n	8000b6e <__aeabi_fcmplt+0xe>
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	2001      	movs	r0, #1
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)

08000b74 <__aeabi_fcmple>:
 8000b74:	b510      	push	{r4, lr}
 8000b76:	f000 f8a5 	bl	8000cc4 <__lesf2>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	dd01      	ble.n	8000b82 <__aeabi_fcmple+0xe>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	2001      	movs	r0, #1
 8000b84:	bd10      	pop	{r4, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)

08000b88 <__aeabi_fcmpgt>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	f000 f855 	bl	8000c38 <__gesf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	dc01      	bgt.n	8000b96 <__aeabi_fcmpgt+0xe>
 8000b92:	2000      	movs	r0, #0
 8000b94:	bd10      	pop	{r4, pc}
 8000b96:	2001      	movs	r0, #1
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)

08000b9c <__aeabi_fcmpge>:
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	f000 f84b 	bl	8000c38 <__gesf2>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	da01      	bge.n	8000baa <__aeabi_fcmpge+0xe>
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	bd10      	pop	{r4, pc}
 8000baa:	2001      	movs	r0, #1
 8000bac:	bd10      	pop	{r4, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)

08000bb0 <__clzsi2>:
 8000bb0:	211c      	movs	r1, #28
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	4298      	cmp	r0, r3
 8000bb8:	d301      	bcc.n	8000bbe <__clzsi2+0xe>
 8000bba:	0c00      	lsrs	r0, r0, #16
 8000bbc:	3910      	subs	r1, #16
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	d301      	bcc.n	8000bc8 <__clzsi2+0x18>
 8000bc4:	0a00      	lsrs	r0, r0, #8
 8000bc6:	3908      	subs	r1, #8
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d301      	bcc.n	8000bd2 <__clzsi2+0x22>
 8000bce:	0900      	lsrs	r0, r0, #4
 8000bd0:	3904      	subs	r1, #4
 8000bd2:	a202      	add	r2, pc, #8	; (adr r2, 8000bdc <__clzsi2+0x2c>)
 8000bd4:	5c10      	ldrb	r0, [r2, r0]
 8000bd6:	1840      	adds	r0, r0, r1
 8000bd8:	4770      	bx	lr
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	02020304 	.word	0x02020304
 8000be0:	01010101 	.word	0x01010101
	...

08000bec <__eqsf2>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	0042      	lsls	r2, r0, #1
 8000bf0:	0245      	lsls	r5, r0, #9
 8000bf2:	024e      	lsls	r6, r1, #9
 8000bf4:	004c      	lsls	r4, r1, #1
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	0e12      	lsrs	r2, r2, #24
 8000bfe:	0a76      	lsrs	r6, r6, #9
 8000c00:	0e24      	lsrs	r4, r4, #24
 8000c02:	0fc9      	lsrs	r1, r1, #31
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	d006      	beq.n	8000c16 <__eqsf2+0x2a>
 8000c08:	2cff      	cmp	r4, #255	; 0xff
 8000c0a:	d003      	beq.n	8000c14 <__eqsf2+0x28>
 8000c0c:	42a2      	cmp	r2, r4
 8000c0e:	d101      	bne.n	8000c14 <__eqsf2+0x28>
 8000c10:	42b5      	cmp	r5, r6
 8000c12:	d006      	beq.n	8000c22 <__eqsf2+0x36>
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d1fc      	bne.n	8000c14 <__eqsf2+0x28>
 8000c1a:	2cff      	cmp	r4, #255	; 0xff
 8000c1c:	d1fa      	bne.n	8000c14 <__eqsf2+0x28>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d1f8      	bne.n	8000c14 <__eqsf2+0x28>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d006      	beq.n	8000c34 <__eqsf2+0x48>
 8000c26:	2001      	movs	r0, #1
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d1f3      	bne.n	8000c14 <__eqsf2+0x28>
 8000c2c:	0028      	movs	r0, r5
 8000c2e:	1e43      	subs	r3, r0, #1
 8000c30:	4198      	sbcs	r0, r3
 8000c32:	e7ef      	b.n	8000c14 <__eqsf2+0x28>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7ed      	b.n	8000c14 <__eqsf2+0x28>

08000c38 <__gesf2>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	0042      	lsls	r2, r0, #1
 8000c3c:	0245      	lsls	r5, r0, #9
 8000c3e:	024e      	lsls	r6, r1, #9
 8000c40:	004c      	lsls	r4, r1, #1
 8000c42:	0fc3      	lsrs	r3, r0, #31
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	0e12      	lsrs	r2, r2, #24
 8000c48:	0a76      	lsrs	r6, r6, #9
 8000c4a:	0e24      	lsrs	r4, r4, #24
 8000c4c:	0fc8      	lsrs	r0, r1, #31
 8000c4e:	2aff      	cmp	r2, #255	; 0xff
 8000c50:	d01b      	beq.n	8000c8a <__gesf2+0x52>
 8000c52:	2cff      	cmp	r4, #255	; 0xff
 8000c54:	d00e      	beq.n	8000c74 <__gesf2+0x3c>
 8000c56:	2a00      	cmp	r2, #0
 8000c58:	d11b      	bne.n	8000c92 <__gesf2+0x5a>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d101      	bne.n	8000c62 <__gesf2+0x2a>
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d01c      	beq.n	8000c9c <__gesf2+0x64>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d00c      	beq.n	8000c80 <__gesf2+0x48>
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d01c      	beq.n	8000ca4 <__gesf2+0x6c>
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	1e58      	subs	r0, r3, #1
 8000c6e:	4008      	ands	r0, r1
 8000c70:	3801      	subs	r0, #1
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d122      	bne.n	8000cbe <__gesf2+0x86>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d1f4      	bne.n	8000c66 <__gesf2+0x2e>
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d1f2      	bne.n	8000c66 <__gesf2+0x2e>
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d1f6      	bne.n	8000c72 <__gesf2+0x3a>
 8000c84:	2001      	movs	r0, #1
 8000c86:	4240      	negs	r0, r0
 8000c88:	e7f3      	b.n	8000c72 <__gesf2+0x3a>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d117      	bne.n	8000cbe <__gesf2+0x86>
 8000c8e:	2cff      	cmp	r4, #255	; 0xff
 8000c90:	d0f0      	beq.n	8000c74 <__gesf2+0x3c>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d1e7      	bne.n	8000c66 <__gesf2+0x2e>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d1e5      	bne.n	8000c66 <__gesf2+0x2e>
 8000c9a:	e7e6      	b.n	8000c6a <__gesf2+0x32>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e7      	beq.n	8000c72 <__gesf2+0x3a>
 8000ca2:	e7e2      	b.n	8000c6a <__gesf2+0x32>
 8000ca4:	42a2      	cmp	r2, r4
 8000ca6:	dc05      	bgt.n	8000cb4 <__gesf2+0x7c>
 8000ca8:	dbea      	blt.n	8000c80 <__gesf2+0x48>
 8000caa:	42b5      	cmp	r5, r6
 8000cac:	d802      	bhi.n	8000cb4 <__gesf2+0x7c>
 8000cae:	d3e7      	bcc.n	8000c80 <__gesf2+0x48>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7de      	b.n	8000c72 <__gesf2+0x3a>
 8000cb4:	4243      	negs	r3, r0
 8000cb6:	4158      	adcs	r0, r3
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	3801      	subs	r0, #1
 8000cbc:	e7d9      	b.n	8000c72 <__gesf2+0x3a>
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	4240      	negs	r0, r0
 8000cc2:	e7d6      	b.n	8000c72 <__gesf2+0x3a>

08000cc4 <__lesf2>:
 8000cc4:	b570      	push	{r4, r5, r6, lr}
 8000cc6:	0042      	lsls	r2, r0, #1
 8000cc8:	0245      	lsls	r5, r0, #9
 8000cca:	024e      	lsls	r6, r1, #9
 8000ccc:	004c      	lsls	r4, r1, #1
 8000cce:	0fc3      	lsrs	r3, r0, #31
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	0e12      	lsrs	r2, r2, #24
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc8      	lsrs	r0, r1, #31
 8000cda:	2aff      	cmp	r2, #255	; 0xff
 8000cdc:	d00b      	beq.n	8000cf6 <__lesf2+0x32>
 8000cde:	2cff      	cmp	r4, #255	; 0xff
 8000ce0:	d00d      	beq.n	8000cfe <__lesf2+0x3a>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d11f      	bne.n	8000d26 <__lesf2+0x62>
 8000ce6:	2c00      	cmp	r4, #0
 8000ce8:	d116      	bne.n	8000d18 <__lesf2+0x54>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d114      	bne.n	8000d18 <__lesf2+0x54>
 8000cee:	2000      	movs	r0, #0
 8000cf0:	2d00      	cmp	r5, #0
 8000cf2:	d010      	beq.n	8000d16 <__lesf2+0x52>
 8000cf4:	e009      	b.n	8000d0a <__lesf2+0x46>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d10c      	bne.n	8000d14 <__lesf2+0x50>
 8000cfa:	2cff      	cmp	r4, #255	; 0xff
 8000cfc:	d113      	bne.n	8000d26 <__lesf2+0x62>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d108      	bne.n	8000d14 <__lesf2+0x50>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d008      	beq.n	8000d18 <__lesf2+0x54>
 8000d06:	4283      	cmp	r3, r0
 8000d08:	d012      	beq.n	8000d30 <__lesf2+0x6c>
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	1e58      	subs	r0, r3, #1
 8000d0e:	4008      	ands	r0, r1
 8000d10:	3801      	subs	r0, #1
 8000d12:	e000      	b.n	8000d16 <__lesf2+0x52>
 8000d14:	2002      	movs	r0, #2
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	2d00      	cmp	r5, #0
 8000d1a:	d1f4      	bne.n	8000d06 <__lesf2+0x42>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d1fa      	bne.n	8000d16 <__lesf2+0x52>
 8000d20:	2001      	movs	r0, #1
 8000d22:	4240      	negs	r0, r0
 8000d24:	e7f7      	b.n	8000d16 <__lesf2+0x52>
 8000d26:	2c00      	cmp	r4, #0
 8000d28:	d1ed      	bne.n	8000d06 <__lesf2+0x42>
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d1eb      	bne.n	8000d06 <__lesf2+0x42>
 8000d2e:	e7ec      	b.n	8000d0a <__lesf2+0x46>
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	dc05      	bgt.n	8000d40 <__lesf2+0x7c>
 8000d34:	dbf2      	blt.n	8000d1c <__lesf2+0x58>
 8000d36:	42b5      	cmp	r5, r6
 8000d38:	d802      	bhi.n	8000d40 <__lesf2+0x7c>
 8000d3a:	d3ef      	bcc.n	8000d1c <__lesf2+0x58>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7ea      	b.n	8000d16 <__lesf2+0x52>
 8000d40:	4243      	negs	r3, r0
 8000d42:	4158      	adcs	r0, r3
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	3801      	subs	r0, #1
 8000d48:	e7e5      	b.n	8000d16 <__lesf2+0x52>
 8000d4a:	46c0      	nop			; (mov r8, r8)

08000d4c <LCD_SendCommand>:
 *  Created on: Sep 11, 2023
 *      Author: fervi
 */
// Function to send a command to the LCD
#include "lcd1.h"
void LCD_SendCommand(uint8_t cmd) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) low for command mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <LCD_SendCommand+0x120>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f002 f860 	bl	8002e24 <HAL_GPIO_WritePin>

    // Send the higher nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 4) & 0x01);
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	483f      	ldr	r0, [pc, #252]	; (8000e70 <LCD_SendCommand+0x124>)
 8000d74:	001a      	movs	r2, r3
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	f002 f854 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 5) & 0x01);
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2201      	movs	r2, #1
 8000d86:	4013      	ands	r3, r2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4839      	ldr	r0, [pc, #228]	; (8000e70 <LCD_SendCommand+0x124>)
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	f002 f848 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 6) & 0x01);
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	099b      	lsrs	r3, r3, #6
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4013      	ands	r3, r2
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4832      	ldr	r0, [pc, #200]	; (8000e70 <LCD_SendCommand+0x124>)
 8000da8:	0019      	movs	r1, r3
 8000daa:	f002 f83b 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 7) & 0x01);
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	09db      	lsrs	r3, r3, #7
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	482d      	ldr	r0, [pc, #180]	; (8000e70 <LCD_SendCommand+0x124>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	f002 f831 	bl	8002e24 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <LCD_SendCommand+0x124>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 f82b 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 fd5c 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <LCD_SendCommand+0x124>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2120      	movs	r1, #32
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f002 f822 	bl	8002e24 <HAL_GPIO_WritePin>

    // Send the lower nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 0) & 0x01);
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2201      	movs	r2, #1
 8000de6:	4013      	ands	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <LCD_SendCommand+0x124>)
 8000dec:	001a      	movs	r2, r3
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	f002 f818 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 1) & 0x01);
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	085b      	lsrs	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4013      	ands	r3, r2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	481b      	ldr	r0, [pc, #108]	; (8000e70 <LCD_SendCommand+0x124>)
 8000e04:	001a      	movs	r2, r3
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	f002 f80c 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 2) & 0x01);
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <LCD_SendCommand+0x124>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	f001 ffff 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 3) & 0x01);
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	08db      	lsrs	r3, r3, #3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LCD_SendCommand+0x124>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	f001 fff2 	bl	8002e24 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LCD_SendCommand+0x124>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	2120      	movs	r1, #32
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 ffec 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fd1d 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <LCD_SendCommand+0x124>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2120      	movs	r1, #32
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f001 ffe3 	bl	8002e24 <HAL_GPIO_WritePin>

    // Delay for the command to complete
    HAL_Delay(2);
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 fd14 	bl	800188c <HAL_Delay>
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	50000c00 	.word	0x50000c00
 8000e70:	50000400 	.word	0x50000400

08000e74 <LCD_SendData>:

// Function to send data to the LCD
void LCD_SendData(uint8_t data) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) high for data mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000e80:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <LCD_SendData+0x120>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 ffcc 	bl	8002e24 <HAL_GPIO_WritePin>

    // Send the higher nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 4) & 0x01);
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2201      	movs	r2, #1
 8000e96:	4013      	ands	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	483f      	ldr	r0, [pc, #252]	; (8000f98 <LCD_SendData+0x124>)
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	f001 ffc0 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 5) & 0x01);
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	095b      	lsrs	r3, r3, #5
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4839      	ldr	r0, [pc, #228]	; (8000f98 <LCD_SendData+0x124>)
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	f001 ffb4 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 6) & 0x01);
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	099b      	lsrs	r3, r3, #6
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4832      	ldr	r0, [pc, #200]	; (8000f98 <LCD_SendData+0x124>)
 8000ed0:	0019      	movs	r1, r3
 8000ed2:	f001 ffa7 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 7) & 0x01);
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	09db      	lsrs	r3, r3, #7
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	482d      	ldr	r0, [pc, #180]	; (8000f98 <LCD_SendData+0x124>)
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	f001 ff9d 	bl	8002e24 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <LCD_SendData+0x124>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	2120      	movs	r1, #32
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f001 ff97 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fcc8 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <LCD_SendData+0x124>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	0018      	movs	r0, r3
 8000f04:	f001 ff8e 	bl	8002e24 <HAL_GPIO_WritePin>

    // Send the lower nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 0) & 0x01);
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4013      	ands	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <LCD_SendData+0x124>)
 8000f14:	001a      	movs	r2, r3
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	f001 ff84 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 1) & 0x01);
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2201      	movs	r2, #1
 8000f26:	4013      	ands	r3, r2
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	481b      	ldr	r0, [pc, #108]	; (8000f98 <LCD_SendData+0x124>)
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	f001 ff78 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 2) & 0x01);
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4013      	ands	r3, r2
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <LCD_SendData+0x124>)
 8000f48:	0019      	movs	r1, r3
 8000f4a:	f001 ff6b 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 3) & 0x01);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	08db      	lsrs	r3, r3, #3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LCD_SendData+0x124>)
 8000f62:	0019      	movs	r1, r3
 8000f64:	f001 ff5e 	bl	8002e24 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LCD_SendData+0x124>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2120      	movs	r1, #32
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f001 ff58 	bl	8002e24 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f000 fc89 	bl	800188c <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <LCD_SendData+0x124>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2120      	movs	r1, #32
 8000f80:	0018      	movs	r0, r3
 8000f82:	f001 ff4f 	bl	8002e24 <HAL_GPIO_WritePin>

    // Delay for data to be written
    HAL_Delay(2);
 8000f86:	2002      	movs	r0, #2
 8000f88:	f000 fc80 	bl	800188c <HAL_Delay>
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	50000c00 	.word	0x50000c00
 8000f98:	50000400 	.word	0x50000400

08000f9c <LCD_Init>:

// Initialize the LCD
void LCD_Init(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);

    // Initialize the LCD in 4-bit mode
    HAL_Delay(15); // Wait for power-up
 8000fa0:	200f      	movs	r0, #15
 8000fa2:	f000 fc73 	bl	800188c <HAL_Delay>
    LCD_SendCommand(0x33); // Initialize
 8000fa6:	2033      	movs	r0, #51	; 0x33
 8000fa8:	f7ff fed0 	bl	8000d4c <LCD_SendCommand>
    LCD_SendCommand(0x32); // Set to 4-bit mode
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f7ff fecd 	bl	8000d4c <LCD_SendCommand>
    LCD_SendCommand(0x28); // 2 lines, 5x8 font
 8000fb2:	2028      	movs	r0, #40	; 0x28
 8000fb4:	f7ff feca 	bl	8000d4c <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off, blink off
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fec7 	bl	8000d4c <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fec4 	bl	8000d4c <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f000 fc61 	bl	800188c <HAL_Delay>
    LCD_SendCommand(0x06); // Entry mode: Increment cursor position, no display shift
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff febe 	bl	8000d4c <LCD_SendCommand>
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LCD_Clear>:

// Clear the LCD display
void LCD_Clear(void) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff feb6 	bl	8000d4c <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f000 fc53 	bl	800188c <HAL_Delay>
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <LCD_SetCursor>:

// Set the cursor position (row and column)
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	1c0a      	adds	r2, r1, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
    uint8_t row_offsets[] = {0x00, 0x40};
 8000ffe:	230c      	movs	r3, #12
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	01d2      	lsls	r2, r2, #7
 8001006:	801a      	strh	r2, [r3, #0]
    if (row >= 2) {
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d902      	bls.n	8001016 <LCD_SetCursor+0x2a>
        row = 1; // Avoid out-of-bounds access
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
    }
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	220c      	movs	r2, #12
 800101c:	18ba      	adds	r2, r7, r2
 800101e:	5cd2      	ldrb	r2, [r2, r3]
 8001020:	1dbb      	adds	r3, r7, #6
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	b25b      	sxtb	r3, r3
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	4252      	negs	r2, r2
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fe89 	bl	8000d4c <LCD_SendCommand>
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <LCD_Print>:

// Print a string to the LCD
void LCD_Print(char *str) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    while (*str) {
 800104a:	e007      	b.n	800105c <LCD_Print+0x1a>
        LCD_SendData(*str);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff0f 	bl	8000e74 <LCD_SendData>
        str++;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
    while (*str) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f3      	bne.n	800104c <LCD_Print+0xa>
    }
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}

0800106e <LCD_Printf>:
//Printf
void LCD_Printf(const char *format, ...) {
 800106e:	b40f      	push	{r0, r1, r2, r3}
 8001070:	b580      	push	{r7, lr}
 8001072:	b0c2      	sub	sp, #264	; 0x108
 8001074:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8001076:	238a      	movs	r3, #138	; 0x8a
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	1d7a      	adds	r2, r7, #5
 800107e:	32ff      	adds	r2, #255	; 0xff
 8001080:	6013      	str	r3, [r2, #0]

    // Format the string
    char buffer[256]; // Choose an appropriate buffer size
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001082:	1d7b      	adds	r3, r7, #5
 8001084:	33ff      	adds	r3, #255	; 0xff
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2288      	movs	r2, #136	; 0x88
 800108a:	0052      	lsls	r2, r2, #1
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0049      	lsls	r1, r1, #1
 8001094:	1d38      	adds	r0, r7, #4
 8001096:	f002 fe9b 	bl	8003dd0 <vsniprintf>

    va_end(args);

    // Print the formatted string to LCD
    LCD_Print(buffer);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffd0 	bl	8001042 <LCD_Print>
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b042      	add	sp, #264	; 0x108
 80010a8:	bc80      	pop	{r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	b004      	add	sp, #16
 80010ae:	4718      	bx	r3

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f000 fb63 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f8d5 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 f9f7 	bl	80014b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010c2:	f000 f999 	bl	80013f8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010c6:	f000 f92b 	bl	8001320 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //VRMS Setting the value for VRMS Variables
//  ADCVar.HADC = &hadc1;
  HAL_Delay(10);
 80010ca:	200a      	movs	r0, #10
 80010cc:	f000 fbde 	bl	800188c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80010d0:	4b5a      	ldr	r3, [pc, #360]	; (800123c <main+0x18c>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fbb8 	bl	8002848 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f000 fbd7 	bl	800188c <HAL_Delay>
  LCD_Init();
 80010de:	f7ff ff5d 	bl	8000f9c <LCD_Init>
//  GetVref(&ADCVar);
  if(HAL_ADC_Start(&hadc1) != HAL_OK)
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <main+0x18c>)
 80010e4:	0018      	movs	r0, r3
 80010e6:	f000 ff07 	bl	8001ef8 <HAL_ADC_Start>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <main+0x42>
  {
	return Fun_Error;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e09f      	b.n	8001232 <main+0x182>
  }
  if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 80010f2:	2301      	movs	r3, #1
 80010f4:	425a      	negs	r2, r3
 80010f6:	4b51      	ldr	r3, [pc, #324]	; (800123c <main+0x18c>)
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 ff86 	bl	800200c <HAL_ADC_PollForConversion>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <main+0x58>
  {
	  return Fun_Error;
 8001104:	2301      	movs	r3, #1
 8001106:	e094      	b.n	8001232 <main+0x182>
  }
  ADCVar.Vref = HAL_ADC_GetValue(&hadc1);
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <main+0x18c>)
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f812 	bl	8002134 <HAL_ADC_GetValue>
 8001110:	0003      	movs	r3, r0
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff fcca 	bl	8000aac <__aeabi_ui2f>
 8001118:	1c02      	adds	r2, r0, #0
 800111a:	4b49      	ldr	r3, [pc, #292]	; (8001240 <main+0x190>)
 800111c:	601a      	str	r2, [r3, #0]
  if(HAL_ADC_Stop(&hadc1) != HAL_OK)
 800111e:	4b47      	ldr	r3, [pc, #284]	; (800123c <main+0x18c>)
 8001120:	0018      	movs	r0, r3
 8001122:	f000 ff37 	bl	8001f94 <HAL_ADC_Stop>
 8001126:	1e03      	subs	r3, r0, #0
 8001128:	d001      	beq.n	800112e <main+0x7e>
  {
	  return Fun_Error;
 800112a:	2301      	movs	r3, #1
 800112c:	e081      	b.n	8001232 <main+0x182>
  }
  ADCVar.Vref =(1.2f * Reso)/ADCVar.Vref;
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <main+0x190>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	1c19      	adds	r1, r3, #0
 8001134:	4843      	ldr	r0, [pc, #268]	; (8001244 <main+0x194>)
 8001136:	f7ff f891 	bl	800025c <__aeabi_fdiv>
 800113a:	1c03      	adds	r3, r0, #0
 800113c:	1c1a      	adds	r2, r3, #0
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <main+0x190>)
 8001140:	601a      	str	r2, [r3, #0]
//  ADCVar.K=(ADCVar.Vref)/Reso;
//
  LCD_Clear();
 8001142:	f7ff ff48 	bl	8000fd6 <LCD_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	483f      	ldr	r0, [pc, #252]	; (8001248 <main+0x198>)
 800114c:	2200      	movs	r2, #0
 800114e:	0019      	movs	r1, r3
 8001150:	f001 fe68 	bl	8002e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_RV_GPIO_Port, M_RV_Pin, GPIO_PIN_RESET);
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	483b      	ldr	r0, [pc, #236]	; (8001248 <main+0x198>)
 800115a:	2200      	movs	r2, #0
 800115c:	0019      	movs	r1, r3
 800115e:	f001 fe61 	bl	8002e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_FW_GPIO_Port, M_FW_Pin, GPIO_PIN_SET);
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	01db      	lsls	r3, r3, #7
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <main+0x198>)
 8001168:	2201      	movs	r2, #1
 800116a:	0019      	movs	r1, r3
 800116c:	f001 fe5a 	bl	8002e24 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
	  LCD_Clear();
 8001170:	f7ff ff31 	bl	8000fd6 <LCD_Clear>
	  LCD_SetCursor(0, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ff38 	bl	8000fec <LCD_SetCursor>
	  LCD_Print("Hello, STM32!");
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <main+0x19c>)
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff5f 	bl	8001042 <LCD_Print>
	  LCD_SetCursor(1, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff ff30 	bl	8000fec <LCD_SetCursor>
	  LCD_Printf("Vrf_= %d",(uint8_t)(ADCVar.Vref*10));
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <main+0x190>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	492f      	ldr	r1, [pc, #188]	; (8001250 <main+0x1a0>)
 8001192:	1c18      	adds	r0, r3, #0
 8001194:	f7ff f97c 	bl	8000490 <__aeabi_fmul>
 8001198:	1c03      	adds	r3, r0, #0
 800119a:	1c18      	adds	r0, r3, #0
 800119c:	f7ff f846 	bl	800022c <__aeabi_f2uiz>
 80011a0:	0003      	movs	r3, r0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	001a      	movs	r2, r3
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <main+0x1a4>)
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff5f 	bl	800106e <LCD_Printf>
	  HAL_Delay(5000);
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <main+0x1a8>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 fb6a 	bl	800188c <HAL_Delay>
//	  for(uint32_t id =0;id<=20000;id++)
//	  {
//
//	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4822      	ldr	r0, [pc, #136]	; (8001248 <main+0x198>)
 80011be:	2201      	movs	r2, #1
 80011c0:	0019      	movs	r1, r3
 80011c2:	f001 fe2f 	bl	8002e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_RV_GPIO_Port, M_RV_Pin, GPIO_PIN_SET);
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	481f      	ldr	r0, [pc, #124]	; (8001248 <main+0x198>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	0019      	movs	r1, r3
 80011d0:	f001 fe28 	bl	8002e24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_FW_GPIO_Port, M_FW_Pin, GPIO_PIN_RESET);
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	01db      	lsls	r3, r3, #7
 80011d8:	481b      	ldr	r0, [pc, #108]	; (8001248 <main+0x198>)
 80011da:	2200      	movs	r2, #0
 80011dc:	0019      	movs	r1, r3
 80011de:	f001 fe21 	bl	8002e24 <HAL_GPIO_WritePin>
	  for(uint32_t id =0;id<=20000;id++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e002      	b.n	80011ee <main+0x13e>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a1a      	ldr	r2, [pc, #104]	; (800125c <main+0x1ac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d9f8      	bls.n	80011e8 <main+0x138>
	  {

	  }
	  HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	019b      	lsls	r3, r3, #6
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <main+0x198>)
 80011fc:	0019      	movs	r1, r3
 80011fe:	0010      	movs	r0, r2
 8001200:	f001 fe2d 	bl	8002e5e <HAL_GPIO_TogglePin>
	  LCD_Clear();
 8001204:	f7ff fee7 	bl	8000fd6 <LCD_Clear>
	  LCD_SetCursor(0, 0);
 8001208:	2100      	movs	r1, #0
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff feee 	bl	8000fec <LCD_SetCursor>
	  LCD_Print("_!@#$%^^&*)_");
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <main+0x1b0>)
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff ff15 	bl	8001042 <LCD_Print>
	  LCD_SetCursor(1, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fee6 	bl	8000fec <LCD_SetCursor>
	  LCD_Print("_+&%#@&_");
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <main+0x1b4>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7ff ff0d 	bl	8001042 <LCD_Print>
	  HAL_Delay(5000);
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <main+0x1a8>)
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fb2e 	bl	800188c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001230:	e789      	b.n	8001146 <main+0x96>

  }
  /* USER CODE END 3 */
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000078 	.word	0x20000078
 8001240:	20000128 	.word	0x20000128
 8001244:	45999000 	.word	0x45999000
 8001248:	50000400 	.word	0x50000400
 800124c:	0800470c 	.word	0x0800470c
 8001250:	41200000 	.word	0x41200000
 8001254:	0800471c 	.word	0x0800471c
 8001258:	00001388 	.word	0x00001388
 800125c:	00004e20 	.word	0x00004e20
 8001260:	08004728 	.word	0x08004728
 8001264:	08004738 	.word	0x08004738

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b093      	sub	sp, #76	; 0x4c
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	2414      	movs	r4, #20
 8001270:	193b      	adds	r3, r7, r4
 8001272:	0018      	movs	r0, r3
 8001274:	2334      	movs	r3, #52	; 0x34
 8001276:	001a      	movs	r2, r3
 8001278:	2100      	movs	r1, #0
 800127a:	f002 fdb5 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	0018      	movs	r0, r3
 8001282:	2310      	movs	r3, #16
 8001284:	001a      	movs	r2, r3
 8001286:	2100      	movs	r1, #0
 8001288:	f002 fdae 	bl	8003de8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fdff 	bl	8002e94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001296:	193b      	adds	r3, r7, r4
 8001298:	2202      	movs	r2, #2
 800129a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	193b      	adds	r3, r7, r4
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0052      	lsls	r2, r2, #1
 80012a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2202      	movs	r2, #2
 80012b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2202      	movs	r2, #2
 80012bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2208      	movs	r2, #8
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0292      	lsls	r2, r2, #10
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	0592      	lsls	r2, r2, #22
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	0018      	movs	r0, r3
 80012de:	f001 fe19 	bl	8002f14 <HAL_RCC_OscConfig>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012e6:	f000 f963 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	2202      	movs	r2, #2
 80012f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	22b0      	movs	r2, #176	; 0xb0
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2100      	movs	r1, #0
 8001308:	0018      	movs	r0, r3
 800130a:	f002 f913 	bl	8003534 <HAL_RCC_ClockConfig>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001312:	f000 f94d 	bl	80015b0 <Error_Handler>
  }
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b013      	add	sp, #76	; 0x4c
 800131c:	bd90      	pop	{r4, r7, pc}
	...

08001320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	0018      	movs	r0, r3
 800132a:	230c      	movs	r3, #12
 800132c:	001a      	movs	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f002 fd5a 	bl	8003de8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <MX_ADC1_Init+0xd0>)
 8001338:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_ADC1_Init+0xcc>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	05d2      	lsls	r2, r2, #23
 8001340:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_ADC1_Init+0xcc>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001356:	2204      	movs	r2, #4
 8001358:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_ADC1_Init+0xcc>)
 800135c:	2200      	movs	r2, #0
 800135e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001362:	2200      	movs	r2, #0
 8001364:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001368:	2200      	movs	r2, #0
 800136a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_ADC1_Init+0xcc>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_ADC1_Init+0xcc>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001388:	222c      	movs	r2, #44	; 0x2c
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_ADC1_Init+0xcc>)
 8001396:	2204      	movs	r2, #4
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_ADC1_Init+0xcc>)
 800139c:	2200      	movs	r2, #0
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_ADC1_Init+0xcc>)
 80013a2:	223c      	movs	r2, #60	; 0x3c
 80013a4:	2100      	movs	r1, #0
 80013a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_ADC1_Init+0xcc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_ADC1_Init+0xcc>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 fbf9 	bl	8001ba8 <HAL_ADC_Init>
 80013b6:	1e03      	subs	r3, r0, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80013ba:	f000 f8f9 	bl	80015b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <MX_ADC1_Init+0xd4>)
 80013c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	1d3a      	adds	r2, r7, #4
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_ADC1_Init+0xcc>)
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 feb8 	bl	800214c <HAL_ADC_ConfigChannel>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80013e0:	f000 f8e6 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000078 	.word	0x20000078
 80013f0:	40012400 	.word	0x40012400
 80013f4:	b8004000 	.word	0xb8004000

080013f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	2310      	movs	r3, #16
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	0018      	movs	r0, r3
 8001404:	2310      	movs	r3, #16
 8001406:	001a      	movs	r2, r3
 8001408:	2100      	movs	r1, #0
 800140a:	f002 fced 	bl	8003de8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	0018      	movs	r0, r3
 8001412:	230c      	movs	r3, #12
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f002 fce6 	bl	8003de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800141c:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <MX_TIM1_Init+0xac>)
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_TIM1_Init+0xb0>)
 8001420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001424:	223f      	movs	r2, #63	; 0x3f
 8001426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_TIM1_Init+0xb4>)
 8001432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM1_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001448:	0018      	movs	r0, r3
 800144a:	f002 f9fd 	bl	8003848 <HAL_TIM_Base_Init>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001452:	f000 f8ad 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	2110      	movs	r1, #16
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0152      	lsls	r2, r2, #5
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001460:	187a      	adds	r2, r7, r1
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_TIM1_Init+0xac>)
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f002 fa46 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001470:	f000 f89e 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001486:	1d3a      	adds	r2, r7, #4
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_TIM1_Init+0xac>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f002 fc11 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001496:	f000 f88b 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b008      	add	sp, #32
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	200000dc 	.word	0x200000dc
 80014a8:	40012c00 	.word	0x40012c00
 80014ac:	0000ffff 	.word	0x0000ffff

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	240c      	movs	r4, #12
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	0018      	movs	r0, r3
 80014bc:	2314      	movs	r3, #20
 80014be:	001a      	movs	r2, r3
 80014c0:	2100      	movs	r1, #0
 80014c2:	f002 fc91 	bl	8003de8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014cc:	2102      	movs	r1, #2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	2201      	movs	r2, #1
 80014f0:	4013      	ands	r3, r2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014fc:	2108      	movs	r1, #8
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_GPIO_Init+0xf0>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	2208      	movs	r2, #8
 8001508:	4013      	ands	r3, r2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|M_FW_Pin|M_RV_Pin|RW_Pin
 800150e:	4925      	ldr	r1, [pc, #148]	; (80015a4 <MX_GPIO_Init+0xf4>)
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_GPIO_Init+0xf8>)
 8001512:	2200      	movs	r2, #0
 8001514:	0018      	movs	r0, r3
 8001516:	f001 fc85 	bl	8002e24 <HAL_GPIO_WritePin>
                          |E_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <MX_GPIO_Init+0xfc>)
 800151c:	2200      	movs	r2, #0
 800151e:	2108      	movs	r1, #8
 8001520:	0018      	movs	r0, r3
 8001522:	f001 fc7f 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay_Pin M_FW_Pin M_RV_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|M_FW_Pin|M_RV_Pin;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	22e0      	movs	r2, #224	; 0xe0
 800152a:	0212      	lsls	r2, r2, #8
 800152c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2201      	movs	r2, #1
 8001532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2202      	movs	r2, #2
 8001538:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	193b      	adds	r3, r7, r4
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	193b      	adds	r3, r7, r4
 8001542:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <MX_GPIO_Init+0xf8>)
 8001544:	0019      	movs	r1, r3
 8001546:	0010      	movs	r0, r2
 8001548:	f001 fb08 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 800154c:	193b      	adds	r3, r7, r4
 800154e:	2208      	movs	r2, #8
 8001550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2201      	movs	r2, #1
 8001556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	193b      	adds	r3, r7, r4
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8001564:	193b      	adds	r3, r7, r4
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <MX_GPIO_Init+0xfc>)
 8001568:	0019      	movs	r1, r3
 800156a:	0010      	movs	r0, r2
 800156c:	f001 faf6 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RW_Pin|E_Pin|D4_Pin|D5_Pin
 8001570:	0021      	movs	r1, r4
 8001572:	187b      	adds	r3, r7, r1
 8001574:	22fa      	movs	r2, #250	; 0xfa
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	601a      	str	r2, [r3, #0]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2201      	movs	r2, #1
 800157e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	187b      	adds	r3, r7, r1
 800158e:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <MX_GPIO_Init+0xf8>)
 8001590:	0019      	movs	r1, r3
 8001592:	0010      	movs	r0, r2
 8001594:	f001 fae2 	bl	8002b5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b009      	add	sp, #36	; 0x24
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	0000e3e8 	.word	0x0000e3e8
 80015a8:	50000400 	.word	0x50000400
 80015ac:	50000c00 	.word	0x50000c00

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_MspInit+0x44>)
 80015c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_MspInit+0x44>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_MspInit+0x44>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2201      	movs	r2, #1
 80015d4:	4013      	ands	r3, r2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x44>)
 80015dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_MspInit+0x44>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0549      	lsls	r1, r1, #21
 80015e4:	430a      	orrs	r2, r1
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_MspInit+0x44>)
 80015ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	055b      	lsls	r3, r3, #21
 80015f0:	4013      	ands	r3, r2
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_ADC_MspInit+0x38>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d10d      	bne.n	8001632 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_ADC_MspInit+0x3c>)
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_ADC_MspInit+0x3c>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0349      	lsls	r1, r1, #13
 8001620:	430a      	orrs	r2, r1
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_ADC_MspInit+0x3c>)
 8001626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	035b      	lsls	r3, r3, #13
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b004      	add	sp, #16
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	40012400 	.word	0x40012400
 8001640:	40021000 	.word	0x40021000

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_TIM_Base_MspInit+0x38>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10d      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x3c>)
 8001658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_TIM_Base_MspInit+0x3c>)
 800165c:	2180      	movs	r1, #128	; 0x80
 800165e:	0109      	lsls	r1, r1, #4
 8001660:	430a      	orrs	r2, r1
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_TIM_Base_MspInit+0x3c>)
 8001666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b004      	add	sp, #16
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40021000 	.word	0x40021000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8d4 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f002 fb88 	bl	8003df8 <__errno>
 80016e8:	0003      	movs	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	425b      	negs	r3, r3
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	18d2      	adds	r2, r2, r3
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b006      	add	sp, #24
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20002000 	.word	0x20002000
 8001714:	00000400 	.word	0x00000400
 8001718:	20000394 	.word	0x20000394
 800171c:	200004e8 	.word	0x200004e8

08001720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800172e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001730:	f7ff fff6 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	; (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800175a:	f002 fb53 	bl	8003e04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800175e:	f7ff fca7 	bl	80010b0 <main>

08001762 <LoopForever>:

LoopForever:
  b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   r0, =_estack
 8001764:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001770:	08004840 	.word	0x08004840
  ldr r2, =_sbss
 8001774:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001778:	200004e4 	.word	0x200004e4

0800177c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_IRQHandler>
	...

08001780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001786:	1dfb      	adds	r3, r7, #7
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x3c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_Init+0x3c>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0049      	lsls	r1, r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	2003      	movs	r0, #3
 800179c:	f000 f810 	bl	80017c0 <HAL_InitTick>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d003      	beq.n	80017ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017a4:	1dfb      	adds	r3, r7, #7
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e001      	b.n	80017b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff ff06 	bl	80015bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c8:	230f      	movs	r3, #15
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_InitTick+0x88>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_InitTick+0x8c>)
 80017da:	681c      	ldr	r4, [r3, #0]
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_InitTick+0x88>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	0019      	movs	r1, r3
 80017e2:	23fa      	movs	r3, #250	; 0xfa
 80017e4:	0098      	lsls	r0, r3, #2
 80017e6:	f7fe fc95 	bl	8000114 <__udivsi3>
 80017ea:	0003      	movs	r3, r0
 80017ec:	0019      	movs	r1, r3
 80017ee:	0020      	movs	r0, r4
 80017f0:	f7fe fc90 	bl	8000114 <__udivsi3>
 80017f4:	0003      	movs	r3, r0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f001 f9a3 	bl	8002b42 <HAL_SYSTICK_Config>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d112      	bne.n	8001826 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d80a      	bhi.n	800181c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2301      	movs	r3, #1
 800180a:	425b      	negs	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	0018      	movs	r0, r3
 8001810:	f001 f982 	bl	8002b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_InitTick+0x90>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e00d      	b.n	8001838 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800181c:	230f      	movs	r3, #15
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
 8001824:	e008      	b.n	8001838 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e003      	b.n	8001838 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001830:	230f      	movs	r3, #15
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001838:	230f      	movs	r3, #15
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	781b      	ldrb	r3, [r3, #0]
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b005      	add	sp, #20
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	20000008 	.word	0x20000008
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x1c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	001a      	movs	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x20>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	18d2      	adds	r2, r2, r3
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_IncTick+0x20>)
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000008 	.word	0x20000008
 8001874:	20000398 	.word	0x20000398

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_GetTick+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000398 	.word	0x20000398

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fff0 	bl	8001878 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	001a      	movs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	f7ff ffe0 	bl	8001878 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000008 	.word	0x20000008

080018d4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80018e4:	401a      	ands	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	fe3fffff 	.word	0xfe3fffff

080018fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	23e0      	movs	r3, #224	; 0xe0
 800190a:	045b      	lsls	r3, r3, #17
 800190c:	4013      	ands	r3, r2
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}

08001916 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	2104      	movs	r1, #4
 800192a:	400a      	ands	r2, r1
 800192c:	2107      	movs	r1, #7
 800192e:	4091      	lsls	r1, r2
 8001930:	000a      	movs	r2, r1
 8001932:	43d2      	mvns	r2, r2
 8001934:	401a      	ands	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2104      	movs	r1, #4
 800193a:	400b      	ands	r3, r1
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4099      	lsls	r1, r3
 8001940:	000b      	movs	r3, r1
 8001942:	431a      	orrs	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b004      	add	sp, #16
 800194e:	bd80      	pop	{r7, pc}

08001950 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	2104      	movs	r1, #4
 8001962:	400a      	ands	r2, r1
 8001964:	2107      	movs	r1, #7
 8001966:	4091      	lsls	r1, r2
 8001968:	000a      	movs	r2, r1
 800196a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2104      	movs	r1, #4
 8001970:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001972:	40da      	lsrs	r2, r3
 8001974:	0013      	movs	r3, r2
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	23c0      	movs	r3, #192	; 0xc0
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4013      	ands	r3, r2
 8001990:	d101      	bne.n	8001996 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	211f      	movs	r1, #31
 80019b4:	400a      	ands	r2, r1
 80019b6:	210f      	movs	r1, #15
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	43d2      	mvns	r2, r2
 80019be:	401a      	ands	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	0e9b      	lsrs	r3, r3, #26
 80019c4:	210f      	movs	r1, #15
 80019c6:	4019      	ands	r1, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	201f      	movs	r0, #31
 80019cc:	4003      	ands	r3, r0
 80019ce:	4099      	lsls	r1, r3
 80019d0:	000b      	movs	r3, r1
 80019d2:	431a      	orrs	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b004      	add	sp, #16
 80019de:	bd80      	pop	{r7, pc}

080019e0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	035b      	lsls	r3, r3, #13
 80019f2:	0b5b      	lsrs	r3, r3, #13
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b002      	add	sp, #8
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	0352      	lsls	r2, r2, #13
 8001a14:	0b52      	lsrs	r2, r2, #13
 8001a16:	43d2      	mvns	r2, r2
 8001a18:	401a      	ands	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	0212      	lsls	r2, r2, #8
 8001a3c:	43d2      	mvns	r2, r2
 8001a3e:	401a      	ands	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	400b      	ands	r3, r1
 8001a48:	4904      	ldr	r1, [pc, #16]	; (8001a5c <LL_ADC_SetChannelSamplingTime+0x34>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	07ffff00 	.word	0x07ffff00

08001a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	0552      	lsls	r2, r2, #21
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	6fffffe8 	.word	0x6fffffe8

08001a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	401a      	ands	r2, r3
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	055b      	lsls	r3, r3, #21
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <LL_ADC_Enable+0x20>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b002      	add	sp, #8
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	7fffffe8 	.word	0x7fffffe8

08001ad4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <LL_ADC_Disable+0x20>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	7fffffe8 	.word	0x7fffffe8

08001af8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <LL_ADC_IsEnabled+0x18>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_ADC_IsEnabled+0x1a>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_IsDisableOngoing+0x18>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_IsDisableOngoing+0x1a>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <LL_ADC_REG_StartConversion+0x20>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	7fffffe8 	.word	0x7fffffe8

08001b60 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <LL_ADC_REG_StopConversion+0x20>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2210      	movs	r2, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	7fffffe8 	.word	0x7fffffe8

08001b84 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2204      	movs	r2, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d101      	bne.n	8001b9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b002      	add	sp, #8
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb0:	231f      	movs	r3, #31
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e17f      	b.n	8001ece <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fd13 	bl	8001604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2254      	movs	r2, #84	; 0x54
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7ff ff49 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff2e 	bl	8001a60 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c04:	4bb4      	ldr	r3, [pc, #720]	; (8001ed8 <HAL_ADC_Init+0x330>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	49b4      	ldr	r1, [pc, #720]	; (8001edc <HAL_ADC_Init+0x334>)
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fa82 	bl	8000114 <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c18:	e002      	b.n	8001c20 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f9      	bne.n	8001c1a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ff2c 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d10f      	bne.n	8001c54 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c38:	2210      	movs	r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2201      	movs	r2, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c4c:	231f      	movs	r3, #31
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff93 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	2210      	movs	r2, #16
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d000      	beq.n	8001c6e <HAL_ADC_Init+0xc6>
 8001c6c:	e122      	b.n	8001eb4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d000      	beq.n	8001c76 <HAL_ADC_Init+0xce>
 8001c74:	e11e      	b.n	8001eb4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a99      	ldr	r2, [pc, #612]	; (8001ee0 <HAL_ADC_Init+0x338>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2202      	movs	r2, #2
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff ff34 	bl	8001af8 <LL_ADC_IsEnabled>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d000      	beq.n	8001c96 <HAL_ADC_Init+0xee>
 8001c94:	e0ad      	b.n	8001df2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e1b      	ldrb	r3, [r3, #24]
 8001c9e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ca0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e5b      	ldrb	r3, [r3, #25]
 8001ca6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ca8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7e9b      	ldrb	r3, [r3, #26]
 8001cae:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001cb0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_ADC_Init+0x118>
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	015b      	lsls	r3, r3, #5
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_Init+0x11a>
 8001cc0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001cc2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001cc8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da04      	bge.n	8001cdc <HAL_ADC_Init+0x134>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	e001      	b.n	8001ce0 <HAL_ADC_Init+0x138>
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ce0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	212c      	movs	r1, #44	; 0x2c
 8001ce6:	5c5b      	ldrb	r3, [r3, r1]
 8001ce8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001cea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	5c9b      	ldrb	r3, [r3, r2]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d115      	bne.n	8001d28 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7e9b      	ldrb	r3, [r3, #26]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	0252      	lsls	r2, r2, #9
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	2220      	movs	r2, #32
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2201      	movs	r2, #1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	23e0      	movs	r3, #224	; 0xe0
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <HAL_ADC_Init+0x33c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0f9b      	lsrs	r3, r3, #30
 8001d62:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	223c      	movs	r2, #60	; 0x3c
 8001d74:	5c9b      	ldrb	r3, [r3, r2]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d111      	bne.n	8001d9e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0f9b      	lsrs	r3, r3, #30
 8001d80:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001d86:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001d8c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001d92:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_ADC_Init+0x340>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	061b      	lsls	r3, r3, #24
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d018      	beq.n	8001df2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	05db      	lsls	r3, r3, #23
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d012      	beq.n	8001df2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	061b      	lsls	r3, r3, #24
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d00c      	beq.n	8001df2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_ADC_Init+0x344>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a44      	ldr	r2, [pc, #272]	; (8001ef0 <HAL_ADC_Init+0x348>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23f0      	movs	r3, #240	; 0xf0
 8001de8:	039b      	lsls	r3, r3, #14
 8001dea:	401a      	ands	r2, r3
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_ADC_Init+0x344>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f7ff fd8a 	bl	8001916 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	493a      	ldr	r1, [pc, #232]	; (8001ef4 <HAL_ADC_Init+0x34c>)
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	f7ff fd82 	bl	8001916 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2110      	movs	r1, #16
 8001e26:	4249      	negs	r1, r1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e2c:	e018      	b.n	8001e60 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	039b      	lsls	r3, r3, #14
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d112      	bne.n	8001e60 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	221c      	movs	r2, #28
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	4252      	negs	r2, r2
 8001e50:	409a      	lsls	r2, r3
 8001e52:	0011      	movs	r1, r2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2100      	movs	r1, #0
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff fd72 	bl	8001950 <LL_ADC_GetSamplingTimeCommonChannels>
 8001e6c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10b      	bne.n	8001e8e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e80:	2203      	movs	r2, #3
 8001e82:	4393      	bics	r3, r2
 8001e84:	2201      	movs	r2, #1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e8c:	e01c      	b.n	8001ec8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	2212      	movs	r2, #18
 8001e94:	4393      	bics	r3, r2
 8001e96:	2210      	movs	r2, #16
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001eb2:	e009      	b.n	8001ec8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	2210      	movs	r2, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ec8:	231f      	movs	r3, #31
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b008      	add	sp, #32
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	00030d40 	.word	0x00030d40
 8001ee0:	fffffefd 	.word	0xfffffefd
 8001ee4:	fffe0201 	.word	0xfffe0201
 8001ee8:	1ffffc02 	.word	0x1ffffc02
 8001eec:	40012708 	.word	0x40012708
 8001ef0:	ffc3ffff 	.word	0xffc3ffff
 8001ef4:	07ffff04 	.word	0x07ffff04

08001ef8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff fe3d 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d135      	bne.n	8001f7a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2254      	movs	r2, #84	; 0x54
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_Start+0x24>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e035      	b.n	8001f88 <HAL_ADC_Start+0x90>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2254      	movs	r2, #84	; 0x54
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f24:	250f      	movs	r5, #15
 8001f26:	197c      	adds	r4, r7, r5
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 fb28 	bl	8002580 <ADC_Enable>
 8001f30:	0003      	movs	r3, r0
 8001f32:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f34:	197b      	adds	r3, r7, r5
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d119      	bne.n	8001f70 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_ADC_Start+0x98>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	0052      	lsls	r2, r2, #1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	221c      	movs	r2, #28
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2254      	movs	r2, #84	; 0x54
 8001f60:	2100      	movs	r1, #0
 8001f62:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff fde7 	bl	8001b3c <LL_ADC_REG_StartConversion>
 8001f6e:	e008      	b.n	8001f82 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2254      	movs	r2, #84	; 0x54
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f7a:	230f      	movs	r3, #15
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001f82:	230f      	movs	r3, #15
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b004      	add	sp, #16
 8001f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f90:	fffff0fe 	.word	0xfffff0fe

08001f94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2254      	movs	r2, #84	; 0x54
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Stop+0x16>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e029      	b.n	8001ffe <HAL_ADC_Stop+0x6a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2254      	movs	r2, #84	; 0x54
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001fb2:	250f      	movs	r5, #15
 8001fb4:	197c      	adds	r4, r7, r5
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 fa9f 	bl	80024fc <ADC_ConversionStop>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001fc2:	197b      	adds	r3, r7, r5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d112      	bne.n	8001ff0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fb5c 	bl	800268c <ADC_Disable>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_ADC_Stop+0x74>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2201      	movs	r2, #1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2254      	movs	r2, #84	; 0x54
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bdb0      	pop	{r4, r5, r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	fffffefe 	.word	0xfffffefe

0800200c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b08      	cmp	r3, #8
 800201c:	d102      	bne.n	8002024 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800201e:	2308      	movs	r3, #8
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e00f      	b.n	8002044 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	2220      	movs	r2, #32
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e072      	b.n	8002126 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002040:	2304      	movs	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002044:	f7ff fc18 	bl	8001878 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800204c:	e01f      	b.n	800208e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	d01c      	beq.n	800208e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002054:	f7ff fc10 	bl	8001878 <HAL_GetTick>
 8002058:	0002      	movs	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <HAL_ADC_PollForConversion+0x5e>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d111      	bne.n	800208e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	d10b      	bne.n	800208e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	2204      	movs	r2, #4
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2254      	movs	r2, #84	; 0x54
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e04b      	b.n	8002126 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	d0d9      	beq.n	800204e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff fc66 	bl	800197e <LL_ADC_REG_IsTriggerSourceSWStart>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d02e      	beq.n	8002114 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7e9b      	ldrb	r3, [r3, #26]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d12a      	bne.n	8002114 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d123      	bne.n	8002114 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fd57 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d110      	bne.n	80020fc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	210c      	movs	r1, #12
 80020e6:	438a      	bics	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_ADC_PollForConversion+0x124>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	2201      	movs	r2, #1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58
 80020fa:	e00b      	b.n	8002114 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	2220      	movs	r2, #32
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2201      	movs	r2, #1
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d103      	bne.n	8002124 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	220c      	movs	r2, #12
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	fffffefe 	.word	0xfffffefe

08002134 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002142:	0018      	movs	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	b002      	add	sp, #8
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2254      	movs	r2, #84	; 0x54
 8002166:	5c9b      	ldrb	r3, [r3, r2]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x24>
 800216c:	2302      	movs	r3, #2
 800216e:	e1c0      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x3a6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2254      	movs	r2, #84	; 0x54
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff fd01 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d000      	beq.n	8002188 <HAL_ADC_ConfigChannel+0x3c>
 8002186:	e1a3      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d100      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x46>
 8002190:	e143      	b.n	800241a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	429a      	cmp	r2, r3
 800219c:	d004      	beq.n	80021a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021a2:	4ac1      	ldr	r2, [pc, #772]	; (80024a8 <HAL_ADC_ConfigChannel+0x35c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0019      	movs	r1, r3
 80021b2:	0010      	movs	r0, r2
 80021b4:	f7ff fc14 	bl	80019e0 <LL_ADC_REG_SetSequencerChAdd>
 80021b8:	e0c9      	b.n	800234e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	211f      	movs	r1, #31
 80021c4:	400b      	ands	r3, r1
 80021c6:	210f      	movs	r1, #15
 80021c8:	4099      	lsls	r1, r3
 80021ca:	000b      	movs	r3, r1
 80021cc:	43db      	mvns	r3, r3
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	035b      	lsls	r3, r3, #13
 80021d8:	0b5b      	lsrs	r3, r3, #13
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x9c>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	221f      	movs	r2, #31
 80021e4:	4013      	ands	r3, r2
 80021e6:	e098      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d000      	beq.n	80021f4 <HAL_ADC_ConfigChannel+0xa8>
 80021f2:	e091      	b.n	8002318 <HAL_ADC_ConfigChannel+0x1cc>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d000      	beq.n	8002200 <HAL_ADC_ConfigChannel+0xb4>
 80021fe:	e089      	b.n	8002314 <HAL_ADC_ConfigChannel+0x1c8>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d000      	beq.n	800220c <HAL_ADC_ConfigChannel+0xc0>
 800220a:	e081      	b.n	8002310 <HAL_ADC_ConfigChannel+0x1c4>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2208      	movs	r2, #8
 8002212:	4013      	ands	r3, r2
 8002214:	d000      	beq.n	8002218 <HAL_ADC_ConfigChannel+0xcc>
 8002216:	e079      	b.n	800230c <HAL_ADC_ConfigChannel+0x1c0>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2210      	movs	r2, #16
 800221e:	4013      	ands	r3, r2
 8002220:	d000      	beq.n	8002224 <HAL_ADC_ConfigChannel+0xd8>
 8002222:	e071      	b.n	8002308 <HAL_ADC_ConfigChannel+0x1bc>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2220      	movs	r2, #32
 800222a:	4013      	ands	r3, r2
 800222c:	d000      	beq.n	8002230 <HAL_ADC_ConfigChannel+0xe4>
 800222e:	e069      	b.n	8002304 <HAL_ADC_ConfigChannel+0x1b8>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	4013      	ands	r3, r2
 8002238:	d000      	beq.n	800223c <HAL_ADC_ConfigChannel+0xf0>
 800223a:	e061      	b.n	8002300 <HAL_ADC_ConfigChannel+0x1b4>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	4013      	ands	r3, r2
 8002244:	d000      	beq.n	8002248 <HAL_ADC_ConfigChannel+0xfc>
 8002246:	e059      	b.n	80022fc <HAL_ADC_ConfigChannel+0x1b0>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4013      	ands	r3, r2
 8002252:	d151      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x1ac>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4013      	ands	r3, r2
 800225e:	d149      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1a8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4013      	ands	r3, r2
 800226a:	d141      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x1a4>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d139      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1a0>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	4013      	ands	r3, r2
 8002282:	d131      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x19c>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	019b      	lsls	r3, r3, #6
 800228c:	4013      	ands	r3, r2
 800228e:	d129      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x198>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	01db      	lsls	r3, r3, #7
 8002298:	4013      	ands	r3, r2
 800229a:	d121      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x194>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4013      	ands	r3, r2
 80022a6:	d119      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x190>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	4013      	ands	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x18c>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	4013      	ands	r3, r2
 80022be:	d109      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x188>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	02db      	lsls	r3, r3, #11
 80022c8:	4013      	ands	r3, r2
 80022ca:	d001      	beq.n	80022d0 <HAL_ADC_ConfigChannel+0x184>
 80022cc:	2312      	movs	r3, #18
 80022ce:	e024      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022d0:	2300      	movs	r3, #0
 80022d2:	e022      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022d4:	2311      	movs	r3, #17
 80022d6:	e020      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022d8:	2310      	movs	r3, #16
 80022da:	e01e      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022dc:	230f      	movs	r3, #15
 80022de:	e01c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022e0:	230e      	movs	r3, #14
 80022e2:	e01a      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022e4:	230d      	movs	r3, #13
 80022e6:	e018      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022e8:	230c      	movs	r3, #12
 80022ea:	e016      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022ec:	230b      	movs	r3, #11
 80022ee:	e014      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022f0:	230a      	movs	r3, #10
 80022f2:	e012      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022f4:	2309      	movs	r3, #9
 80022f6:	e010      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022f8:	2308      	movs	r3, #8
 80022fa:	e00e      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 80022fc:	2307      	movs	r3, #7
 80022fe:	e00c      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002300:	2306      	movs	r3, #6
 8002302:	e00a      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002304:	2305      	movs	r3, #5
 8002306:	e008      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002308:	2304      	movs	r3, #4
 800230a:	e006      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 800230c:	2303      	movs	r3, #3
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002310:	2302      	movs	r3, #2
 8002312:	e002      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_ADC_ConfigChannel+0x1ce>
 8002318:	2300      	movs	r3, #0
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	6852      	ldr	r2, [r2, #4]
 800231e:	201f      	movs	r0, #31
 8002320:	4002      	ands	r2, r0
 8002322:	4093      	lsls	r3, r2
 8002324:	000a      	movs	r2, r1
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	d808      	bhi.n	800234e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	001a      	movs	r2, r3
 800234a:	f7ff fb29 	bl	80019a0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	001a      	movs	r2, r3
 800235c:	f7ff fb64 	bl	8001a28 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db00      	blt.n	800236a <HAL_ADC_ConfigChannel+0x21e>
 8002368:	e0bc      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 800236c:	0018      	movs	r0, r3
 800236e:	f7ff fac5 	bl	80018fc <LL_ADC_GetCommonPathInternalCh>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_ADC_ConfigChannel+0x364>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d122      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002388:	d11d      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2280      	movs	r2, #128	; 0x80
 800238e:	0412      	lsls	r2, r2, #16
 8002390:	4313      	orrs	r3, r2
 8002392:	4a46      	ldr	r2, [pc, #280]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 8002394:	0019      	movs	r1, r3
 8002396:	0010      	movs	r0, r2
 8002398:	f7ff fa9c 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b45      	ldr	r3, [pc, #276]	; (80024b4 <HAL_ADC_ConfigChannel+0x368>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4945      	ldr	r1, [pc, #276]	; (80024b8 <HAL_ADC_ConfigChannel+0x36c>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7fd feb6 	bl	8000114 <__udivsi3>
 80023a8:	0003      	movs	r3, r0
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	0013      	movs	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	189b      	adds	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b6:	e002      	b.n	80023be <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023c4:	e08e      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <HAL_ADC_ConfigChannel+0x370>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d10e      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	045b      	lsls	r3, r3, #17
 80023d6:	4013      	ands	r3, r2
 80023d8:	d109      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0452      	lsls	r2, r2, #17
 80023e0:	4313      	orrs	r3, r2
 80023e2:	4a32      	ldr	r2, [pc, #200]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 80023e4:	0019      	movs	r1, r3
 80023e6:	0010      	movs	r0, r2
 80023e8:	f7ff fa74 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
 80023ec:	e07a      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_ADC_ConfigChannel+0x374>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d000      	beq.n	80023fa <HAL_ADC_ConfigChannel+0x2ae>
 80023f8:	e074      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	03db      	lsls	r3, r3, #15
 8002400:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002402:	d000      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x2ba>
 8002404:	e06e      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	03d2      	lsls	r2, r2, #15
 800240c:	4313      	orrs	r3, r2
 800240e:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 8002410:	0019      	movs	r1, r3
 8002412:	0010      	movs	r0, r2
 8002414:	f7ff fa5e 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
 8002418:	e064      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	429a      	cmp	r2, r3
 8002424:	d004      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_ADC_ConfigChannel+0x35c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d107      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0019      	movs	r1, r3
 800243a:	0010      	movs	r0, r2
 800243c:	f7ff fae1 	bl	8001a02 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da4d      	bge.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff fa56 	bl	80018fc <LL_ADC_GetCommonPathInternalCh>
 8002450:	0003      	movs	r3, r0
 8002452:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <HAL_ADC_ConfigChannel+0x364>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d108      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_ADC_ConfigChannel+0x378>)
 8002462:	4013      	ands	r3, r2
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 8002466:	0019      	movs	r1, r3
 8002468:	0010      	movs	r0, r2
 800246a:	f7ff fa33 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
 800246e:	e039      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_ADC_ConfigChannel+0x370>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d108      	bne.n	800248c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_ADC_ConfigChannel+0x37c>)
 800247e:	4013      	ands	r3, r2
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 8002482:	0019      	movs	r1, r3
 8002484:	0010      	movs	r0, r2
 8002486:	f7ff fa25 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
 800248a:	e02b      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_ADC_ConfigChannel+0x374>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d126      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_ADC_ConfigChannel+0x380>)
 800249a:	4013      	ands	r3, r2
 800249c:	4a03      	ldr	r2, [pc, #12]	; (80024ac <HAL_ADC_ConfigChannel+0x360>)
 800249e:	0019      	movs	r1, r3
 80024a0:	0010      	movs	r0, r2
 80024a2:	f7ff fa17 	bl	80018d4 <LL_ADC_SetCommonPathInternalCh>
 80024a6:	e01d      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x398>
 80024a8:	80000004 	.word	0x80000004
 80024ac:	40012708 	.word	0x40012708
 80024b0:	b0001000 	.word	0xb0001000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	00030d40 	.word	0x00030d40
 80024bc:	b8004000 	.word	0xb8004000
 80024c0:	b4002000 	.word	0xb4002000
 80024c4:	ff7fffff 	.word	0xff7fffff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	2220      	movs	r2, #32
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024dc:	2317      	movs	r3, #23
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2254      	movs	r2, #84	; 0x54
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80024ec:	2317      	movs	r3, #23
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b006      	add	sp, #24
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff fb3b 	bl	8001b84 <LL_ADC_REG_IsConversionOngoing>
 800250e:	1e03      	subs	r3, r0, #0
 8002510:	d031      	beq.n	8002576 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f7ff faff 	bl	8001b1a <LL_ADC_IsDisableOngoing>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d104      	bne.n	800252a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fb1b 	bl	8001b60 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800252a:	f7ff f9a5 	bl	8001878 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002532:	e01a      	b.n	800256a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002534:	f7ff f9a0 	bl	8001878 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d913      	bls.n	800256a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2204      	movs	r2, #4
 800254a:	4013      	ands	r3, r2
 800254c:	d00d      	beq.n	800256a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	2210      	movs	r2, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2201      	movs	r2, #1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e006      	b.n	8002578 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2204      	movs	r2, #4
 8002572:	4013      	ands	r3, r2
 8002574:	d1de      	bne.n	8002534 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b004      	add	sp, #16
 800257e:	bd80      	pop	{r7, pc}

08002580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0018      	movs	r0, r3
 8002592:	f7ff fab1 	bl	8001af8 <LL_ADC_IsEnabled>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d000      	beq.n	800259c <ADC_Enable+0x1c>
 800259a:	e069      	b.n	8002670 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a36      	ldr	r2, [pc, #216]	; (800267c <ADC_Enable+0xfc>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ac:	2210      	movs	r2, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2201      	movs	r2, #1
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e056      	b.n	8002672 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff fa71 	bl	8001ab0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <ADC_Enable+0x100>)
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff f993 	bl	80018fc <LL_ADC_GetCommonPathInternalCh>
 80025d6:	0002      	movs	r2, r0
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	4013      	ands	r3, r2
 80025de:	d00f      	beq.n	8002600 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <ADC_Enable+0x104>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4928      	ldr	r1, [pc, #160]	; (8002688 <ADC_Enable+0x108>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7fd fd94 	bl	8000114 <__udivsi3>
 80025ec:	0003      	movs	r3, r0
 80025ee:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80025f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025f2:	e002      	b.n	80025fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7e5b      	ldrb	r3, [r3, #25]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d033      	beq.n	8002670 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002608:	f7ff f936 	bl	8001878 <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002610:	e027      	b.n	8002662 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f7ff fa6e 	bl	8001af8 <LL_ADC_IsEnabled>
 800261c:	1e03      	subs	r3, r0, #0
 800261e:	d104      	bne.n	800262a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff fa43 	bl	8001ab0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262a:	f7ff f925 	bl	8001878 <HAL_GetTick>
 800262e:	0002      	movs	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d914      	bls.n	8002662 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	4013      	ands	r3, r2
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00d      	beq.n	8002662 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	2210      	movs	r2, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2201      	movs	r2, #1
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e007      	b.n	8002672 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	2b01      	cmp	r3, #1
 800266e:	d1d0      	bne.n	8002612 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	80000017 	.word	0x80000017
 8002680:	40012708 	.word	0x40012708
 8002684:	20000000 	.word	0x20000000
 8002688:	00030d40 	.word	0x00030d40

0800268c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff fa3e 	bl	8001b1a <LL_ADC_IsDisableOngoing>
 800269e:	0003      	movs	r3, r0
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7ff fa26 	bl	8001af8 <LL_ADC_IsEnabled>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d046      	beq.n	800273e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d143      	bne.n	800273e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2205      	movs	r2, #5
 80026be:	4013      	ands	r3, r2
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10d      	bne.n	80026e0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff fa03 	bl	8001ad4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2203      	movs	r2, #3
 80026d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d6:	f7ff f8cf 	bl	8001878 <HAL_GetTick>
 80026da:	0003      	movs	r3, r0
 80026dc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026de:	e028      	b.n	8002732 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	2210      	movs	r2, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2201      	movs	r2, #1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e021      	b.n	8002740 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026fc:	f7ff f8bc 	bl	8001878 <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d913      	bls.n	8002732 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2201      	movs	r2, #1
 8002712:	4013      	ands	r3, r2
 8002714:	d00d      	beq.n	8002732 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	2210      	movs	r2, #16
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2201      	movs	r2, #1
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e006      	b.n	8002740 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2201      	movs	r2, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d1de      	bne.n	80026fc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}

08002748 <LL_ADC_SetCalibrationFactor>:
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	22b4      	movs	r2, #180	; 0xb4
 8002756:	589b      	ldr	r3, [r3, r2]
 8002758:	227f      	movs	r2, #127	; 0x7f
 800275a:	4393      	bics	r3, r2
 800275c:	001a      	movs	r2, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	21b4      	movs	r1, #180	; 0xb4
 8002766:	505a      	str	r2, [r3, r1]
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <LL_ADC_GetCalibrationFactor>:
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	22b4      	movs	r2, #180	; 0xb4
 800277c:	589b      	ldr	r3, [r3, r2]
 800277e:	227f      	movs	r2, #127	; 0x7f
 8002780:	4013      	ands	r3, r2
}
 8002782:	0018      	movs	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	b002      	add	sp, #8
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <LL_ADC_Enable>:
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <LL_ADC_Enable+0x20>)
 800279a:	4013      	ands	r3, r2
 800279c:	2201      	movs	r2, #1
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	7fffffe8 	.word	0x7fffffe8

080027b0 <LL_ADC_Disable>:
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <LL_ADC_Disable+0x20>)
 80027be:	4013      	ands	r3, r2
 80027c0:	2202      	movs	r2, #2
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	7fffffe8 	.word	0x7fffffe8

080027d4 <LL_ADC_IsEnabled>:
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <LL_ADC_IsEnabled+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_ADC_IsEnabled+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <LL_ADC_StartCalibration>:
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <LL_ADC_StartCalibration+0x24>)
 8002806:	4013      	ands	r3, r2
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0612      	lsls	r2, r2, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	609a      	str	r2, [r3, #8]
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	7fffffe8 	.word	0x7fffffe8

08002820 <LL_ADC_IsCalibrationOnGoing>:
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	0fdb      	lsrs	r3, r3, #31
 800282e:	07da      	lsls	r2, r3, #31
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	429a      	cmp	r2, r3
 8002836:	d101      	bne.n	800283c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b089      	sub	sp, #36	; 0x24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2254      	movs	r2, #84	; 0x54
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADCEx_Calibration_Start+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0ba      	b.n	80029dc <HAL_ADCEx_Calibration_Start+0x194>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2254      	movs	r2, #84	; 0x54
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800286e:	2317      	movs	r3, #23
 8002870:	18fc      	adds	r4, r7, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff ff09 	bl	800268c <ADC_Disable>
 800287a:	0003      	movs	r3, r0
 800287c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0018      	movs	r0, r3
 8002884:	f7ff ffa6 	bl	80027d4 <LL_ADC_IsEnabled>
 8002888:	1e03      	subs	r3, r0, #0
 800288a:	d000      	beq.n	800288e <HAL_ADCEx_Calibration_Start+0x46>
 800288c:	e099      	b.n	80029c2 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	4a54      	ldr	r2, [pc, #336]	; (80029e4 <HAL_ADCEx_Calibration_Start+0x19c>)
 8002894:	4013      	ands	r3, r2
 8002896:	2202      	movs	r2, #2
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a50      	ldr	r2, [pc, #320]	; (80029e8 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_ADCEx_Calibration_Start+0x1a4>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e02d      	b.n	800291c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff97 	bl	80027f8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028ca:	e014      	b.n	80028f6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d90d      	bls.n	80028f6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	2212      	movs	r2, #18
 80028e0:	4393      	bics	r3, r2
 80028e2:	2210      	movs	r2, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2254      	movs	r2, #84	; 0x54
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e072      	b.n	80029dc <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7ff ff90 	bl	8002820 <LL_ADC_IsCalibrationOnGoing>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d1e3      	bne.n	80028cc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0018      	movs	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <LL_ADC_GetCalibrationFactor>
 800290e:	0002      	movs	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	189b      	adds	r3, r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b07      	cmp	r3, #7
 8002920:	d9ce      	bls.n	80028c0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002922:	69f9      	ldr	r1, [r7, #28]
 8002924:	69b8      	ldr	r0, [r7, #24]
 8002926:	f7fd fbf5 	bl	8000114 <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff ff2a 	bl	800278c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	0011      	movs	r1, r2
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff ff01 	bl	8002748 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	0018      	movs	r0, r3
 800294c:	f7ff ff30 	bl	80027b0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002950:	f7fe ff92 	bl	8001878 <HAL_GetTick>
 8002954:	0003      	movs	r3, r0
 8002956:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002958:	e01b      	b.n	8002992 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800295a:	f7fe ff8d 	bl	8001878 <HAL_GetTick>
 800295e:	0002      	movs	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d914      	bls.n	8002992 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff31 	bl	80027d4 <LL_ADC_IsEnabled>
 8002972:	1e03      	subs	r3, r0, #0
 8002974:	d00d      	beq.n	8002992 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	2210      	movs	r2, #16
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2201      	movs	r2, #1
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e024      	b.n	80029dc <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff ff1c 	bl	80027d4 <LL_ADC_IsEnabled>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d1dc      	bne.n	800295a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	2203      	movs	r2, #3
 80029b6:	4393      	bics	r3, r2
 80029b8:	2201      	movs	r2, #1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
 80029c0:	e005      	b.n	80029ce <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	2210      	movs	r2, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2254      	movs	r2, #84	; 0x54
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80029d6:	2317      	movs	r3, #23
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b009      	add	sp, #36	; 0x24
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	fffffefd 	.word	0xfffffefd
 80029e8:	00008003 	.word	0x00008003
 80029ec:	ffff7ffc 	.word	0xffff7ffc
 80029f0:	0002f1ff 	.word	0x0002f1ff

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	0002      	movs	r2, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	1dfb      	adds	r3, r7, #7
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b7f      	cmp	r3, #127	; 0x7f
 8002a08:	d828      	bhi.n	8002a5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <__NVIC_SetPriority+0xd4>)
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	33c0      	adds	r3, #192	; 0xc0
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	589b      	ldr	r3, [r3, r2]
 8002a1a:	1dfa      	adds	r2, r7, #7
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	0011      	movs	r1, r2
 8002a20:	2203      	movs	r2, #3
 8002a22:	400a      	ands	r2, r1
 8002a24:	00d2      	lsls	r2, r2, #3
 8002a26:	21ff      	movs	r1, #255	; 0xff
 8002a28:	4091      	lsls	r1, r2
 8002a2a:	000a      	movs	r2, r1
 8002a2c:	43d2      	mvns	r2, r2
 8002a2e:	401a      	ands	r2, r3
 8002a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	019b      	lsls	r3, r3, #6
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	401a      	ands	r2, r3
 8002a3a:	1dfb      	adds	r3, r7, #7
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	2303      	movs	r3, #3
 8002a42:	4003      	ands	r3, r0
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a48:	481f      	ldr	r0, [pc, #124]	; (8002ac8 <__NVIC_SetPriority+0xd4>)
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	430a      	orrs	r2, r1
 8002a54:	33c0      	adds	r3, #192	; 0xc0
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a5a:	e031      	b.n	8002ac0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <__NVIC_SetPriority+0xd8>)
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	0019      	movs	r1, r3
 8002a64:	230f      	movs	r3, #15
 8002a66:	400b      	ands	r3, r1
 8002a68:	3b08      	subs	r3, #8
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3306      	adds	r3, #6
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	3304      	adds	r3, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1dfa      	adds	r2, r7, #7
 8002a78:	7812      	ldrb	r2, [r2, #0]
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	400a      	ands	r2, r1
 8002a80:	00d2      	lsls	r2, r2, #3
 8002a82:	21ff      	movs	r1, #255	; 0xff
 8002a84:	4091      	lsls	r1, r2
 8002a86:	000a      	movs	r2, r1
 8002a88:	43d2      	mvns	r2, r2
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	401a      	ands	r2, r3
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	4003      	ands	r3, r0
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa4:	4809      	ldr	r0, [pc, #36]	; (8002acc <__NVIC_SetPriority+0xd8>)
 8002aa6:	1dfb      	adds	r3, r7, #7
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	001c      	movs	r4, r3
 8002aac:	230f      	movs	r3, #15
 8002aae:	4023      	ands	r3, r4
 8002ab0:	3b08      	subs	r3, #8
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	3306      	adds	r3, #6
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	18c3      	adds	r3, r0, r3
 8002abc:	3304      	adds	r3, #4
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b003      	add	sp, #12
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	1e5a      	subs	r2, r3, #1
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	045b      	lsls	r3, r3, #17
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d301      	bcc.n	8002ae8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e010      	b.n	8002b0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <SysTick_Config+0x44>)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	3a01      	subs	r2, #1
 8002aee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af0:	2301      	movs	r3, #1
 8002af2:	425b      	negs	r3, r3
 8002af4:	2103      	movs	r1, #3
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7ff ff7c 	bl	80029f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x44>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x44>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	210f      	movs	r1, #15
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	1c02      	adds	r2, r0, #0
 8002b28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	0011      	movs	r1, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ff5d 	bl	80029f4 <__NVIC_SetPriority>
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ffbf 	bl	8002ad0 <SysTick_Config>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e147      	b.n	8002dfc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4091      	lsls	r1, r2
 8002b76:	000a      	movs	r2, r1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d100      	bne.n	8002b84 <HAL_GPIO_Init+0x28>
 8002b82:	e138      	b.n	8002df6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d005      	beq.n	8002b9c <HAL_GPIO_Init+0x40>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d130      	bne.n	8002bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	0013      	movs	r3, r2
 8002bac:	43da      	mvns	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	2201      	movs	r2, #1
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2203      	movs	r2, #3
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d017      	beq.n	8002c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	409a      	lsls	r2, r3
 8002c18:	0013      	movs	r3, r2
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d123      	bne.n	8002c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	58d3      	ldr	r3, [r2, r3]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2207      	movs	r2, #7
 8002c58:	4013      	ands	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	0013      	movs	r3, r2
 8002c62:	43da      	mvns	r2, r3
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2107      	movs	r1, #7
 8002c72:	400b      	ands	r3, r1
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	409a      	lsls	r2, r3
 8002c78:	0013      	movs	r3, r2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	0013      	movs	r3, r2
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2203      	movs	r2, #3
 8002cac:	401a      	ands	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	23c0      	movs	r3, #192	; 0xc0
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d100      	bne.n	8002cd0 <HAL_GPIO_Init+0x174>
 8002cce:	e092      	b.n	8002df6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002cd0:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3318      	adds	r3, #24
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	589b      	ldr	r3, [r3, r2]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	0013      	movs	r3, r2
 8002cec:	43da      	mvns	r2, r3
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	23a0      	movs	r3, #160	; 0xa0
 8002cf8:	05db      	lsls	r3, r3, #23
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x1ca>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a45      	ldr	r2, [pc, #276]	; (8002e18 <HAL_GPIO_Init+0x2bc>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x1c6>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <HAL_GPIO_Init+0x2c0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x1c2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a43      	ldr	r2, [pc, #268]	; (8002e20 <HAL_GPIO_Init+0x2c4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x1be>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x1cc>
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x1cc>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x1cc>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x1cc>
 8002d26:	2300      	movs	r3, #0
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	00d2      	lsls	r2, r2, #3
 8002d30:	4093      	lsls	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d38:	4936      	ldr	r1, [pc, #216]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3318      	adds	r3, #24
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d46:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	035b      	lsls	r3, r3, #13
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	039b      	lsls	r3, r3, #14
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002d9c:	2384      	movs	r3, #132	; 0x84
 8002d9e:	58d3      	ldr	r3, [r2, r3]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc0:	4914      	ldr	r1, [pc, #80]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002dc2:	2284      	movs	r2, #132	; 0x84
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002dc8:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	58d3      	ldr	r3, [r2, r3]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	025b      	lsls	r3, r3, #9
 8002de2:	4013      	ands	r3, r2
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dee:	4909      	ldr	r1, [pc, #36]	; (8002e14 <HAL_GPIO_Init+0x2b8>)
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	40da      	lsrs	r2, r3
 8002e04:	1e13      	subs	r3, r2, #0
 8002e06:	d000      	beq.n	8002e0a <HAL_GPIO_Init+0x2ae>
 8002e08:	e6b0      	b.n	8002b6c <HAL_GPIO_Init+0x10>
  }
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b006      	add	sp, #24
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021800 	.word	0x40021800
 8002e18:	50000400 	.word	0x50000400
 8002e1c:	50000800 	.word	0x50000800
 8002e20:	50000c00 	.word	0x50000c00

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	0008      	movs	r0, r1
 8002e2e:	0011      	movs	r1, r2
 8002e30:	1cbb      	adds	r3, r7, #2
 8002e32:	1c02      	adds	r2, r0, #0
 8002e34:	801a      	strh	r2, [r3, #0]
 8002e36:	1c7b      	adds	r3, r7, #1
 8002e38:	1c0a      	adds	r2, r1, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3c:	1c7b      	adds	r3, r7, #1
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e4e:	1cbb      	adds	r3, r7, #2
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	000a      	movs	r2, r1
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e72:	1cbb      	adds	r3, r7, #2
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	041a      	lsls	r2, r3, #16
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	1cb9      	adds	r1, r7, #2
 8002e82:	8809      	ldrh	r1, [r1, #0]
 8002e84:	400b      	ands	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b004      	add	sp, #16
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d11f      	bne.n	8002ef8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	0013      	movs	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	189b      	adds	r3, r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4912      	ldr	r1, [pc, #72]	; (8002f10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7fd f924 	bl	8000114 <__udivsi3>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed2:	e008      	b.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e001      	b.n	8002ee6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e009      	b.n	8002efa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d0ed      	beq.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	40007000 	.word	0x40007000
 8002f08:	fffff9ff 	.word	0xfffff9ff
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	000f4240 	.word	0x000f4240

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e2f3      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <HAL_RCC_OscConfig+0x1e>
 8002f30:	e07c      	b.n	800302c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f32:	4bc3      	ldr	r3, [pc, #780]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2238      	movs	r2, #56	; 0x38
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3c:	4bc0      	ldr	r3, [pc, #768]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2203      	movs	r2, #3
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3e>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d002      	beq.n	8002f58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d10b      	bne.n	8002f70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	4bb9      	ldr	r3, [pc, #740]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	029b      	lsls	r3, r3, #10
 8002f60:	4013      	ands	r3, r2
 8002f62:	d062      	beq.n	800302a <HAL_RCC_OscConfig+0x116>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d15e      	bne.n	800302a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e2ce      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	025b      	lsls	r3, r3, #9
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x78>
 8002f7c:	4bb0      	ldr	r3, [pc, #704]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4baf      	ldr	r3, [pc, #700]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0249      	lsls	r1, r1, #9
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e020      	b.n	8002fce <HAL_RCC_OscConfig+0xba>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	02db      	lsls	r3, r3, #11
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d10e      	bne.n	8002fb6 <HAL_RCC_OscConfig+0xa2>
 8002f98:	4ba9      	ldr	r3, [pc, #676]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4ba8      	ldr	r3, [pc, #672]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	02c9      	lsls	r1, r1, #11
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	4ba6      	ldr	r3, [pc, #664]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4ba5      	ldr	r3, [pc, #660]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0249      	lsls	r1, r1, #9
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e00b      	b.n	8002fce <HAL_RCC_OscConfig+0xba>
 8002fb6:	4ba2      	ldr	r3, [pc, #648]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4ba1      	ldr	r3, [pc, #644]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fbc:	49a1      	ldr	r1, [pc, #644]	; (8003244 <HAL_RCC_OscConfig+0x330>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4b9f      	ldr	r3, [pc, #636]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b9e      	ldr	r3, [pc, #632]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002fc8:	499f      	ldr	r1, [pc, #636]	; (8003248 <HAL_RCC_OscConfig+0x334>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d014      	beq.n	8003000 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fc4f 	bl	8001878 <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fc4a 	bl	8001878 <HAL_GetTick>
 8002fe4:	0002      	movs	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e28d      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	4b93      	ldr	r3, [pc, #588]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	029b      	lsls	r3, r3, #10
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xcc>
 8002ffe:	e015      	b.n	800302c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fc3a 	bl	8001878 <HAL_GetTick>
 8003004:	0003      	movs	r3, r0
 8003006:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300a:	f7fe fc35 	bl	8001878 <HAL_GetTick>
 800300e:	0002      	movs	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b64      	cmp	r3, #100	; 0x64
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e278      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301c:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	4013      	ands	r3, r2
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0xf6>
 8003028:	e000      	b.n	800302c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d100      	bne.n	8003038 <HAL_RCC_OscConfig+0x124>
 8003036:	e099      	b.n	800316c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003038:	4b81      	ldr	r3, [pc, #516]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2238      	movs	r2, #56	; 0x38
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003042:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2203      	movs	r2, #3
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d102      	bne.n	8003058 <HAL_RCC_OscConfig+0x144>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d002      	beq.n	800305e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d135      	bne.n	80030ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305e:	4b78      	ldr	r3, [pc, #480]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4013      	ands	r3, r2
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x162>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e24b      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a74      	ldr	r2, [pc, #464]	; (800324c <HAL_RCC_OscConfig+0x338>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	4b6e      	ldr	r3, [pc, #440]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d112      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003092:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003098:	4013      	ands	r3, r2
 800309a:	0019      	movs	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030a6:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0adb      	lsrs	r3, r3, #11
 80030ac:	2207      	movs	r2, #7
 80030ae:	4013      	ands	r3, r2
 80030b0:	4a68      	ldr	r2, [pc, #416]	; (8003254 <HAL_RCC_OscConfig+0x340>)
 80030b2:	40da      	lsrs	r2, r3
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_OscConfig+0x344>)
 80030b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x348>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	f7fe fb7f 	bl	80017c0 <HAL_InitTick>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d051      	beq.n	800316a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e221      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d030      	beq.n	8003134 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030d2:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a5e      	ldr	r2, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80030d8:	4013      	ands	r3, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030e6:	4b56      	ldr	r3, [pc, #344]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b55      	ldr	r3, [pc, #340]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0049      	lsls	r1, r1, #1
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe fbc0 	bl	8001878 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fbbb 	bl	8001878 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1fe      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003110:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4013      	ands	r3, r2
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311c:	4b48      	ldr	r3, [pc, #288]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4a4a      	ldr	r2, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x338>)
 8003122:	4013      	ands	r3, r2
 8003124:	0019      	movs	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	4b44      	ldr	r3, [pc, #272]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003134:	4b42      	ldr	r3, [pc, #264]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800313a:	4949      	ldr	r1, [pc, #292]	; (8003260 <HAL_RCC_OscConfig+0x34c>)
 800313c:	400a      	ands	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fb9a 	bl	8001878 <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fb95 	bl	8001878 <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e1d8      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4013      	ands	r3, r2
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x236>
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	4013      	ands	r3, r2
 8003174:	d047      	beq.n	8003206 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2238      	movs	r2, #56	; 0x38
 800317c:	4013      	ands	r3, r2
 800317e:	2b18      	cmp	r3, #24
 8003180:	d10a      	bne.n	8003198 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003182:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	2202      	movs	r2, #2
 8003188:	4013      	ands	r3, r2
 800318a:	d03c      	beq.n	8003206 <HAL_RCC_OscConfig+0x2f2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d138      	bne.n	8003206 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e1ba      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d019      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031a0:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031a4:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	430a      	orrs	r2, r1
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb64 	bl	8001878 <HAL_GetTick>
 80031b0:	0003      	movs	r3, r0
 80031b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fe fb5f 	bl	8001878 <HAL_GetTick>
 80031ba:	0002      	movs	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1a2      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	2202      	movs	r2, #2
 80031ce:	4013      	ands	r3, r2
 80031d0:	d0f1      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2a2>
 80031d2:	e018      	b.n	8003206 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031da:	2101      	movs	r1, #1
 80031dc:	438a      	bics	r2, r1
 80031de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fb4a 	bl	8001878 <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ea:	f7fe fb45 	bl	8001878 <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e188      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	2202      	movs	r2, #2
 8003202:	4013      	ands	r3, r2
 8003204:	d1f1      	bne.n	80031ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2204      	movs	r2, #4
 800320c:	4013      	ands	r3, r2
 800320e:	d100      	bne.n	8003212 <HAL_RCC_OscConfig+0x2fe>
 8003210:	e0c6      	b.n	80033a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	231f      	movs	r3, #31
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2238      	movs	r2, #56	; 0x38
 8003220:	4013      	ands	r3, r2
 8003222:	2b20      	cmp	r3, #32
 8003224:	d11e      	bne.n	8003264 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_OscConfig+0x32c>)
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d100      	bne.n	8003232 <HAL_RCC_OscConfig+0x31e>
 8003230:	e0b6      	b.n	80033a0 <HAL_RCC_OscConfig+0x48c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d000      	beq.n	800323c <HAL_RCC_OscConfig+0x328>
 800323a:	e0b1      	b.n	80033a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e166      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
 8003240:	40021000 	.word	0x40021000
 8003244:	fffeffff 	.word	0xfffeffff
 8003248:	fffbffff 	.word	0xfffbffff
 800324c:	ffff80ff 	.word	0xffff80ff
 8003250:	ffffc7ff 	.word	0xffffc7ff
 8003254:	00f42400 	.word	0x00f42400
 8003258:	20000000 	.word	0x20000000
 800325c:	20000004 	.word	0x20000004
 8003260:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003264:	4bac      	ldr	r3, [pc, #688]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	055b      	lsls	r3, r3, #21
 800326c:	4013      	ands	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_RCC_OscConfig+0x360>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x362>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d011      	beq.n	800329e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4ba7      	ldr	r3, [pc, #668]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800327c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800327e:	4ba6      	ldr	r3, [pc, #664]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	0549      	lsls	r1, r1, #21
 8003284:	430a      	orrs	r2, r1
 8003286:	63da      	str	r2, [r3, #60]	; 0x3c
 8003288:	4ba3      	ldr	r3, [pc, #652]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800328a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	055b      	lsls	r3, r3, #21
 8003290:	4013      	ands	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003296:	231f      	movs	r3, #31
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329e:	4b9f      	ldr	r3, [pc, #636]	; (800351c <HAL_RCC_OscConfig+0x608>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d11a      	bne.n	80032e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032aa:	4b9c      	ldr	r3, [pc, #624]	; (800351c <HAL_RCC_OscConfig+0x608>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b9b      	ldr	r3, [pc, #620]	; (800351c <HAL_RCC_OscConfig+0x608>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	0049      	lsls	r1, r1, #1
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fade 	bl	8001878 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fad9 	bl	8001878 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e11c      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	4b91      	ldr	r3, [pc, #580]	; (800351c <HAL_RCC_OscConfig+0x608>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4013      	ands	r3, r2
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3e2>
 80032e8:	4b8b      	ldr	r3, [pc, #556]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80032ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ec:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	430a      	orrs	r2, r1
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x41c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x404>
 80032fe:	4b86      	ldr	r3, [pc, #536]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003302:	4b85      	ldr	r3, [pc, #532]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003304:	2104      	movs	r1, #4
 8003306:	430a      	orrs	r2, r1
 8003308:	65da      	str	r2, [r3, #92]	; 0x5c
 800330a:	4b83      	ldr	r3, [pc, #524]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800330c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800330e:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003310:	2101      	movs	r1, #1
 8003312:	430a      	orrs	r2, r1
 8003314:	65da      	str	r2, [r3, #92]	; 0x5c
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x41c>
 8003318:	4b7f      	ldr	r3, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800331a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800331e:	2101      	movs	r1, #1
 8003320:	438a      	bics	r2, r1
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
 8003324:	4b7c      	ldr	r3, [pc, #496]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800332a:	2104      	movs	r1, #4
 800332c:	438a      	bics	r2, r1
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d014      	beq.n	8003362 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fa9e 	bl	8001878 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003340:	e009      	b.n	8003356 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fa99 	bl	8001878 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	4a74      	ldr	r2, [pc, #464]	; (8003520 <HAL_RCC_OscConfig+0x60c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0db      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x42e>
 8003360:	e013      	b.n	800338a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe fa89 	bl	8001878 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336a:	e009      	b.n	8003380 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fa84 	bl	8001878 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_RCC_OscConfig+0x60c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0c6      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	2202      	movs	r2, #2
 8003386:	4013      	ands	r3, r2
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800338a:	231f      	movs	r3, #31
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b60      	ldr	r3, [pc, #384]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800339a:	4962      	ldr	r1, [pc, #392]	; (8003524 <HAL_RCC_OscConfig+0x610>)
 800339c:	400a      	ands	r2, r1
 800339e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d100      	bne.n	80033aa <HAL_RCC_OscConfig+0x496>
 80033a8:	e0b0      	b.n	800350c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2238      	movs	r2, #56	; 0x38
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d100      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4a4>
 80033b6:	e078      	b.n	80034aa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d153      	bne.n	8003468 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b54      	ldr	r3, [pc, #336]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80033c6:	4958      	ldr	r1, [pc, #352]	; (8003528 <HAL_RCC_OscConfig+0x614>)
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fa54 	bl	8001878 <HAL_GetTick>
 80033d0:	0003      	movs	r3, r0
 80033d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe fa4f 	bl	8001878 <HAL_GetTick>
 80033da:	0002      	movs	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e092      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	049b      	lsls	r3, r3, #18
 80033f0:	4013      	ands	r3, r2
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f4:	4b48      	ldr	r3, [pc, #288]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a4c      	ldr	r2, [pc, #304]	; (800352c <HAL_RCC_OscConfig+0x618>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	0019      	movs	r1, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1a      	ldr	r2, [r3, #32]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	431a      	orrs	r2, r3
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800341e:	430a      	orrs	r2, r1
 8003420:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	0449      	lsls	r1, r1, #17
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003430:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	4b38      	ldr	r3, [pc, #224]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	0549      	lsls	r1, r1, #21
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fa1b 	bl	8001878 <HAL_GetTick>
 8003442:	0003      	movs	r3, r0
 8003444:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fa16 	bl	8001878 <HAL_GetTick>
 800344c:	0002      	movs	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e059      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	049b      	lsls	r3, r3, #18
 8003462:	4013      	ands	r3, r2
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x534>
 8003466:	e051      	b.n	800350c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800346e:	492e      	ldr	r1, [pc, #184]	; (8003528 <HAL_RCC_OscConfig+0x614>)
 8003470:	400a      	ands	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe fa00 	bl	8001878 <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe f9fb 	bl	8001878 <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03e      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	049b      	lsls	r3, r3, #18
 8003498:	4013      	ands	r3, r2
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800349c:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80034a2:	4923      	ldr	r1, [pc, #140]	; (8003530 <HAL_RCC_OscConfig+0x61c>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e030      	b.n	800350c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02b      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_RCC_OscConfig+0x604>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2203      	movs	r2, #3
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11e      	bne.n	8003508 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2270      	movs	r2, #112	; 0x70
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d117      	bne.n	8003508 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	23fe      	movs	r3, #254	; 0xfe
 80034dc:	01db      	lsls	r3, r3, #7
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d10e      	bne.n	8003508 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	23f8      	movs	r3, #248	; 0xf8
 80034ee:	039b      	lsls	r3, r3, #14
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0f5b      	lsrs	r3, r3, #29
 80034fe:	075a      	lsls	r2, r3, #29
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b008      	add	sp, #32
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
 8003520:	00001388 	.word	0x00001388
 8003524:	efffffff 	.word	0xefffffff
 8003528:	feffffff 	.word	0xfeffffff
 800352c:	1fc1808c 	.word	0x1fc1808c
 8003530:	effefffc 	.word	0xeffefffc

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0e9      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2207      	movs	r2, #7
 800354e:	4013      	ands	r3, r2
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d91e      	bls.n	8003594 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2207      	movs	r2, #7
 800355c:	4393      	bics	r3, r2
 800355e:	0019      	movs	r1, r3
 8003560:	4b70      	ldr	r3, [pc, #448]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003568:	f7fe f986 	bl	8001878 <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003570:	e009      	b.n	8003586 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003572:	f7fe f981 	bl	8001878 <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_RCC_ClockConfig+0x1f4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0ca      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2207      	movs	r2, #7
 800358c:	4013      	ands	r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d1ee      	bne.n	8003572 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2202      	movs	r2, #2
 800359a:	4013      	ands	r3, r2
 800359c:	d015      	beq.n	80035ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4013      	ands	r3, r2
 80035a6:	d006      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035a8:	4b60      	ldr	r3, [pc, #384]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b5f      	ldr	r3, [pc, #380]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035ae:	21e0      	movs	r1, #224	; 0xe0
 80035b0:	01c9      	lsls	r1, r1, #7
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b6:	4b5d      	ldr	r3, [pc, #372]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	4a5d      	ldr	r2, [pc, #372]	; (8003730 <HAL_RCC_ClockConfig+0x1fc>)
 80035bc:	4013      	ands	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d057      	beq.n	8003684 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035dc:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	4013      	ands	r3, r2
 80035e6:	d12b      	bne.n	8003640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e097      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2380      	movs	r3, #128	; 0x80
 80035fa:	049b      	lsls	r3, r3, #18
 80035fc:	4013      	ands	r3, r2
 80035fe:	d11f      	bne.n	8003640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e08b      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360c:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4013      	ands	r3, r2
 8003616:	d113      	bne.n	8003640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e07f      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d106      	bne.n	8003632 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 8003626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003628:	2202      	movs	r2, #2
 800362a:	4013      	ands	r3, r2
 800362c:	d108      	bne.n	8003640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e074      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e06d      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003640:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2207      	movs	r2, #7
 8003646:	4393      	bics	r3, r2
 8003648:	0019      	movs	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4b37      	ldr	r3, [pc, #220]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003654:	f7fe f910 	bl	8001878 <HAL_GetTick>
 8003658:	0003      	movs	r3, r0
 800365a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365c:	e009      	b.n	8003672 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365e:	f7fe f90b 	bl	8001878 <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	4a2f      	ldr	r2, [pc, #188]	; (8003728 <HAL_RCC_ClockConfig+0x1f4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e054      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2238      	movs	r2, #56	; 0x38
 8003678:	401a      	ands	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	429a      	cmp	r2, r3
 8003682:	d1ec      	bne.n	800365e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2207      	movs	r2, #7
 800368a:	4013      	ands	r3, r2
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d21e      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2207      	movs	r2, #7
 8003698:	4393      	bics	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036a4:	f7fe f8e8 	bl	8001878 <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ac:	e009      	b.n	80036c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe f8e3 	bl	8001878 <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_RCC_ClockConfig+0x1f4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e02c      	b.n	800371c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2207      	movs	r2, #7
 80036c8:	4013      	ands	r3, r2
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2204      	movs	r2, #4
 80036d6:	4013      	ands	r3, r2
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_RCC_ClockConfig+0x200>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	430a      	orrs	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80036ee:	f000 f829 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80036f2:	0001      	movs	r1, r0
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCC_ClockConfig+0x1f8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	220f      	movs	r2, #15
 80036fc:	401a      	ands	r2, r3
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <HAL_RCC_ClockConfig+0x204>)
 8003700:	0092      	lsls	r2, r2, #2
 8003702:	58d3      	ldr	r3, [r2, r3]
 8003704:	221f      	movs	r2, #31
 8003706:	4013      	ands	r3, r2
 8003708:	000a      	movs	r2, r1
 800370a:	40da      	lsrs	r2, r3
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x208>)
 800370e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x20c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0018      	movs	r0, r3
 8003716:	f7fe f853 	bl	80017c0 <HAL_InitTick>
 800371a:	0003      	movs	r3, r0
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40022000 	.word	0x40022000
 8003728:	00001388 	.word	0x00001388
 800372c:	40021000 	.word	0x40021000
 8003730:	fffff0ff 	.word	0xfffff0ff
 8003734:	ffff8fff 	.word	0xffff8fff
 8003738:	080047c4 	.word	0x080047c4
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374a:	4b3c      	ldr	r3, [pc, #240]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2238      	movs	r2, #56	; 0x38
 8003750:	4013      	ands	r3, r2
 8003752:	d10f      	bne.n	8003774 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0adb      	lsrs	r3, r3, #11
 800375a:	2207      	movs	r2, #7
 800375c:	4013      	ands	r3, r2
 800375e:	2201      	movs	r2, #1
 8003760:	409a      	lsls	r2, r3
 8003762:	0013      	movs	r3, r2
 8003764:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	4835      	ldr	r0, [pc, #212]	; (8003840 <HAL_RCC_GetSysClockFreq+0xfc>)
 800376a:	f7fc fcd3 	bl	8000114 <__udivsi3>
 800376e:	0003      	movs	r3, r0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e05d      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003774:	4b31      	ldr	r3, [pc, #196]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2238      	movs	r2, #56	; 0x38
 800377a:	4013      	ands	r3, r2
 800377c:	2b08      	cmp	r3, #8
 800377e:	d102      	bne.n	8003786 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_GetSysClockFreq+0x100>)
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e054      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2238      	movs	r2, #56	; 0x38
 800378c:	4013      	ands	r3, r2
 800378e:	2b10      	cmp	r3, #16
 8003790:	d138      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2203      	movs	r2, #3
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	2207      	movs	r2, #7
 80037a4:	4013      	ands	r3, r2
 80037a6:	3301      	adds	r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d10d      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4824      	ldr	r0, [pc, #144]	; (8003844 <HAL_RCC_GetSysClockFreq+0x100>)
 80037b4:	f7fc fcae 	bl	8000114 <__udivsi3>
 80037b8:	0003      	movs	r3, r0
 80037ba:	0019      	movs	r1, r3
 80037bc:	4b1f      	ldr	r3, [pc, #124]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	227f      	movs	r2, #127	; 0x7f
 80037c4:	4013      	ands	r3, r2
 80037c6:	434b      	muls	r3, r1
 80037c8:	617b      	str	r3, [r7, #20]
        break;
 80037ca:	e00d      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	481c      	ldr	r0, [pc, #112]	; (8003840 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037d0:	f7fc fca0 	bl	8000114 <__udivsi3>
 80037d4:	0003      	movs	r3, r0
 80037d6:	0019      	movs	r1, r3
 80037d8:	4b18      	ldr	r3, [pc, #96]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	227f      	movs	r2, #127	; 0x7f
 80037e0:	4013      	ands	r3, r2
 80037e2:	434b      	muls	r3, r1
 80037e4:	617b      	str	r3, [r7, #20]
        break;
 80037e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0f5b      	lsrs	r3, r3, #29
 80037ee:	2207      	movs	r2, #7
 80037f0:	4013      	ands	r3, r2
 80037f2:	3301      	adds	r3, #1
 80037f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7fc fc8b 	bl	8000114 <__udivsi3>
 80037fe:	0003      	movs	r3, r0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e015      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2238      	movs	r2, #56	; 0x38
 800380a:	4013      	ands	r3, r2
 800380c:	2b20      	cmp	r3, #32
 800380e:	d103      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e00b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RCC_GetSysClockFreq+0xf8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2238      	movs	r2, #56	; 0x38
 800381e:	4013      	ands	r3, r2
 8003820:	2b18      	cmp	r3, #24
 8003822:	d103      	bne.n	800382c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003824:	23fa      	movs	r3, #250	; 0xfa
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e001      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003830:	693b      	ldr	r3, [r7, #16]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b006      	add	sp, #24
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	40021000 	.word	0x40021000
 8003840:	00f42400 	.word	0x00f42400
 8003844:	007a1200 	.word	0x007a1200

08003848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e04a      	b.n	80038f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223d      	movs	r2, #61	; 0x3d
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d107      	bne.n	8003876 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223c      	movs	r2, #60	; 0x3c
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fee7 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	223d      	movs	r2, #61	; 0x3d
 800387a:	2102      	movs	r1, #2
 800387c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	0019      	movs	r1, r3
 8003888:	0010      	movs	r0, r2
 800388a:	f000 f90b 	bl	8003aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2248      	movs	r2, #72	; 0x48
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223e      	movs	r2, #62	; 0x3e
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	223f      	movs	r2, #63	; 0x3f
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2240      	movs	r2, #64	; 0x40
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2241      	movs	r2, #65	; 0x41
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2242      	movs	r2, #66	; 0x42
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2243      	movs	r2, #67	; 0x43
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2244      	movs	r2, #68	; 0x44
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2245      	movs	r2, #69	; 0x45
 80038d2:	2101      	movs	r1, #1
 80038d4:	5499      	strb	r1, [r3, r2]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2246      	movs	r2, #70	; 0x46
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2247      	movs	r2, #71	; 0x47
 80038e2:	2101      	movs	r1, #1
 80038e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	223d      	movs	r2, #61	; 0x3d
 80038ea:	2101      	movs	r1, #1
 80038ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	230f      	movs	r3, #15
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223c      	movs	r2, #60	; 0x3c
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIM_ConfigClockSource+0x20>
 8003914:	2302      	movs	r3, #2
 8003916:	e0bc      	b.n	8003a92 <HAL_TIM_ConfigClockSource+0x19a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	223c      	movs	r2, #60	; 0x3c
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	223d      	movs	r2, #61	; 0x3d
 8003924:	2102      	movs	r1, #2
 8003926:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a5a      	ldr	r2, [pc, #360]	; (8003a9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003934:	4013      	ands	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a59      	ldr	r2, [pc, #356]	; (8003aa0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	0192      	lsls	r2, r2, #6
 8003950:	4293      	cmp	r3, r2
 8003952:	d040      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xde>
 8003954:	2280      	movs	r2, #128	; 0x80
 8003956:	0192      	lsls	r2, r2, #6
 8003958:	4293      	cmp	r3, r2
 800395a:	d900      	bls.n	800395e <HAL_TIM_ConfigClockSource+0x66>
 800395c:	e088      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	0152      	lsls	r2, r2, #5
 8003962:	4293      	cmp	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x70>
 8003966:	e088      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x182>
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	0152      	lsls	r2, r2, #5
 800396c:	4293      	cmp	r3, r2
 800396e:	d900      	bls.n	8003972 <HAL_TIM_ConfigClockSource+0x7a>
 8003970:	e07e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003972:	2b70      	cmp	r3, #112	; 0x70
 8003974:	d018      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xb0>
 8003976:	d900      	bls.n	800397a <HAL_TIM_ConfigClockSource+0x82>
 8003978:	e07a      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d04f      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x126>
 800397e:	d900      	bls.n	8003982 <HAL_TIM_ConfigClockSource+0x8a>
 8003980:	e076      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d03b      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x106>
 8003986:	d900      	bls.n	800398a <HAL_TIM_ConfigClockSource+0x92>
 8003988:	e072      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d057      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x146>
 800398e:	d900      	bls.n	8003992 <HAL_TIM_ConfigClockSource+0x9a>
 8003990:	e06e      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d063      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 800399c:	d868      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05d      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d05b      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x166>
 80039a6:	e063      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039b8:	f000 f95c 	bl	8003c74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2277      	movs	r2, #119	; 0x77
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e052      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039e6:	f000 f945 	bl	8003c74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	01c9      	lsls	r1, r1, #7
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e03e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a0a:	001a      	movs	r2, r3
 8003a0c:	f000 f8b6 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	; 0x50
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f910 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e02e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	f000 f8d4 	bl	8003bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	; 0x60
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f900 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e01e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	f000 f896 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 f8f0 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e00e      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	0019      	movs	r1, r3
 8003a68:	0010      	movs	r0, r2
 8003a6a:	f000 f8e7 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e005      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a70:	230f      	movs	r3, #15
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
      break;
 8003a78:	e000      	b.n	8003a7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a7a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	223d      	movs	r2, #61	; 0x3d
 8003a80:	2101      	movs	r1, #1
 8003a82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	223c      	movs	r2, #60	; 0x3c
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

  return status;
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	781b      	ldrb	r3, [r3, #0]
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b004      	add	sp, #16
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	ffceff88 	.word	0xffceff88
 8003aa0:	ffff00ff 	.word	0xffff00ff

08003aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <TIM_Base_SetConfig+0xc0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x20>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <TIM_Base_SetConfig+0xc4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2270      	movs	r2, #112	; 0x70
 8003ac8:	4393      	bics	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <TIM_Base_SetConfig+0xc0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0x5a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <TIM_Base_SetConfig+0xc4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x5a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <TIM_Base_SetConfig+0xc8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x5a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <TIM_Base_SetConfig+0xcc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x5a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <TIM_Base_SetConfig+0xd0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <TIM_Base_SetConfig+0xd4>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	4393      	bics	r3, r2
 8003b16:	001a      	movs	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <TIM_Base_SetConfig+0xc0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0xaa>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <TIM_Base_SetConfig+0xcc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0xaa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <TIM_Base_SetConfig+0xd0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d103      	bne.n	8003b56 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b004      	add	sp, #16
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40002000 	.word	0x40002000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800
 8003b78:	fffffcff 	.word	0xfffffcff

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2201      	movs	r2, #1
 8003b94:	4393      	bics	r3, r2
 8003b96:	001a      	movs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	22f0      	movs	r2, #240	; 0xf0
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	220a      	movs	r2, #10
 8003bb8:	4393      	bics	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b006      	add	sp, #24
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	2210      	movs	r2, #16
 8003bea:	4393      	bics	r3, r2
 8003bec:	001a      	movs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4a0d      	ldr	r2, [pc, #52]	; (8003c38 <TIM_TI2_ConfigInputStage+0x60>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	22a0      	movs	r2, #160	; 0xa0
 8003c14:	4393      	bics	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b006      	add	sp, #24
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	ffff0fff 	.word	0xffff0fff

08003c3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <TIM_ITRx_SetConfig+0x34>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b004      	add	sp, #16
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	ffcfff8f 	.word	0xffcfff8f

08003c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <TIM_ETR_SetConfig+0x3c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b006      	add	sp, #24
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	ffff00ff 	.word	0xffff00ff

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	223c      	movs	r2, #60	; 0x3c
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e04a      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	223c      	movs	r2, #60	; 0x3c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	223d      	movs	r2, #61	; 0x3d
 8003cd8:	2102      	movs	r1, #2
 8003cda:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2270      	movs	r2, #112	; 0x70
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223d      	movs	r2, #61	; 0x3d
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	223c      	movs	r2, #60	; 0x3c
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b004      	add	sp, #16
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	ff0fffff 	.word	0xff0fffff
 8003d74:	40000400 	.word	0x40000400

08003d78 <_vsniprintf_r>:
 8003d78:	b530      	push	{r4, r5, lr}
 8003d7a:	0014      	movs	r4, r2
 8003d7c:	0005      	movs	r5, r0
 8003d7e:	001a      	movs	r2, r3
 8003d80:	b09b      	sub	sp, #108	; 0x6c
 8003d82:	2c00      	cmp	r4, #0
 8003d84:	da05      	bge.n	8003d92 <_vsniprintf_r+0x1a>
 8003d86:	238b      	movs	r3, #139	; 0x8b
 8003d88:	6003      	str	r3, [r0, #0]
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	4240      	negs	r0, r0
 8003d8e:	b01b      	add	sp, #108	; 0x6c
 8003d90:	bd30      	pop	{r4, r5, pc}
 8003d92:	2382      	movs	r3, #130	; 0x82
 8003d94:	4668      	mov	r0, sp
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	8183      	strh	r3, [r0, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9100      	str	r1, [sp, #0]
 8003d9e:	9104      	str	r1, [sp, #16]
 8003da0:	429c      	cmp	r4, r3
 8003da2:	d000      	beq.n	8003da6 <_vsniprintf_r+0x2e>
 8003da4:	1e63      	subs	r3, r4, #1
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	9305      	str	r3, [sp, #20]
 8003daa:	2301      	movs	r3, #1
 8003dac:	4669      	mov	r1, sp
 8003dae:	425b      	negs	r3, r3
 8003db0:	81cb      	strh	r3, [r1, #14]
 8003db2:	0028      	movs	r0, r5
 8003db4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003db6:	f000 f9ab 	bl	8004110 <_svfiprintf_r>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	da01      	bge.n	8003dc2 <_vsniprintf_r+0x4a>
 8003dbe:	238b      	movs	r3, #139	; 0x8b
 8003dc0:	602b      	str	r3, [r5, #0]
 8003dc2:	2c00      	cmp	r4, #0
 8003dc4:	d0e3      	beq.n	8003d8e <_vsniprintf_r+0x16>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	9b00      	ldr	r3, [sp, #0]
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e7df      	b.n	8003d8e <_vsniprintf_r+0x16>
	...

08003dd0 <vsniprintf>:
 8003dd0:	b513      	push	{r0, r1, r4, lr}
 8003dd2:	4c04      	ldr	r4, [pc, #16]	; (8003de4 <vsniprintf+0x14>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	000a      	movs	r2, r1
 8003dda:	0001      	movs	r1, r0
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	f7ff ffcb 	bl	8003d78 <_vsniprintf_r>
 8003de2:	bd16      	pop	{r1, r2, r4, pc}
 8003de4:	20000058 	.word	0x20000058

08003de8 <memset>:
 8003de8:	0003      	movs	r3, r0
 8003dea:	1882      	adds	r2, r0, r2
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	; (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	20000058 	.word	0x20000058

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	2600      	movs	r6, #0
 8003e08:	4c0c      	ldr	r4, [pc, #48]	; (8003e3c <__libc_init_array+0x38>)
 8003e0a:	4d0d      	ldr	r5, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0c:	1b64      	subs	r4, r4, r5
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	2600      	movs	r6, #0
 8003e16:	f000 fc6d 	bl	80046f4 <_init>
 8003e1a:	4c0a      	ldr	r4, [pc, #40]	; (8003e44 <__libc_init_array+0x40>)
 8003e1c:	4d0a      	ldr	r5, [pc, #40]	; (8003e48 <__libc_init_array+0x44>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	00b3      	lsls	r3, r6, #2
 8003e2a:	58eb      	ldr	r3, [r5, r3]
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	00b3      	lsls	r3, r6, #2
 8003e34:	58eb      	ldr	r3, [r5, r3]
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08004838 	.word	0x08004838
 8003e40:	08004838 	.word	0x08004838
 8003e44:	0800483c 	.word	0x0800483c
 8003e48:	08004838 	.word	0x08004838

08003e4c <__retarget_lock_acquire_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_release_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <_free_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	0005      	movs	r5, r0
 8003e54:	2900      	cmp	r1, #0
 8003e56:	d010      	beq.n	8003e7a <_free_r+0x2a>
 8003e58:	1f0c      	subs	r4, r1, #4
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da00      	bge.n	8003e62 <_free_r+0x12>
 8003e60:	18e4      	adds	r4, r4, r3
 8003e62:	0028      	movs	r0, r5
 8003e64:	f000 f8e2 	bl	800402c <__malloc_lock>
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <_free_r+0x90>)
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <_free_r+0x2c>
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6014      	str	r4, [r2, #0]
 8003e74:	0028      	movs	r0, r5
 8003e76:	f000 f8e1 	bl	800403c <__malloc_unlock>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	42a3      	cmp	r3, r4
 8003e7e:	d908      	bls.n	8003e92 <_free_r+0x42>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	1821      	adds	r1, r4, r0
 8003e84:	428b      	cmp	r3, r1
 8003e86:	d1f3      	bne.n	8003e70 <_free_r+0x20>
 8003e88:	6819      	ldr	r1, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	1809      	adds	r1, r1, r0
 8003e8e:	6021      	str	r1, [r4, #0]
 8003e90:	e7ee      	b.n	8003e70 <_free_r+0x20>
 8003e92:	001a      	movs	r2, r3
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <_free_r+0x4e>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	d9f9      	bls.n	8003e92 <_free_r+0x42>
 8003e9e:	6811      	ldr	r1, [r2, #0]
 8003ea0:	1850      	adds	r0, r2, r1
 8003ea2:	42a0      	cmp	r0, r4
 8003ea4:	d10b      	bne.n	8003ebe <_free_r+0x6e>
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	1809      	adds	r1, r1, r0
 8003eaa:	1850      	adds	r0, r2, r1
 8003eac:	6011      	str	r1, [r2, #0]
 8003eae:	4283      	cmp	r3, r0
 8003eb0:	d1e0      	bne.n	8003e74 <_free_r+0x24>
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	1841      	adds	r1, r0, r1
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	6053      	str	r3, [r2, #4]
 8003ebc:	e7da      	b.n	8003e74 <_free_r+0x24>
 8003ebe:	42a0      	cmp	r0, r4
 8003ec0:	d902      	bls.n	8003ec8 <_free_r+0x78>
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	e7d5      	b.n	8003e74 <_free_r+0x24>
 8003ec8:	6820      	ldr	r0, [r4, #0]
 8003eca:	1821      	adds	r1, r4, r0
 8003ecc:	428b      	cmp	r3, r1
 8003ece:	d103      	bne.n	8003ed8 <_free_r+0x88>
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	1809      	adds	r1, r1, r0
 8003ed6:	6021      	str	r1, [r4, #0]
 8003ed8:	6063      	str	r3, [r4, #4]
 8003eda:	6054      	str	r4, [r2, #4]
 8003edc:	e7ca      	b.n	8003e74 <_free_r+0x24>
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	200004dc 	.word	0x200004dc

08003ee4 <sbrk_aligned>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4e0f      	ldr	r6, [pc, #60]	; (8003f24 <sbrk_aligned+0x40>)
 8003ee8:	000d      	movs	r5, r1
 8003eea:	6831      	ldr	r1, [r6, #0]
 8003eec:	0004      	movs	r4, r0
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d102      	bne.n	8003ef8 <sbrk_aligned+0x14>
 8003ef2:	f000 fba1 	bl	8004638 <_sbrk_r>
 8003ef6:	6030      	str	r0, [r6, #0]
 8003ef8:	0029      	movs	r1, r5
 8003efa:	0020      	movs	r0, r4
 8003efc:	f000 fb9c 	bl	8004638 <_sbrk_r>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d00a      	beq.n	8003f1a <sbrk_aligned+0x36>
 8003f04:	2303      	movs	r3, #3
 8003f06:	1cc5      	adds	r5, r0, #3
 8003f08:	439d      	bics	r5, r3
 8003f0a:	42a8      	cmp	r0, r5
 8003f0c:	d007      	beq.n	8003f1e <sbrk_aligned+0x3a>
 8003f0e:	1a29      	subs	r1, r5, r0
 8003f10:	0020      	movs	r0, r4
 8003f12:	f000 fb91 	bl	8004638 <_sbrk_r>
 8003f16:	3001      	adds	r0, #1
 8003f18:	d101      	bne.n	8003f1e <sbrk_aligned+0x3a>
 8003f1a:	2501      	movs	r5, #1
 8003f1c:	426d      	negs	r5, r5
 8003f1e:	0028      	movs	r0, r5
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	200004e0 	.word	0x200004e0

08003f28 <_malloc_r>:
 8003f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	1ccb      	adds	r3, r1, #3
 8003f2e:	4393      	bics	r3, r2
 8003f30:	3308      	adds	r3, #8
 8003f32:	0006      	movs	r6, r0
 8003f34:	001f      	movs	r7, r3
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d238      	bcs.n	8003fac <_malloc_r+0x84>
 8003f3a:	270c      	movs	r7, #12
 8003f3c:	42b9      	cmp	r1, r7
 8003f3e:	d837      	bhi.n	8003fb0 <_malloc_r+0x88>
 8003f40:	0030      	movs	r0, r6
 8003f42:	f000 f873 	bl	800402c <__malloc_lock>
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <_malloc_r+0x100>)
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	001c      	movs	r4, r3
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d133      	bne.n	8003fba <_malloc_r+0x92>
 8003f52:	0039      	movs	r1, r7
 8003f54:	0030      	movs	r0, r6
 8003f56:	f7ff ffc5 	bl	8003ee4 <sbrk_aligned>
 8003f5a:	0004      	movs	r4, r0
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d15e      	bne.n	800401e <_malloc_r+0xf6>
 8003f60:	9b00      	ldr	r3, [sp, #0]
 8003f62:	681c      	ldr	r4, [r3, #0]
 8003f64:	0025      	movs	r5, r4
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	d14e      	bne.n	8004008 <_malloc_r+0xe0>
 8003f6a:	2c00      	cmp	r4, #0
 8003f6c:	d051      	beq.n	8004012 <_malloc_r+0xea>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	0029      	movs	r1, r5
 8003f72:	18e3      	adds	r3, r4, r3
 8003f74:	0030      	movs	r0, r6
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	f000 fb5e 	bl	8004638 <_sbrk_r>
 8003f7c:	9b01      	ldr	r3, [sp, #4]
 8003f7e:	4283      	cmp	r3, r0
 8003f80:	d147      	bne.n	8004012 <_malloc_r+0xea>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	0030      	movs	r0, r6
 8003f86:	1aff      	subs	r7, r7, r3
 8003f88:	0039      	movs	r1, r7
 8003f8a:	f7ff ffab 	bl	8003ee4 <sbrk_aligned>
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d03f      	beq.n	8004012 <_malloc_r+0xea>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	19db      	adds	r3, r3, r7
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	9b00      	ldr	r3, [sp, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d040      	beq.n	8004022 <_malloc_r+0xfa>
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	42a2      	cmp	r2, r4
 8003fa4:	d133      	bne.n	800400e <_malloc_r+0xe6>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	e014      	b.n	8003fd6 <_malloc_r+0xae>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	dac5      	bge.n	8003f3c <_malloc_r+0x14>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	0028      	movs	r0, r5
 8003fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	1bc9      	subs	r1, r1, r7
 8003fbe:	d420      	bmi.n	8004002 <_malloc_r+0xda>
 8003fc0:	290b      	cmp	r1, #11
 8003fc2:	d918      	bls.n	8003ff6 <_malloc_r+0xce>
 8003fc4:	19e2      	adds	r2, r4, r7
 8003fc6:	6027      	str	r7, [r4, #0]
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	d112      	bne.n	8003ff2 <_malloc_r+0xca>
 8003fcc:	9b00      	ldr	r3, [sp, #0]
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	6011      	str	r1, [r2, #0]
 8003fd4:	6053      	str	r3, [r2, #4]
 8003fd6:	0030      	movs	r0, r6
 8003fd8:	0025      	movs	r5, r4
 8003fda:	f000 f82f 	bl	800403c <__malloc_unlock>
 8003fde:	2207      	movs	r2, #7
 8003fe0:	350b      	adds	r5, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	4395      	bics	r5, r2
 8003fe6:	1aea      	subs	r2, r5, r3
 8003fe8:	429d      	cmp	r5, r3
 8003fea:	d0e4      	beq.n	8003fb6 <_malloc_r+0x8e>
 8003fec:	1b5b      	subs	r3, r3, r5
 8003fee:	50a3      	str	r3, [r4, r2]
 8003ff0:	e7e1      	b.n	8003fb6 <_malloc_r+0x8e>
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	e7ec      	b.n	8003fd0 <_malloc_r+0xa8>
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	d1d5      	bne.n	8003fa8 <_malloc_r+0x80>
 8003ffc:	9b00      	ldr	r3, [sp, #0]
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e7e9      	b.n	8003fd6 <_malloc_r+0xae>
 8004002:	0023      	movs	r3, r4
 8004004:	6864      	ldr	r4, [r4, #4]
 8004006:	e7a2      	b.n	8003f4e <_malloc_r+0x26>
 8004008:	002c      	movs	r4, r5
 800400a:	686d      	ldr	r5, [r5, #4]
 800400c:	e7ab      	b.n	8003f66 <_malloc_r+0x3e>
 800400e:	0013      	movs	r3, r2
 8004010:	e7c4      	b.n	8003f9c <_malloc_r+0x74>
 8004012:	230c      	movs	r3, #12
 8004014:	0030      	movs	r0, r6
 8004016:	6033      	str	r3, [r6, #0]
 8004018:	f000 f810 	bl	800403c <__malloc_unlock>
 800401c:	e7cb      	b.n	8003fb6 <_malloc_r+0x8e>
 800401e:	6027      	str	r7, [r4, #0]
 8004020:	e7d9      	b.n	8003fd6 <_malloc_r+0xae>
 8004022:	605b      	str	r3, [r3, #4]
 8004024:	deff      	udf	#255	; 0xff
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	200004dc 	.word	0x200004dc

0800402c <__malloc_lock>:
 800402c:	b510      	push	{r4, lr}
 800402e:	4802      	ldr	r0, [pc, #8]	; (8004038 <__malloc_lock+0xc>)
 8004030:	f7ff ff0c 	bl	8003e4c <__retarget_lock_acquire_recursive>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	200004d8 	.word	0x200004d8

0800403c <__malloc_unlock>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4802      	ldr	r0, [pc, #8]	; (8004048 <__malloc_unlock+0xc>)
 8004040:	f7ff ff05 	bl	8003e4e <__retarget_lock_release_recursive>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	200004d8 	.word	0x200004d8

0800404c <__ssputs_r>:
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	b085      	sub	sp, #20
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	9203      	str	r2, [sp, #12]
 8004054:	688e      	ldr	r6, [r1, #8]
 8004056:	9a01      	ldr	r2, [sp, #4]
 8004058:	0007      	movs	r7, r0
 800405a:	000c      	movs	r4, r1
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	4296      	cmp	r6, r2
 8004060:	d831      	bhi.n	80040c6 <__ssputs_r+0x7a>
 8004062:	898a      	ldrh	r2, [r1, #12]
 8004064:	2190      	movs	r1, #144	; 0x90
 8004066:	00c9      	lsls	r1, r1, #3
 8004068:	420a      	tst	r2, r1
 800406a:	d029      	beq.n	80040c0 <__ssputs_r+0x74>
 800406c:	2003      	movs	r0, #3
 800406e:	6921      	ldr	r1, [r4, #16]
 8004070:	1a5b      	subs	r3, r3, r1
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	6963      	ldr	r3, [r4, #20]
 8004076:	4343      	muls	r3, r0
 8004078:	0fdd      	lsrs	r5, r3, #31
 800407a:	18ed      	adds	r5, r5, r3
 800407c:	9b01      	ldr	r3, [sp, #4]
 800407e:	9802      	ldr	r0, [sp, #8]
 8004080:	3301      	adds	r3, #1
 8004082:	181b      	adds	r3, r3, r0
 8004084:	106d      	asrs	r5, r5, #1
 8004086:	42ab      	cmp	r3, r5
 8004088:	d900      	bls.n	800408c <__ssputs_r+0x40>
 800408a:	001d      	movs	r5, r3
 800408c:	0552      	lsls	r2, r2, #21
 800408e:	d529      	bpl.n	80040e4 <__ssputs_r+0x98>
 8004090:	0029      	movs	r1, r5
 8004092:	0038      	movs	r0, r7
 8004094:	f7ff ff48 	bl	8003f28 <_malloc_r>
 8004098:	1e06      	subs	r6, r0, #0
 800409a:	d02d      	beq.n	80040f8 <__ssputs_r+0xac>
 800409c:	9a02      	ldr	r2, [sp, #8]
 800409e:	6921      	ldr	r1, [r4, #16]
 80040a0:	f000 fae7 	bl	8004672 <memcpy>
 80040a4:	89a2      	ldrh	r2, [r4, #12]
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <__ssputs_r+0xc0>)
 80040a8:	401a      	ands	r2, r3
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	4313      	orrs	r3, r2
 80040ae:	81a3      	strh	r3, [r4, #12]
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	6126      	str	r6, [r4, #16]
 80040b4:	18f6      	adds	r6, r6, r3
 80040b6:	6026      	str	r6, [r4, #0]
 80040b8:	6165      	str	r5, [r4, #20]
 80040ba:	9e01      	ldr	r6, [sp, #4]
 80040bc:	1aed      	subs	r5, r5, r3
 80040be:	60a5      	str	r5, [r4, #8]
 80040c0:	9b01      	ldr	r3, [sp, #4]
 80040c2:	429e      	cmp	r6, r3
 80040c4:	d900      	bls.n	80040c8 <__ssputs_r+0x7c>
 80040c6:	9e01      	ldr	r6, [sp, #4]
 80040c8:	0032      	movs	r2, r6
 80040ca:	9903      	ldr	r1, [sp, #12]
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	f000 fa9f 	bl	8004610 <memmove>
 80040d2:	2000      	movs	r0, #0
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	1b9b      	subs	r3, r3, r6
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	199b      	adds	r3, r3, r6
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	b005      	add	sp, #20
 80040e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040e4:	002a      	movs	r2, r5
 80040e6:	0038      	movs	r0, r7
 80040e8:	f000 facc 	bl	8004684 <_realloc_r>
 80040ec:	1e06      	subs	r6, r0, #0
 80040ee:	d1df      	bne.n	80040b0 <__ssputs_r+0x64>
 80040f0:	0038      	movs	r0, r7
 80040f2:	6921      	ldr	r1, [r4, #16]
 80040f4:	f7ff feac 	bl	8003e50 <_free_r>
 80040f8:	230c      	movs	r3, #12
 80040fa:	2001      	movs	r0, #1
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	89a2      	ldrh	r2, [r4, #12]
 8004100:	3334      	adds	r3, #52	; 0x34
 8004102:	4313      	orrs	r3, r2
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	4240      	negs	r0, r0
 8004108:	e7ea      	b.n	80040e0 <__ssputs_r+0x94>
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	fffffb7f 	.word	0xfffffb7f

08004110 <_svfiprintf_r>:
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b0a1      	sub	sp, #132	; 0x84
 8004114:	9003      	str	r0, [sp, #12]
 8004116:	001d      	movs	r5, r3
 8004118:	898b      	ldrh	r3, [r1, #12]
 800411a:	000f      	movs	r7, r1
 800411c:	0016      	movs	r6, r2
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	d511      	bpl.n	8004146 <_svfiprintf_r+0x36>
 8004122:	690b      	ldr	r3, [r1, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10e      	bne.n	8004146 <_svfiprintf_r+0x36>
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	f7ff fefd 	bl	8003f28 <_malloc_r>
 800412e:	6038      	str	r0, [r7, #0]
 8004130:	6138      	str	r0, [r7, #16]
 8004132:	2800      	cmp	r0, #0
 8004134:	d105      	bne.n	8004142 <_svfiprintf_r+0x32>
 8004136:	230c      	movs	r3, #12
 8004138:	9a03      	ldr	r2, [sp, #12]
 800413a:	3801      	subs	r0, #1
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	b021      	add	sp, #132	; 0x84
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004142:	2340      	movs	r3, #64	; 0x40
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	2300      	movs	r3, #0
 8004148:	ac08      	add	r4, sp, #32
 800414a:	6163      	str	r3, [r4, #20]
 800414c:	3320      	adds	r3, #32
 800414e:	7663      	strb	r3, [r4, #25]
 8004150:	3310      	adds	r3, #16
 8004152:	76a3      	strb	r3, [r4, #26]
 8004154:	9507      	str	r5, [sp, #28]
 8004156:	0035      	movs	r5, r6
 8004158:	782b      	ldrb	r3, [r5, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <_svfiprintf_r+0x52>
 800415e:	2b25      	cmp	r3, #37	; 0x25
 8004160:	d148      	bne.n	80041f4 <_svfiprintf_r+0xe4>
 8004162:	1bab      	subs	r3, r5, r6
 8004164:	9305      	str	r3, [sp, #20]
 8004166:	42b5      	cmp	r5, r6
 8004168:	d00b      	beq.n	8004182 <_svfiprintf_r+0x72>
 800416a:	0032      	movs	r2, r6
 800416c:	0039      	movs	r1, r7
 800416e:	9803      	ldr	r0, [sp, #12]
 8004170:	f7ff ff6c 	bl	800404c <__ssputs_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d100      	bne.n	800417a <_svfiprintf_r+0x6a>
 8004178:	e0af      	b.n	80042da <_svfiprintf_r+0x1ca>
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	9a05      	ldr	r2, [sp, #20]
 800417e:	189b      	adds	r3, r3, r2
 8004180:	6163      	str	r3, [r4, #20]
 8004182:	782b      	ldrb	r3, [r5, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <_svfiprintf_r+0x7a>
 8004188:	e0a7      	b.n	80042da <_svfiprintf_r+0x1ca>
 800418a:	2201      	movs	r2, #1
 800418c:	2300      	movs	r3, #0
 800418e:	4252      	negs	r2, r2
 8004190:	6062      	str	r2, [r4, #4]
 8004192:	a904      	add	r1, sp, #16
 8004194:	3254      	adds	r2, #84	; 0x54
 8004196:	1852      	adds	r2, r2, r1
 8004198:	1c6e      	adds	r6, r5, #1
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	60e3      	str	r3, [r4, #12]
 800419e:	60a3      	str	r3, [r4, #8]
 80041a0:	7013      	strb	r3, [r2, #0]
 80041a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <_svfiprintf_r+0x1ec>)
 80041a6:	2205      	movs	r2, #5
 80041a8:	0018      	movs	r0, r3
 80041aa:	7831      	ldrb	r1, [r6, #0]
 80041ac:	9305      	str	r3, [sp, #20]
 80041ae:	f000 fa55 	bl	800465c <memchr>
 80041b2:	1c75      	adds	r5, r6, #1
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d11f      	bne.n	80041f8 <_svfiprintf_r+0xe8>
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	06d3      	lsls	r3, r2, #27
 80041bc:	d504      	bpl.n	80041c8 <_svfiprintf_r+0xb8>
 80041be:	2353      	movs	r3, #83	; 0x53
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	185b      	adds	r3, r3, r1
 80041c4:	2120      	movs	r1, #32
 80041c6:	7019      	strb	r1, [r3, #0]
 80041c8:	0713      	lsls	r3, r2, #28
 80041ca:	d504      	bpl.n	80041d6 <_svfiprintf_r+0xc6>
 80041cc:	2353      	movs	r3, #83	; 0x53
 80041ce:	a904      	add	r1, sp, #16
 80041d0:	185b      	adds	r3, r3, r1
 80041d2:	212b      	movs	r1, #43	; 0x2b
 80041d4:	7019      	strb	r1, [r3, #0]
 80041d6:	7833      	ldrb	r3, [r6, #0]
 80041d8:	2b2a      	cmp	r3, #42	; 0x2a
 80041da:	d016      	beq.n	800420a <_svfiprintf_r+0xfa>
 80041dc:	0035      	movs	r5, r6
 80041de:	2100      	movs	r1, #0
 80041e0:	200a      	movs	r0, #10
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	782a      	ldrb	r2, [r5, #0]
 80041e6:	1c6e      	adds	r6, r5, #1
 80041e8:	3a30      	subs	r2, #48	; 0x30
 80041ea:	2a09      	cmp	r2, #9
 80041ec:	d94e      	bls.n	800428c <_svfiprintf_r+0x17c>
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d111      	bne.n	8004216 <_svfiprintf_r+0x106>
 80041f2:	e017      	b.n	8004224 <_svfiprintf_r+0x114>
 80041f4:	3501      	adds	r5, #1
 80041f6:	e7af      	b.n	8004158 <_svfiprintf_r+0x48>
 80041f8:	9b05      	ldr	r3, [sp, #20]
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	1ac0      	subs	r0, r0, r3
 80041fe:	2301      	movs	r3, #1
 8004200:	4083      	lsls	r3, r0
 8004202:	4313      	orrs	r3, r2
 8004204:	002e      	movs	r6, r5
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	e7cc      	b.n	80041a4 <_svfiprintf_r+0x94>
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	1d19      	adds	r1, r3, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	9107      	str	r1, [sp, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	db01      	blt.n	800421a <_svfiprintf_r+0x10a>
 8004216:	930b      	str	r3, [sp, #44]	; 0x2c
 8004218:	e004      	b.n	8004224 <_svfiprintf_r+0x114>
 800421a:	425b      	negs	r3, r3
 800421c:	60e3      	str	r3, [r4, #12]
 800421e:	2302      	movs	r3, #2
 8004220:	4313      	orrs	r3, r2
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	782b      	ldrb	r3, [r5, #0]
 8004226:	2b2e      	cmp	r3, #46	; 0x2e
 8004228:	d10a      	bne.n	8004240 <_svfiprintf_r+0x130>
 800422a:	786b      	ldrb	r3, [r5, #1]
 800422c:	2b2a      	cmp	r3, #42	; 0x2a
 800422e:	d135      	bne.n	800429c <_svfiprintf_r+0x18c>
 8004230:	9b07      	ldr	r3, [sp, #28]
 8004232:	3502      	adds	r5, #2
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	9207      	str	r2, [sp, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	db2b      	blt.n	8004296 <_svfiprintf_r+0x186>
 800423e:	9309      	str	r3, [sp, #36]	; 0x24
 8004240:	4e2f      	ldr	r6, [pc, #188]	; (8004300 <_svfiprintf_r+0x1f0>)
 8004242:	2203      	movs	r2, #3
 8004244:	0030      	movs	r0, r6
 8004246:	7829      	ldrb	r1, [r5, #0]
 8004248:	f000 fa08 	bl	800465c <memchr>
 800424c:	2800      	cmp	r0, #0
 800424e:	d006      	beq.n	800425e <_svfiprintf_r+0x14e>
 8004250:	2340      	movs	r3, #64	; 0x40
 8004252:	1b80      	subs	r0, r0, r6
 8004254:	4083      	lsls	r3, r0
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	3501      	adds	r5, #1
 800425a:	4313      	orrs	r3, r2
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	7829      	ldrb	r1, [r5, #0]
 8004260:	2206      	movs	r2, #6
 8004262:	4828      	ldr	r0, [pc, #160]	; (8004304 <_svfiprintf_r+0x1f4>)
 8004264:	1c6e      	adds	r6, r5, #1
 8004266:	7621      	strb	r1, [r4, #24]
 8004268:	f000 f9f8 	bl	800465c <memchr>
 800426c:	2800      	cmp	r0, #0
 800426e:	d03c      	beq.n	80042ea <_svfiprintf_r+0x1da>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <_svfiprintf_r+0x1f8>)
 8004272:	2b00      	cmp	r3, #0
 8004274:	d125      	bne.n	80042c2 <_svfiprintf_r+0x1b2>
 8004276:	2207      	movs	r2, #7
 8004278:	9b07      	ldr	r3, [sp, #28]
 800427a:	3307      	adds	r3, #7
 800427c:	4393      	bics	r3, r2
 800427e:	3308      	adds	r3, #8
 8004280:	9307      	str	r3, [sp, #28]
 8004282:	6963      	ldr	r3, [r4, #20]
 8004284:	9a04      	ldr	r2, [sp, #16]
 8004286:	189b      	adds	r3, r3, r2
 8004288:	6163      	str	r3, [r4, #20]
 800428a:	e764      	b.n	8004156 <_svfiprintf_r+0x46>
 800428c:	4343      	muls	r3, r0
 800428e:	0035      	movs	r5, r6
 8004290:	2101      	movs	r1, #1
 8004292:	189b      	adds	r3, r3, r2
 8004294:	e7a6      	b.n	80041e4 <_svfiprintf_r+0xd4>
 8004296:	2301      	movs	r3, #1
 8004298:	425b      	negs	r3, r3
 800429a:	e7d0      	b.n	800423e <_svfiprintf_r+0x12e>
 800429c:	2300      	movs	r3, #0
 800429e:	200a      	movs	r0, #10
 80042a0:	001a      	movs	r2, r3
 80042a2:	3501      	adds	r5, #1
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	7829      	ldrb	r1, [r5, #0]
 80042a8:	1c6e      	adds	r6, r5, #1
 80042aa:	3930      	subs	r1, #48	; 0x30
 80042ac:	2909      	cmp	r1, #9
 80042ae:	d903      	bls.n	80042b8 <_svfiprintf_r+0x1a8>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0c5      	beq.n	8004240 <_svfiprintf_r+0x130>
 80042b4:	9209      	str	r2, [sp, #36]	; 0x24
 80042b6:	e7c3      	b.n	8004240 <_svfiprintf_r+0x130>
 80042b8:	4342      	muls	r2, r0
 80042ba:	0035      	movs	r5, r6
 80042bc:	2301      	movs	r3, #1
 80042be:	1852      	adds	r2, r2, r1
 80042c0:	e7f1      	b.n	80042a6 <_svfiprintf_r+0x196>
 80042c2:	aa07      	add	r2, sp, #28
 80042c4:	9200      	str	r2, [sp, #0]
 80042c6:	0021      	movs	r1, r4
 80042c8:	003a      	movs	r2, r7
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <_svfiprintf_r+0x1fc>)
 80042cc:	9803      	ldr	r0, [sp, #12]
 80042ce:	e000      	b.n	80042d2 <_svfiprintf_r+0x1c2>
 80042d0:	bf00      	nop
 80042d2:	9004      	str	r0, [sp, #16]
 80042d4:	9b04      	ldr	r3, [sp, #16]
 80042d6:	3301      	adds	r3, #1
 80042d8:	d1d3      	bne.n	8004282 <_svfiprintf_r+0x172>
 80042da:	89bb      	ldrh	r3, [r7, #12]
 80042dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042de:	065b      	lsls	r3, r3, #25
 80042e0:	d400      	bmi.n	80042e4 <_svfiprintf_r+0x1d4>
 80042e2:	e72c      	b.n	800413e <_svfiprintf_r+0x2e>
 80042e4:	2001      	movs	r0, #1
 80042e6:	4240      	negs	r0, r0
 80042e8:	e729      	b.n	800413e <_svfiprintf_r+0x2e>
 80042ea:	aa07      	add	r2, sp, #28
 80042ec:	9200      	str	r2, [sp, #0]
 80042ee:	0021      	movs	r1, r4
 80042f0:	003a      	movs	r2, r7
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <_svfiprintf_r+0x1fc>)
 80042f4:	9803      	ldr	r0, [sp, #12]
 80042f6:	f000 f87b 	bl	80043f0 <_printf_i>
 80042fa:	e7ea      	b.n	80042d2 <_svfiprintf_r+0x1c2>
 80042fc:	08004804 	.word	0x08004804
 8004300:	0800480a 	.word	0x0800480a
 8004304:	0800480e 	.word	0x0800480e
 8004308:	00000000 	.word	0x00000000
 800430c:	0800404d 	.word	0x0800404d

08004310 <_printf_common>:
 8004310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004312:	0016      	movs	r6, r2
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	688a      	ldr	r2, [r1, #8]
 8004318:	690b      	ldr	r3, [r1, #16]
 800431a:	000c      	movs	r4, r1
 800431c:	9000      	str	r0, [sp, #0]
 800431e:	4293      	cmp	r3, r2
 8004320:	da00      	bge.n	8004324 <_printf_common+0x14>
 8004322:	0013      	movs	r3, r2
 8004324:	0022      	movs	r2, r4
 8004326:	6033      	str	r3, [r6, #0]
 8004328:	3243      	adds	r2, #67	; 0x43
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	2a00      	cmp	r2, #0
 800432e:	d001      	beq.n	8004334 <_printf_common+0x24>
 8004330:	3301      	adds	r3, #1
 8004332:	6033      	str	r3, [r6, #0]
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	069b      	lsls	r3, r3, #26
 8004338:	d502      	bpl.n	8004340 <_printf_common+0x30>
 800433a:	6833      	ldr	r3, [r6, #0]
 800433c:	3302      	adds	r3, #2
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	2306      	movs	r3, #6
 8004344:	0015      	movs	r5, r2
 8004346:	401d      	ands	r5, r3
 8004348:	421a      	tst	r2, r3
 800434a:	d027      	beq.n	800439c <_printf_common+0x8c>
 800434c:	0023      	movs	r3, r4
 800434e:	3343      	adds	r3, #67	; 0x43
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	1e5a      	subs	r2, r3, #1
 8004354:	4193      	sbcs	r3, r2
 8004356:	6822      	ldr	r2, [r4, #0]
 8004358:	0692      	lsls	r2, r2, #26
 800435a:	d430      	bmi.n	80043be <_printf_common+0xae>
 800435c:	0022      	movs	r2, r4
 800435e:	9901      	ldr	r1, [sp, #4]
 8004360:	9800      	ldr	r0, [sp, #0]
 8004362:	9d08      	ldr	r5, [sp, #32]
 8004364:	3243      	adds	r2, #67	; 0x43
 8004366:	47a8      	blx	r5
 8004368:	3001      	adds	r0, #1
 800436a:	d025      	beq.n	80043b8 <_printf_common+0xa8>
 800436c:	2206      	movs	r2, #6
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	2500      	movs	r5, #0
 8004372:	4013      	ands	r3, r2
 8004374:	2b04      	cmp	r3, #4
 8004376:	d105      	bne.n	8004384 <_printf_common+0x74>
 8004378:	6833      	ldr	r3, [r6, #0]
 800437a:	68e5      	ldr	r5, [r4, #12]
 800437c:	1aed      	subs	r5, r5, r3
 800437e:	43eb      	mvns	r3, r5
 8004380:	17db      	asrs	r3, r3, #31
 8004382:	401d      	ands	r5, r3
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	6922      	ldr	r2, [r4, #16]
 8004388:	4293      	cmp	r3, r2
 800438a:	dd01      	ble.n	8004390 <_printf_common+0x80>
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	18ed      	adds	r5, r5, r3
 8004390:	2600      	movs	r6, #0
 8004392:	42b5      	cmp	r5, r6
 8004394:	d120      	bne.n	80043d8 <_printf_common+0xc8>
 8004396:	2000      	movs	r0, #0
 8004398:	e010      	b.n	80043bc <_printf_common+0xac>
 800439a:	3501      	adds	r5, #1
 800439c:	68e3      	ldr	r3, [r4, #12]
 800439e:	6832      	ldr	r2, [r6, #0]
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	42ab      	cmp	r3, r5
 80043a4:	ddd2      	ble.n	800434c <_printf_common+0x3c>
 80043a6:	0022      	movs	r2, r4
 80043a8:	2301      	movs	r3, #1
 80043aa:	9901      	ldr	r1, [sp, #4]
 80043ac:	9800      	ldr	r0, [sp, #0]
 80043ae:	9f08      	ldr	r7, [sp, #32]
 80043b0:	3219      	adds	r2, #25
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	d1f0      	bne.n	800439a <_printf_common+0x8a>
 80043b8:	2001      	movs	r0, #1
 80043ba:	4240      	negs	r0, r0
 80043bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043be:	2030      	movs	r0, #48	; 0x30
 80043c0:	18e1      	adds	r1, r4, r3
 80043c2:	3143      	adds	r1, #67	; 0x43
 80043c4:	7008      	strb	r0, [r1, #0]
 80043c6:	0021      	movs	r1, r4
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	3145      	adds	r1, #69	; 0x45
 80043cc:	7809      	ldrb	r1, [r1, #0]
 80043ce:	18a2      	adds	r2, r4, r2
 80043d0:	3243      	adds	r2, #67	; 0x43
 80043d2:	3302      	adds	r3, #2
 80043d4:	7011      	strb	r1, [r2, #0]
 80043d6:	e7c1      	b.n	800435c <_printf_common+0x4c>
 80043d8:	0022      	movs	r2, r4
 80043da:	2301      	movs	r3, #1
 80043dc:	9901      	ldr	r1, [sp, #4]
 80043de:	9800      	ldr	r0, [sp, #0]
 80043e0:	9f08      	ldr	r7, [sp, #32]
 80043e2:	321a      	adds	r2, #26
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	d0e6      	beq.n	80043b8 <_printf_common+0xa8>
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7d1      	b.n	8004392 <_printf_common+0x82>
	...

080043f0 <_printf_i>:
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b08b      	sub	sp, #44	; 0x2c
 80043f4:	9206      	str	r2, [sp, #24]
 80043f6:	000a      	movs	r2, r1
 80043f8:	3243      	adds	r2, #67	; 0x43
 80043fa:	9307      	str	r3, [sp, #28]
 80043fc:	9005      	str	r0, [sp, #20]
 80043fe:	9204      	str	r2, [sp, #16]
 8004400:	7e0a      	ldrb	r2, [r1, #24]
 8004402:	000c      	movs	r4, r1
 8004404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004406:	2a78      	cmp	r2, #120	; 0x78
 8004408:	d809      	bhi.n	800441e <_printf_i+0x2e>
 800440a:	2a62      	cmp	r2, #98	; 0x62
 800440c:	d80b      	bhi.n	8004426 <_printf_i+0x36>
 800440e:	2a00      	cmp	r2, #0
 8004410:	d100      	bne.n	8004414 <_printf_i+0x24>
 8004412:	e0be      	b.n	8004592 <_printf_i+0x1a2>
 8004414:	497c      	ldr	r1, [pc, #496]	; (8004608 <_printf_i+0x218>)
 8004416:	9103      	str	r1, [sp, #12]
 8004418:	2a58      	cmp	r2, #88	; 0x58
 800441a:	d100      	bne.n	800441e <_printf_i+0x2e>
 800441c:	e093      	b.n	8004546 <_printf_i+0x156>
 800441e:	0026      	movs	r6, r4
 8004420:	3642      	adds	r6, #66	; 0x42
 8004422:	7032      	strb	r2, [r6, #0]
 8004424:	e022      	b.n	800446c <_printf_i+0x7c>
 8004426:	0010      	movs	r0, r2
 8004428:	3863      	subs	r0, #99	; 0x63
 800442a:	2815      	cmp	r0, #21
 800442c:	d8f7      	bhi.n	800441e <_printf_i+0x2e>
 800442e:	f7fb fe67 	bl	8000100 <__gnu_thumb1_case_shi>
 8004432:	0016      	.short	0x0016
 8004434:	fff6001f 	.word	0xfff6001f
 8004438:	fff6fff6 	.word	0xfff6fff6
 800443c:	001ffff6 	.word	0x001ffff6
 8004440:	fff6fff6 	.word	0xfff6fff6
 8004444:	fff6fff6 	.word	0xfff6fff6
 8004448:	003600a3 	.word	0x003600a3
 800444c:	fff60083 	.word	0xfff60083
 8004450:	00b4fff6 	.word	0x00b4fff6
 8004454:	0036fff6 	.word	0x0036fff6
 8004458:	fff6fff6 	.word	0xfff6fff6
 800445c:	0087      	.short	0x0087
 800445e:	0026      	movs	r6, r4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	3642      	adds	r6, #66	; 0x42
 8004464:	1d11      	adds	r1, r2, #4
 8004466:	6019      	str	r1, [r3, #0]
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	7033      	strb	r3, [r6, #0]
 800446c:	2301      	movs	r3, #1
 800446e:	e0a2      	b.n	80045b6 <_printf_i+0x1c6>
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	1d02      	adds	r2, r0, #4
 8004476:	060d      	lsls	r5, r1, #24
 8004478:	d50b      	bpl.n	8004492 <_printf_i+0xa2>
 800447a:	6805      	ldr	r5, [r0, #0]
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	2d00      	cmp	r5, #0
 8004480:	da03      	bge.n	800448a <_printf_i+0x9a>
 8004482:	232d      	movs	r3, #45	; 0x2d
 8004484:	9a04      	ldr	r2, [sp, #16]
 8004486:	426d      	negs	r5, r5
 8004488:	7013      	strb	r3, [r2, #0]
 800448a:	4b5f      	ldr	r3, [pc, #380]	; (8004608 <_printf_i+0x218>)
 800448c:	270a      	movs	r7, #10
 800448e:	9303      	str	r3, [sp, #12]
 8004490:	e01b      	b.n	80044ca <_printf_i+0xda>
 8004492:	6805      	ldr	r5, [r0, #0]
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	0649      	lsls	r1, r1, #25
 8004498:	d5f1      	bpl.n	800447e <_printf_i+0x8e>
 800449a:	b22d      	sxth	r5, r5
 800449c:	e7ef      	b.n	800447e <_printf_i+0x8e>
 800449e:	680d      	ldr	r5, [r1, #0]
 80044a0:	6819      	ldr	r1, [r3, #0]
 80044a2:	1d08      	adds	r0, r1, #4
 80044a4:	6018      	str	r0, [r3, #0]
 80044a6:	062e      	lsls	r6, r5, #24
 80044a8:	d501      	bpl.n	80044ae <_printf_i+0xbe>
 80044aa:	680d      	ldr	r5, [r1, #0]
 80044ac:	e003      	b.n	80044b6 <_printf_i+0xc6>
 80044ae:	066d      	lsls	r5, r5, #25
 80044b0:	d5fb      	bpl.n	80044aa <_printf_i+0xba>
 80044b2:	680d      	ldr	r5, [r1, #0]
 80044b4:	b2ad      	uxth	r5, r5
 80044b6:	4b54      	ldr	r3, [pc, #336]	; (8004608 <_printf_i+0x218>)
 80044b8:	2708      	movs	r7, #8
 80044ba:	9303      	str	r3, [sp, #12]
 80044bc:	2a6f      	cmp	r2, #111	; 0x6f
 80044be:	d000      	beq.n	80044c2 <_printf_i+0xd2>
 80044c0:	3702      	adds	r7, #2
 80044c2:	0023      	movs	r3, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	3343      	adds	r3, #67	; 0x43
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	60a3      	str	r3, [r4, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db03      	blt.n	80044da <_printf_i+0xea>
 80044d2:	2104      	movs	r1, #4
 80044d4:	6822      	ldr	r2, [r4, #0]
 80044d6:	438a      	bics	r2, r1
 80044d8:	6022      	str	r2, [r4, #0]
 80044da:	2d00      	cmp	r5, #0
 80044dc:	d102      	bne.n	80044e4 <_printf_i+0xf4>
 80044de:	9e04      	ldr	r6, [sp, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <_printf_i+0x10e>
 80044e4:	9e04      	ldr	r6, [sp, #16]
 80044e6:	0028      	movs	r0, r5
 80044e8:	0039      	movs	r1, r7
 80044ea:	f7fb fe99 	bl	8000220 <__aeabi_uidivmod>
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	3e01      	subs	r6, #1
 80044f2:	5c5b      	ldrb	r3, [r3, r1]
 80044f4:	7033      	strb	r3, [r6, #0]
 80044f6:	002b      	movs	r3, r5
 80044f8:	0005      	movs	r5, r0
 80044fa:	429f      	cmp	r7, r3
 80044fc:	d9f3      	bls.n	80044e6 <_printf_i+0xf6>
 80044fe:	2f08      	cmp	r7, #8
 8004500:	d109      	bne.n	8004516 <_printf_i+0x126>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d506      	bpl.n	8004516 <_printf_i+0x126>
 8004508:	6862      	ldr	r2, [r4, #4]
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	dc02      	bgt.n	8004516 <_printf_i+0x126>
 8004510:	2330      	movs	r3, #48	; 0x30
 8004512:	3e01      	subs	r6, #1
 8004514:	7033      	strb	r3, [r6, #0]
 8004516:	9b04      	ldr	r3, [sp, #16]
 8004518:	1b9b      	subs	r3, r3, r6
 800451a:	6123      	str	r3, [r4, #16]
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	0021      	movs	r1, r4
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	9805      	ldr	r0, [sp, #20]
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	aa09      	add	r2, sp, #36	; 0x24
 8004528:	f7ff fef2 	bl	8004310 <_printf_common>
 800452c:	3001      	adds	r0, #1
 800452e:	d147      	bne.n	80045c0 <_printf_i+0x1d0>
 8004530:	2001      	movs	r0, #1
 8004532:	4240      	negs	r0, r0
 8004534:	b00b      	add	sp, #44	; 0x2c
 8004536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004538:	2220      	movs	r2, #32
 800453a:	6809      	ldr	r1, [r1, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	6022      	str	r2, [r4, #0]
 8004540:	2278      	movs	r2, #120	; 0x78
 8004542:	4932      	ldr	r1, [pc, #200]	; (800460c <_printf_i+0x21c>)
 8004544:	9103      	str	r1, [sp, #12]
 8004546:	0021      	movs	r1, r4
 8004548:	3145      	adds	r1, #69	; 0x45
 800454a:	700a      	strb	r2, [r1, #0]
 800454c:	6819      	ldr	r1, [r3, #0]
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	c920      	ldmia	r1!, {r5}
 8004552:	0610      	lsls	r0, r2, #24
 8004554:	d402      	bmi.n	800455c <_printf_i+0x16c>
 8004556:	0650      	lsls	r0, r2, #25
 8004558:	d500      	bpl.n	800455c <_printf_i+0x16c>
 800455a:	b2ad      	uxth	r5, r5
 800455c:	6019      	str	r1, [r3, #0]
 800455e:	07d3      	lsls	r3, r2, #31
 8004560:	d502      	bpl.n	8004568 <_printf_i+0x178>
 8004562:	2320      	movs	r3, #32
 8004564:	4313      	orrs	r3, r2
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	2710      	movs	r7, #16
 800456a:	2d00      	cmp	r5, #0
 800456c:	d1a9      	bne.n	80044c2 <_printf_i+0xd2>
 800456e:	2220      	movs	r2, #32
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	4393      	bics	r3, r2
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	e7a4      	b.n	80044c2 <_printf_i+0xd2>
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	680d      	ldr	r5, [r1, #0]
 800457c:	1d10      	adds	r0, r2, #4
 800457e:	6949      	ldr	r1, [r1, #20]
 8004580:	6018      	str	r0, [r3, #0]
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	062e      	lsls	r6, r5, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0x19c>
 8004588:	6019      	str	r1, [r3, #0]
 800458a:	e002      	b.n	8004592 <_printf_i+0x1a2>
 800458c:	066d      	lsls	r5, r5, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0x198>
 8004590:	8019      	strh	r1, [r3, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	9e04      	ldr	r6, [sp, #16]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	e7c0      	b.n	800451c <_printf_i+0x12c>
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	1d11      	adds	r1, r2, #4
 800459e:	6019      	str	r1, [r3, #0]
 80045a0:	6816      	ldr	r6, [r2, #0]
 80045a2:	2100      	movs	r1, #0
 80045a4:	0030      	movs	r0, r6
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	f000 f858 	bl	800465c <memchr>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d001      	beq.n	80045b4 <_printf_i+0x1c4>
 80045b0:	1b80      	subs	r0, r0, r6
 80045b2:	6060      	str	r0, [r4, #4]
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9a04      	ldr	r2, [sp, #16]
 80045bc:	7013      	strb	r3, [r2, #0]
 80045be:	e7ad      	b.n	800451c <_printf_i+0x12c>
 80045c0:	0032      	movs	r2, r6
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	9906      	ldr	r1, [sp, #24]
 80045c6:	9805      	ldr	r0, [sp, #20]
 80045c8:	9d07      	ldr	r5, [sp, #28]
 80045ca:	47a8      	blx	r5
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0af      	beq.n	8004530 <_printf_i+0x140>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d415      	bmi.n	8004602 <_printf_i+0x212>
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	68e0      	ldr	r0, [r4, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	daaa      	bge.n	8004534 <_printf_i+0x144>
 80045de:	0018      	movs	r0, r3
 80045e0:	e7a8      	b.n	8004534 <_printf_i+0x144>
 80045e2:	0022      	movs	r2, r4
 80045e4:	2301      	movs	r3, #1
 80045e6:	9906      	ldr	r1, [sp, #24]
 80045e8:	9805      	ldr	r0, [sp, #20]
 80045ea:	9e07      	ldr	r6, [sp, #28]
 80045ec:	3219      	adds	r2, #25
 80045ee:	47b0      	blx	r6
 80045f0:	3001      	adds	r0, #1
 80045f2:	d09d      	beq.n	8004530 <_printf_i+0x140>
 80045f4:	3501      	adds	r5, #1
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dcf0      	bgt.n	80045e2 <_printf_i+0x1f2>
 8004600:	e7e9      	b.n	80045d6 <_printf_i+0x1e6>
 8004602:	2500      	movs	r5, #0
 8004604:	e7f7      	b.n	80045f6 <_printf_i+0x206>
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	08004815 	.word	0x08004815
 800460c:	08004826 	.word	0x08004826

08004610 <memmove>:
 8004610:	b510      	push	{r4, lr}
 8004612:	4288      	cmp	r0, r1
 8004614:	d902      	bls.n	800461c <memmove+0xc>
 8004616:	188b      	adds	r3, r1, r2
 8004618:	4298      	cmp	r0, r3
 800461a:	d303      	bcc.n	8004624 <memmove+0x14>
 800461c:	2300      	movs	r3, #0
 800461e:	e007      	b.n	8004630 <memmove+0x20>
 8004620:	5c8b      	ldrb	r3, [r1, r2]
 8004622:	5483      	strb	r3, [r0, r2]
 8004624:	3a01      	subs	r2, #1
 8004626:	d2fb      	bcs.n	8004620 <memmove+0x10>
 8004628:	bd10      	pop	{r4, pc}
 800462a:	5ccc      	ldrb	r4, [r1, r3]
 800462c:	54c4      	strb	r4, [r0, r3]
 800462e:	3301      	adds	r3, #1
 8004630:	429a      	cmp	r2, r3
 8004632:	d1fa      	bne.n	800462a <memmove+0x1a>
 8004634:	e7f8      	b.n	8004628 <memmove+0x18>
	...

08004638 <_sbrk_r>:
 8004638:	2300      	movs	r3, #0
 800463a:	b570      	push	{r4, r5, r6, lr}
 800463c:	4d06      	ldr	r5, [pc, #24]	; (8004658 <_sbrk_r+0x20>)
 800463e:	0004      	movs	r4, r0
 8004640:	0008      	movs	r0, r1
 8004642:	602b      	str	r3, [r5, #0]
 8004644:	f7fd f836 	bl	80016b4 <_sbrk>
 8004648:	1c43      	adds	r3, r0, #1
 800464a:	d103      	bne.n	8004654 <_sbrk_r+0x1c>
 800464c:	682b      	ldr	r3, [r5, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d000      	beq.n	8004654 <_sbrk_r+0x1c>
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	200004d4 	.word	0x200004d4

0800465c <memchr>:
 800465c:	b2c9      	uxtb	r1, r1
 800465e:	1882      	adds	r2, r0, r2
 8004660:	4290      	cmp	r0, r2
 8004662:	d101      	bne.n	8004668 <memchr+0xc>
 8004664:	2000      	movs	r0, #0
 8004666:	4770      	bx	lr
 8004668:	7803      	ldrb	r3, [r0, #0]
 800466a:	428b      	cmp	r3, r1
 800466c:	d0fb      	beq.n	8004666 <memchr+0xa>
 800466e:	3001      	adds	r0, #1
 8004670:	e7f6      	b.n	8004660 <memchr+0x4>

08004672 <memcpy>:
 8004672:	2300      	movs	r3, #0
 8004674:	b510      	push	{r4, lr}
 8004676:	429a      	cmp	r2, r3
 8004678:	d100      	bne.n	800467c <memcpy+0xa>
 800467a:	bd10      	pop	{r4, pc}
 800467c:	5ccc      	ldrb	r4, [r1, r3]
 800467e:	54c4      	strb	r4, [r0, r3]
 8004680:	3301      	adds	r3, #1
 8004682:	e7f8      	b.n	8004676 <memcpy+0x4>

08004684 <_realloc_r>:
 8004684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004686:	0007      	movs	r7, r0
 8004688:	000e      	movs	r6, r1
 800468a:	0014      	movs	r4, r2
 800468c:	2900      	cmp	r1, #0
 800468e:	d105      	bne.n	800469c <_realloc_r+0x18>
 8004690:	0011      	movs	r1, r2
 8004692:	f7ff fc49 	bl	8003f28 <_malloc_r>
 8004696:	0005      	movs	r5, r0
 8004698:	0028      	movs	r0, r5
 800469a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800469c:	2a00      	cmp	r2, #0
 800469e:	d103      	bne.n	80046a8 <_realloc_r+0x24>
 80046a0:	f7ff fbd6 	bl	8003e50 <_free_r>
 80046a4:	0025      	movs	r5, r4
 80046a6:	e7f7      	b.n	8004698 <_realloc_r+0x14>
 80046a8:	f000 f81b 	bl	80046e2 <_malloc_usable_size_r>
 80046ac:	9001      	str	r0, [sp, #4]
 80046ae:	4284      	cmp	r4, r0
 80046b0:	d803      	bhi.n	80046ba <_realloc_r+0x36>
 80046b2:	0035      	movs	r5, r6
 80046b4:	0843      	lsrs	r3, r0, #1
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d3ee      	bcc.n	8004698 <_realloc_r+0x14>
 80046ba:	0021      	movs	r1, r4
 80046bc:	0038      	movs	r0, r7
 80046be:	f7ff fc33 	bl	8003f28 <_malloc_r>
 80046c2:	1e05      	subs	r5, r0, #0
 80046c4:	d0e8      	beq.n	8004698 <_realloc_r+0x14>
 80046c6:	9b01      	ldr	r3, [sp, #4]
 80046c8:	0022      	movs	r2, r4
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d900      	bls.n	80046d0 <_realloc_r+0x4c>
 80046ce:	001a      	movs	r2, r3
 80046d0:	0031      	movs	r1, r6
 80046d2:	0028      	movs	r0, r5
 80046d4:	f7ff ffcd 	bl	8004672 <memcpy>
 80046d8:	0031      	movs	r1, r6
 80046da:	0038      	movs	r0, r7
 80046dc:	f7ff fbb8 	bl	8003e50 <_free_r>
 80046e0:	e7da      	b.n	8004698 <_realloc_r+0x14>

080046e2 <_malloc_usable_size_r>:
 80046e2:	1f0b      	subs	r3, r1, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1f18      	subs	r0, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da01      	bge.n	80046f0 <_malloc_usable_size_r+0xe>
 80046ec:	580b      	ldr	r3, [r1, r0]
 80046ee:	18c0      	adds	r0, r0, r3
 80046f0:	4770      	bx	lr
	...

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
