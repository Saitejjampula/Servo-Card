
VDD_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002748  08002748  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002748  08002748  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002748  08002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800275c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800275c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a3e  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001463  00000000  00000000  00025ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e4  00000000  00000000  000275b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013eb3  00000000  00000000  00027a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007242  00000000  00000000  0003b94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f78b  00000000  00000000  00042b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000016f4  00000000  00000000  000c231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000c3a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002670 	.word	0x08002670

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002670 	.word	0x08002670

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_fdiv>:
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	464f      	mov	r7, r9
 800021c:	4646      	mov	r6, r8
 800021e:	46d6      	mov	lr, sl
 8000220:	0245      	lsls	r5, r0, #9
 8000222:	b5c0      	push	{r6, r7, lr}
 8000224:	0047      	lsls	r7, r0, #1
 8000226:	1c0c      	adds	r4, r1, #0
 8000228:	0a6d      	lsrs	r5, r5, #9
 800022a:	0e3f      	lsrs	r7, r7, #24
 800022c:	0fc6      	lsrs	r6, r0, #31
 800022e:	2f00      	cmp	r7, #0
 8000230:	d100      	bne.n	8000234 <__aeabi_fdiv+0x1c>
 8000232:	e06f      	b.n	8000314 <__aeabi_fdiv+0xfc>
 8000234:	2fff      	cmp	r7, #255	; 0xff
 8000236:	d100      	bne.n	800023a <__aeabi_fdiv+0x22>
 8000238:	e074      	b.n	8000324 <__aeabi_fdiv+0x10c>
 800023a:	2300      	movs	r3, #0
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	4699      	mov	r9, r3
 8000240:	469a      	mov	sl, r3
 8000242:	00ed      	lsls	r5, r5, #3
 8000244:	04d2      	lsls	r2, r2, #19
 8000246:	4315      	orrs	r5, r2
 8000248:	3f7f      	subs	r7, #127	; 0x7f
 800024a:	0263      	lsls	r3, r4, #9
 800024c:	0a5b      	lsrs	r3, r3, #9
 800024e:	4698      	mov	r8, r3
 8000250:	0063      	lsls	r3, r4, #1
 8000252:	0e1b      	lsrs	r3, r3, #24
 8000254:	0fe4      	lsrs	r4, r4, #31
 8000256:	2b00      	cmp	r3, #0
 8000258:	d04d      	beq.n	80002f6 <__aeabi_fdiv+0xde>
 800025a:	2bff      	cmp	r3, #255	; 0xff
 800025c:	d045      	beq.n	80002ea <__aeabi_fdiv+0xd2>
 800025e:	4642      	mov	r2, r8
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	00d2      	lsls	r2, r2, #3
 8000264:	04c9      	lsls	r1, r1, #19
 8000266:	4311      	orrs	r1, r2
 8000268:	4688      	mov	r8, r1
 800026a:	2200      	movs	r2, #0
 800026c:	3b7f      	subs	r3, #127	; 0x7f
 800026e:	0031      	movs	r1, r6
 8000270:	1aff      	subs	r7, r7, r3
 8000272:	464b      	mov	r3, r9
 8000274:	4061      	eors	r1, r4
 8000276:	b2c9      	uxtb	r1, r1
 8000278:	2b0f      	cmp	r3, #15
 800027a:	d900      	bls.n	800027e <__aeabi_fdiv+0x66>
 800027c:	e0b8      	b.n	80003f0 <__aeabi_fdiv+0x1d8>
 800027e:	4870      	ldr	r0, [pc, #448]	; (8000440 <__aeabi_fdiv+0x228>)
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	58c3      	ldr	r3, [r0, r3]
 8000284:	469f      	mov	pc, r3
 8000286:	2300      	movs	r3, #0
 8000288:	4698      	mov	r8, r3
 800028a:	0026      	movs	r6, r4
 800028c:	4645      	mov	r5, r8
 800028e:	4692      	mov	sl, r2
 8000290:	4653      	mov	r3, sl
 8000292:	2b02      	cmp	r3, #2
 8000294:	d100      	bne.n	8000298 <__aeabi_fdiv+0x80>
 8000296:	e08d      	b.n	80003b4 <__aeabi_fdiv+0x19c>
 8000298:	2b03      	cmp	r3, #3
 800029a:	d100      	bne.n	800029e <__aeabi_fdiv+0x86>
 800029c:	e0a1      	b.n	80003e2 <__aeabi_fdiv+0x1ca>
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d018      	beq.n	80002d4 <__aeabi_fdiv+0xbc>
 80002a2:	003b      	movs	r3, r7
 80002a4:	337f      	adds	r3, #127	; 0x7f
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	dd6d      	ble.n	8000386 <__aeabi_fdiv+0x16e>
 80002aa:	076a      	lsls	r2, r5, #29
 80002ac:	d004      	beq.n	80002b8 <__aeabi_fdiv+0xa0>
 80002ae:	220f      	movs	r2, #15
 80002b0:	402a      	ands	r2, r5
 80002b2:	2a04      	cmp	r2, #4
 80002b4:	d000      	beq.n	80002b8 <__aeabi_fdiv+0xa0>
 80002b6:	3504      	adds	r5, #4
 80002b8:	012a      	lsls	r2, r5, #4
 80002ba:	d503      	bpl.n	80002c4 <__aeabi_fdiv+0xac>
 80002bc:	4b61      	ldr	r3, [pc, #388]	; (8000444 <__aeabi_fdiv+0x22c>)
 80002be:	401d      	ands	r5, r3
 80002c0:	003b      	movs	r3, r7
 80002c2:	3380      	adds	r3, #128	; 0x80
 80002c4:	2bfe      	cmp	r3, #254	; 0xfe
 80002c6:	dd00      	ble.n	80002ca <__aeabi_fdiv+0xb2>
 80002c8:	e074      	b.n	80003b4 <__aeabi_fdiv+0x19c>
 80002ca:	01aa      	lsls	r2, r5, #6
 80002cc:	0a52      	lsrs	r2, r2, #9
 80002ce:	b2d8      	uxtb	r0, r3
 80002d0:	e002      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80002d2:	000e      	movs	r6, r1
 80002d4:	2000      	movs	r0, #0
 80002d6:	2200      	movs	r2, #0
 80002d8:	05c0      	lsls	r0, r0, #23
 80002da:	07f6      	lsls	r6, r6, #31
 80002dc:	4310      	orrs	r0, r2
 80002de:	4330      	orrs	r0, r6
 80002e0:	bce0      	pop	{r5, r6, r7}
 80002e2:	46ba      	mov	sl, r7
 80002e4:	46b1      	mov	r9, r6
 80002e6:	46a8      	mov	r8, r5
 80002e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ea:	4643      	mov	r3, r8
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d13f      	bne.n	8000370 <__aeabi_fdiv+0x158>
 80002f0:	2202      	movs	r2, #2
 80002f2:	3fff      	subs	r7, #255	; 0xff
 80002f4:	e003      	b.n	80002fe <__aeabi_fdiv+0xe6>
 80002f6:	4643      	mov	r3, r8
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d12d      	bne.n	8000358 <__aeabi_fdiv+0x140>
 80002fc:	2201      	movs	r2, #1
 80002fe:	0031      	movs	r1, r6
 8000300:	464b      	mov	r3, r9
 8000302:	4061      	eors	r1, r4
 8000304:	b2c9      	uxtb	r1, r1
 8000306:	4313      	orrs	r3, r2
 8000308:	2b0f      	cmp	r3, #15
 800030a:	d838      	bhi.n	800037e <__aeabi_fdiv+0x166>
 800030c:	484e      	ldr	r0, [pc, #312]	; (8000448 <__aeabi_fdiv+0x230>)
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	58c3      	ldr	r3, [r0, r3]
 8000312:	469f      	mov	pc, r3
 8000314:	2d00      	cmp	r5, #0
 8000316:	d113      	bne.n	8000340 <__aeabi_fdiv+0x128>
 8000318:	2304      	movs	r3, #4
 800031a:	4699      	mov	r9, r3
 800031c:	3b03      	subs	r3, #3
 800031e:	2700      	movs	r7, #0
 8000320:	469a      	mov	sl, r3
 8000322:	e792      	b.n	800024a <__aeabi_fdiv+0x32>
 8000324:	2d00      	cmp	r5, #0
 8000326:	d105      	bne.n	8000334 <__aeabi_fdiv+0x11c>
 8000328:	2308      	movs	r3, #8
 800032a:	4699      	mov	r9, r3
 800032c:	3b06      	subs	r3, #6
 800032e:	27ff      	movs	r7, #255	; 0xff
 8000330:	469a      	mov	sl, r3
 8000332:	e78a      	b.n	800024a <__aeabi_fdiv+0x32>
 8000334:	230c      	movs	r3, #12
 8000336:	4699      	mov	r9, r3
 8000338:	3b09      	subs	r3, #9
 800033a:	27ff      	movs	r7, #255	; 0xff
 800033c:	469a      	mov	sl, r3
 800033e:	e784      	b.n	800024a <__aeabi_fdiv+0x32>
 8000340:	0028      	movs	r0, r5
 8000342:	f000 f8d5 	bl	80004f0 <__clzsi2>
 8000346:	2776      	movs	r7, #118	; 0x76
 8000348:	1f43      	subs	r3, r0, #5
 800034a:	409d      	lsls	r5, r3
 800034c:	2300      	movs	r3, #0
 800034e:	427f      	negs	r7, r7
 8000350:	4699      	mov	r9, r3
 8000352:	469a      	mov	sl, r3
 8000354:	1a3f      	subs	r7, r7, r0
 8000356:	e778      	b.n	800024a <__aeabi_fdiv+0x32>
 8000358:	4640      	mov	r0, r8
 800035a:	f000 f8c9 	bl	80004f0 <__clzsi2>
 800035e:	4642      	mov	r2, r8
 8000360:	1f43      	subs	r3, r0, #5
 8000362:	409a      	lsls	r2, r3
 8000364:	2376      	movs	r3, #118	; 0x76
 8000366:	425b      	negs	r3, r3
 8000368:	4690      	mov	r8, r2
 800036a:	1a1b      	subs	r3, r3, r0
 800036c:	2200      	movs	r2, #0
 800036e:	e77e      	b.n	800026e <__aeabi_fdiv+0x56>
 8000370:	2303      	movs	r3, #3
 8000372:	464a      	mov	r2, r9
 8000374:	431a      	orrs	r2, r3
 8000376:	4691      	mov	r9, r2
 8000378:	33fc      	adds	r3, #252	; 0xfc
 800037a:	2203      	movs	r2, #3
 800037c:	e777      	b.n	800026e <__aeabi_fdiv+0x56>
 800037e:	000e      	movs	r6, r1
 8000380:	20ff      	movs	r0, #255	; 0xff
 8000382:	2200      	movs	r2, #0
 8000384:	e7a8      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 8000386:	2201      	movs	r2, #1
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	2b1b      	cmp	r3, #27
 800038c:	dca2      	bgt.n	80002d4 <__aeabi_fdiv+0xbc>
 800038e:	379e      	adds	r7, #158	; 0x9e
 8000390:	002a      	movs	r2, r5
 8000392:	40bd      	lsls	r5, r7
 8000394:	40da      	lsrs	r2, r3
 8000396:	1e6b      	subs	r3, r5, #1
 8000398:	419d      	sbcs	r5, r3
 800039a:	4315      	orrs	r5, r2
 800039c:	076a      	lsls	r2, r5, #29
 800039e:	d004      	beq.n	80003aa <__aeabi_fdiv+0x192>
 80003a0:	220f      	movs	r2, #15
 80003a2:	402a      	ands	r2, r5
 80003a4:	2a04      	cmp	r2, #4
 80003a6:	d000      	beq.n	80003aa <__aeabi_fdiv+0x192>
 80003a8:	3504      	adds	r5, #4
 80003aa:	016a      	lsls	r2, r5, #5
 80003ac:	d544      	bpl.n	8000438 <__aeabi_fdiv+0x220>
 80003ae:	2001      	movs	r0, #1
 80003b0:	2200      	movs	r2, #0
 80003b2:	e791      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80003b4:	20ff      	movs	r0, #255	; 0xff
 80003b6:	2200      	movs	r2, #0
 80003b8:	e78e      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	2600      	movs	r6, #0
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	03d2      	lsls	r2, r2, #15
 80003c2:	e789      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80003c4:	2300      	movs	r3, #0
 80003c6:	4698      	mov	r8, r3
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	03d2      	lsls	r2, r2, #15
 80003cc:	4215      	tst	r5, r2
 80003ce:	d008      	beq.n	80003e2 <__aeabi_fdiv+0x1ca>
 80003d0:	4643      	mov	r3, r8
 80003d2:	4213      	tst	r3, r2
 80003d4:	d105      	bne.n	80003e2 <__aeabi_fdiv+0x1ca>
 80003d6:	431a      	orrs	r2, r3
 80003d8:	0252      	lsls	r2, r2, #9
 80003da:	0026      	movs	r6, r4
 80003dc:	20ff      	movs	r0, #255	; 0xff
 80003de:	0a52      	lsrs	r2, r2, #9
 80003e0:	e77a      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	03d2      	lsls	r2, r2, #15
 80003e6:	432a      	orrs	r2, r5
 80003e8:	0252      	lsls	r2, r2, #9
 80003ea:	20ff      	movs	r0, #255	; 0xff
 80003ec:	0a52      	lsrs	r2, r2, #9
 80003ee:	e773      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 80003f0:	4642      	mov	r2, r8
 80003f2:	016b      	lsls	r3, r5, #5
 80003f4:	0155      	lsls	r5, r2, #5
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d21a      	bcs.n	8000430 <__aeabi_fdiv+0x218>
 80003fa:	201b      	movs	r0, #27
 80003fc:	2200      	movs	r2, #0
 80003fe:	3f01      	subs	r7, #1
 8000400:	2601      	movs	r6, #1
 8000402:	001c      	movs	r4, r3
 8000404:	0052      	lsls	r2, r2, #1
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	2c00      	cmp	r4, #0
 800040a:	db01      	blt.n	8000410 <__aeabi_fdiv+0x1f8>
 800040c:	429d      	cmp	r5, r3
 800040e:	d801      	bhi.n	8000414 <__aeabi_fdiv+0x1fc>
 8000410:	1b5b      	subs	r3, r3, r5
 8000412:	4332      	orrs	r2, r6
 8000414:	3801      	subs	r0, #1
 8000416:	2800      	cmp	r0, #0
 8000418:	d1f3      	bne.n	8000402 <__aeabi_fdiv+0x1ea>
 800041a:	1e58      	subs	r0, r3, #1
 800041c:	4183      	sbcs	r3, r0
 800041e:	4313      	orrs	r3, r2
 8000420:	001d      	movs	r5, r3
 8000422:	003b      	movs	r3, r7
 8000424:	337f      	adds	r3, #127	; 0x7f
 8000426:	000e      	movs	r6, r1
 8000428:	2b00      	cmp	r3, #0
 800042a:	dd00      	ble.n	800042e <__aeabi_fdiv+0x216>
 800042c:	e73d      	b.n	80002aa <__aeabi_fdiv+0x92>
 800042e:	e7aa      	b.n	8000386 <__aeabi_fdiv+0x16e>
 8000430:	201a      	movs	r0, #26
 8000432:	2201      	movs	r2, #1
 8000434:	1b5b      	subs	r3, r3, r5
 8000436:	e7e3      	b.n	8000400 <__aeabi_fdiv+0x1e8>
 8000438:	01aa      	lsls	r2, r5, #6
 800043a:	2000      	movs	r0, #0
 800043c:	0a52      	lsrs	r2, r2, #9
 800043e:	e74b      	b.n	80002d8 <__aeabi_fdiv+0xc0>
 8000440:	08002688 	.word	0x08002688
 8000444:	f7ffffff 	.word	0xf7ffffff
 8000448:	080026c8 	.word	0x080026c8

0800044c <__aeabi_i2f>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	2800      	cmp	r0, #0
 8000450:	d013      	beq.n	800047a <__aeabi_i2f+0x2e>
 8000452:	17c3      	asrs	r3, r0, #31
 8000454:	18c5      	adds	r5, r0, r3
 8000456:	405d      	eors	r5, r3
 8000458:	0fc4      	lsrs	r4, r0, #31
 800045a:	0028      	movs	r0, r5
 800045c:	f000 f848 	bl	80004f0 <__clzsi2>
 8000460:	239e      	movs	r3, #158	; 0x9e
 8000462:	0001      	movs	r1, r0
 8000464:	1a1b      	subs	r3, r3, r0
 8000466:	2b96      	cmp	r3, #150	; 0x96
 8000468:	dc0f      	bgt.n	800048a <__aeabi_i2f+0x3e>
 800046a:	2808      	cmp	r0, #8
 800046c:	d031      	beq.n	80004d2 <__aeabi_i2f+0x86>
 800046e:	3908      	subs	r1, #8
 8000470:	408d      	lsls	r5, r1
 8000472:	026d      	lsls	r5, r5, #9
 8000474:	0a6d      	lsrs	r5, r5, #9
 8000476:	b2d8      	uxtb	r0, r3
 8000478:	e002      	b.n	8000480 <__aeabi_i2f+0x34>
 800047a:	2400      	movs	r4, #0
 800047c:	2000      	movs	r0, #0
 800047e:	2500      	movs	r5, #0
 8000480:	05c0      	lsls	r0, r0, #23
 8000482:	4328      	orrs	r0, r5
 8000484:	07e4      	lsls	r4, r4, #31
 8000486:	4320      	orrs	r0, r4
 8000488:	bd70      	pop	{r4, r5, r6, pc}
 800048a:	2b99      	cmp	r3, #153	; 0x99
 800048c:	dd0c      	ble.n	80004a8 <__aeabi_i2f+0x5c>
 800048e:	2205      	movs	r2, #5
 8000490:	1a12      	subs	r2, r2, r0
 8000492:	0028      	movs	r0, r5
 8000494:	40d0      	lsrs	r0, r2
 8000496:	0002      	movs	r2, r0
 8000498:	0008      	movs	r0, r1
 800049a:	301b      	adds	r0, #27
 800049c:	4085      	lsls	r5, r0
 800049e:	0028      	movs	r0, r5
 80004a0:	1e45      	subs	r5, r0, #1
 80004a2:	41a8      	sbcs	r0, r5
 80004a4:	4302      	orrs	r2, r0
 80004a6:	0015      	movs	r5, r2
 80004a8:	2905      	cmp	r1, #5
 80004aa:	dc16      	bgt.n	80004da <__aeabi_i2f+0x8e>
 80004ac:	002a      	movs	r2, r5
 80004ae:	480f      	ldr	r0, [pc, #60]	; (80004ec <__aeabi_i2f+0xa0>)
 80004b0:	4002      	ands	r2, r0
 80004b2:	076e      	lsls	r6, r5, #29
 80004b4:	d009      	beq.n	80004ca <__aeabi_i2f+0x7e>
 80004b6:	260f      	movs	r6, #15
 80004b8:	4035      	ands	r5, r6
 80004ba:	2d04      	cmp	r5, #4
 80004bc:	d005      	beq.n	80004ca <__aeabi_i2f+0x7e>
 80004be:	3204      	adds	r2, #4
 80004c0:	0155      	lsls	r5, r2, #5
 80004c2:	d502      	bpl.n	80004ca <__aeabi_i2f+0x7e>
 80004c4:	239f      	movs	r3, #159	; 0x9f
 80004c6:	4002      	ands	r2, r0
 80004c8:	1a5b      	subs	r3, r3, r1
 80004ca:	0192      	lsls	r2, r2, #6
 80004cc:	0a55      	lsrs	r5, r2, #9
 80004ce:	b2d8      	uxtb	r0, r3
 80004d0:	e7d6      	b.n	8000480 <__aeabi_i2f+0x34>
 80004d2:	026d      	lsls	r5, r5, #9
 80004d4:	2096      	movs	r0, #150	; 0x96
 80004d6:	0a6d      	lsrs	r5, r5, #9
 80004d8:	e7d2      	b.n	8000480 <__aeabi_i2f+0x34>
 80004da:	1f4a      	subs	r2, r1, #5
 80004dc:	4095      	lsls	r5, r2
 80004de:	002a      	movs	r2, r5
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_i2f+0xa0>)
 80004e2:	4002      	ands	r2, r0
 80004e4:	076e      	lsls	r6, r5, #29
 80004e6:	d0f0      	beq.n	80004ca <__aeabi_i2f+0x7e>
 80004e8:	e7e5      	b.n	80004b6 <__aeabi_i2f+0x6a>
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	fbffffff 	.word	0xfbffffff

080004f0 <__clzsi2>:
 80004f0:	211c      	movs	r1, #28
 80004f2:	2301      	movs	r3, #1
 80004f4:	041b      	lsls	r3, r3, #16
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d301      	bcc.n	80004fe <__clzsi2+0xe>
 80004fa:	0c00      	lsrs	r0, r0, #16
 80004fc:	3910      	subs	r1, #16
 80004fe:	0a1b      	lsrs	r3, r3, #8
 8000500:	4298      	cmp	r0, r3
 8000502:	d301      	bcc.n	8000508 <__clzsi2+0x18>
 8000504:	0a00      	lsrs	r0, r0, #8
 8000506:	3908      	subs	r1, #8
 8000508:	091b      	lsrs	r3, r3, #4
 800050a:	4298      	cmp	r0, r3
 800050c:	d301      	bcc.n	8000512 <__clzsi2+0x22>
 800050e:	0900      	lsrs	r0, r0, #4
 8000510:	3904      	subs	r1, #4
 8000512:	a202      	add	r2, pc, #8	; (adr r2, 800051c <__clzsi2+0x2c>)
 8000514:	5c10      	ldrb	r0, [r2, r0]
 8000516:	1840      	adds	r0, r0, r1
 8000518:	4770      	bx	lr
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	02020304 	.word	0x02020304
 8000520:	01010101 	.word	0x01010101
	...

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000532:	f000 f9a9 	bl	8000888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000536:	f000 f835 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053a:	f000 f8e7 	bl	800070c <MX_GPIO_Init>
  MX_ADC1_Init();
 800053e:	f000 f879 	bl	8000634 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fa26 	bl	8000994 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0x70>)
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fa00 	bl	8001950 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 8000550:	200a      	movs	r0, #10
 8000552:	f000 fa1f 	bl	8000994 <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0x70>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fd51 	bl	8001000 <HAL_ADC_Start>
  uint16_t vbat_value;

  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <main+0x70>)
 8000560:	2164      	movs	r1, #100	; 0x64
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fdd6 	bl	8001114 <HAL_ADC_PollForConversion>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d106      	bne.n	800057a <main+0x4e>
      vbat_value = HAL_ADC_GetValue(&hadc1);
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <main+0x70>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fe64 	bl	800123c <HAL_ADC_GetValue>
 8000574:	0002      	movs	r2, r0
 8000576:	1dbb      	adds	r3, r7, #6
 8000578:	801a      	strh	r2, [r3, #0]
  }
  HAL_ADC_Stop(&hadc1);
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <main+0x70>)
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fd8d 	bl	800109c <HAL_ADC_Stop>

  float vbat_voltage = (1.2f * 4095) / vbat_value; // 4095 is the maximum ADC value for 12-bit resolution
 8000582:	1dbb      	adds	r3, r7, #6
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	0018      	movs	r0, r3
 8000588:	f7ff ff60 	bl	800044c <__aeabi_i2f>
 800058c:	1c03      	adds	r3, r0, #0
 800058e:	1c19      	adds	r1, r3, #0
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <main+0x74>)
 8000592:	f7ff fe41 	bl	8000218 <__aeabi_fdiv>
 8000596:	1c03      	adds	r3, r0, #0
 8000598:	603b      	str	r3, [r7, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059a:	e7fe      	b.n	800059a <main+0x6e>
 800059c:	20000028 	.word	0x20000028
 80005a0:	45999000 	.word	0x45999000

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b093      	sub	sp, #76	; 0x4c
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2414      	movs	r4, #20
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2334      	movs	r3, #52	; 0x34
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f002 f82f 	bl	8002618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	0018      	movs	r0, r3
 80005be:	2310      	movs	r3, #16
 80005c0:	001a      	movs	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	f002 f828 	bl	8002618 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fb49 	bl	8001c64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2202      	movs	r2, #2
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2240      	movs	r2, #64	; 0x40
 80005ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fb75 	bl	8001ce4 <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005fe:	f000 f8b3 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2207      	movs	r2, #7
 8000606:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2100      	movs	r1, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fe70 	bl	8002304 <HAL_RCC_ClockConfig>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000628:	f000 f89e 	bl	8000768 <Error_Handler>
  }
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b013      	add	sp, #76	; 0x4c
 8000632:	bd90      	pop	{r4, r7, pc}

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	230c      	movs	r3, #12
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f001 ffe8 	bl	8002618 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_ADC1_Init+0xcc>)
 800064a:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <MX_ADC1_Init+0xd0>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	05d2      	lsls	r2, r2, #23
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_ADC1_Init+0xcc>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_ADC1_Init+0xcc>)
 800066a:	2204      	movs	r2, #4
 800066c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000670:	2200      	movs	r2, #0
 8000672:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000676:	2200      	movs	r2, #0
 8000678:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC1_Init+0xcc>)
 800067c:	2200      	movs	r2, #0
 800067e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000682:	2201      	movs	r2, #1
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000688:	2220      	movs	r2, #32
 800068a:	2100      	movs	r1, #0
 800068c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ADC1_Init+0xcc>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ADC1_Init+0xcc>)
 800069c:	222c      	movs	r2, #44	; 0x2c
 800069e:	2100      	movs	r1, #0
 80006a0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006aa:	2207      	movs	r2, #7
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006b6:	223c      	movs	r2, #60	; 0x3c
 80006b8:	2100      	movs	r1, #0
 80006ba:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 faf3 	bl	8000cb0 <HAL_ADC_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006ce:	f000 f84b 	bl	8000768 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <MX_ADC1_Init+0xd4>)
 80006d6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_ADC1_Init+0xcc>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fdb2 	bl	8001254 <HAL_ADC_ConfigChannel>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f838 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b004      	add	sp, #16
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000028 	.word	0x20000028
 8000704:	40012400 	.word	0x40012400
 8000708:	b8004000 	.word	0xb8004000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_GPIO_Init+0x58>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_GPIO_Init+0x58>)
 8000718:	2104      	movs	r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_GPIO_Init+0x58>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	2204      	movs	r2, #4
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_GPIO_Init+0x58>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <MX_GPIO_Init+0x58>)
 8000730:	2120      	movs	r1, #32
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_GPIO_Init+0x58>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073a:	2220      	movs	r2, #32
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_GPIO_Init+0x58>)
 8000744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_GPIO_Init+0x58>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <MX_GPIO_Init+0x58>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b004      	add	sp, #16
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40021000 	.word	0x40021000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	2101      	movs	r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	641a      	str	r2, [r3, #64]	; 0x40
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	2201      	movs	r2, #1
 800078c:	4013      	ands	r3, r2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	0549      	lsls	r1, r1, #21
 800079c:	430a      	orrs	r2, r1
 800079e:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_MspInit+0x44>)
 80007a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	055b      	lsls	r3, r3, #21
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_ADC_MspInit+0x38>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d10d      	bne.n	80007ea <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_ADC_MspInit+0x3c>)
 80007d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_ADC_MspInit+0x3c>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0349      	lsls	r1, r1, #13
 80007d8:	430a      	orrs	r2, r1
 80007da:	641a      	str	r2, [r3, #64]	; 0x40
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_ADC_MspInit+0x3c>)
 80007de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	035b      	lsls	r3, r3, #13
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40012400 	.word	0x40012400
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f89c 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000838:	f7ff fff7 	bl	800082a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000862:	f001 fee1 	bl	8002628 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000866:	f7ff fe61 	bl	800052c <main>

0800086a <LoopForever>:

LoopForever:
  b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   r0, =_estack
 800086c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000878:	08002750 	.word	0x08002750
  ldr r2, =_sbss
 800087c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000880:	20000090 	.word	0x20000090

08000884 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC1_IRQHandler>
	...

08000888 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_Init+0x3c>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_Init+0x3c>)
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0049      	lsls	r1, r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 f810 	bl	80008c8 <HAL_InitTick>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d003      	beq.n	80008b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e001      	b.n	80008b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff ff5e 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
}
 80008bc:	0018      	movs	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	230f      	movs	r3, #15
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_InitTick+0x88>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d02b      	beq.n	8000938 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_InitTick+0x8c>)
 80008e2:	681c      	ldr	r4, [r3, #0]
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <HAL_InitTick+0x88>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	0019      	movs	r1, r3
 80008ea:	23fa      	movs	r3, #250	; 0xfa
 80008ec:	0098      	lsls	r0, r3, #2
 80008ee:	f7ff fc07 	bl	8000100 <__udivsi3>
 80008f2:	0003      	movs	r3, r0
 80008f4:	0019      	movs	r1, r3
 80008f6:	0020      	movs	r0, r4
 80008f8:	f7ff fc02 	bl	8000100 <__udivsi3>
 80008fc:	0003      	movs	r3, r0
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f9a3 	bl	8001c4a <HAL_SYSTICK_Config>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d112      	bne.n	800092e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d80a      	bhi.n	8000924 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
 8000914:	2200      	movs	r2, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f982 	bl	8001c20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_InitTick+0x90>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	e00d      	b.n	8000940 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e008      	b.n	8000940 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e003      	b.n	8000940 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000938:	230f      	movs	r3, #15
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781b      	ldrb	r3, [r3, #0]
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b005      	add	sp, #20
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000008 	.word	0x20000008
 8000954:	20000000 	.word	0x20000000
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	18d2      	adds	r2, r2, r3
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_IncTick+0x20>)
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000008 	.word	0x20000008
 800097c:	2000008c 	.word	0x2000008c

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	; (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000008c 	.word	0x2000008c

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff fff0 	bl	8000980 <HAL_GetTick>
 80009a0:	0003      	movs	r3, r0
 80009a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	f7ff ffe0 	bl	8000980 <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000008 	.word	0x20000008

080009dc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80009ec:	401a      	ands	r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	fe3fffff 	.word	0xfe3fffff

08000a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	23e0      	movs	r3, #224	; 0xe0
 8000a12:	045b      	lsls	r3, r3, #17
 8000a14:	4013      	ands	r3, r2
}
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	2104      	movs	r1, #4
 8000a32:	400a      	ands	r2, r1
 8000a34:	2107      	movs	r1, #7
 8000a36:	4091      	lsls	r1, r2
 8000a38:	000a      	movs	r2, r1
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	2104      	movs	r1, #4
 8000a42:	400b      	ands	r3, r1
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	4099      	lsls	r1, r3
 8000a48:	000b      	movs	r3, r1
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b004      	add	sp, #16
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	2104      	movs	r1, #4
 8000a6a:	400a      	ands	r2, r1
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	4091      	lsls	r1, r2
 8000a70:	000a      	movs	r2, r1
 8000a72:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2104      	movs	r1, #4
 8000a78:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000a7a:	40da      	lsrs	r2, r3
 8000a7c:	0013      	movs	r3, r2
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	23c0      	movs	r3, #192	; 0xc0
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	4013      	ands	r3, r2
 8000a98:	d101      	bne.n	8000a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	211f      	movs	r1, #31
 8000abc:	400a      	ands	r2, r1
 8000abe:	210f      	movs	r1, #15
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	43d2      	mvns	r2, r2
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	0e9b      	lsrs	r3, r3, #26
 8000acc:	210f      	movs	r1, #15
 8000ace:	4019      	ands	r1, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	201f      	movs	r0, #31
 8000ad4:	4003      	ands	r3, r0
 8000ad6:	4099      	lsls	r1, r3
 8000ad8:	000b      	movs	r3, r1
 8000ada:	431a      	orrs	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b004      	add	sp, #16
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	035b      	lsls	r3, r3, #13
 8000afa:	0b5b      	lsrs	r3, r3, #13
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	0352      	lsls	r2, r2, #13
 8000b1c:	0b52      	lsrs	r2, r2, #13
 8000b1e:	43d2      	mvns	r2, r2
 8000b20:	401a      	ands	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b002      	add	sp, #8
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	0212      	lsls	r2, r2, #8
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
 8000b50:	4904      	ldr	r1, [pc, #16]	; (8000b64 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000b52:	400b      	ands	r3, r1
 8000b54:	431a      	orrs	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	07ffff00 	.word	0x07ffff00

08000b68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <LL_ADC_EnableInternalRegulator+0x24>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	0552      	lsls	r2, r2, #21
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	6fffffe8 	.word	0x6fffffe8

08000b90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	055b      	lsls	r3, r3, #21
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	055b      	lsls	r3, r3, #21
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d101      	bne.n	8000bae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <LL_ADC_Enable+0x20>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2201      	movs	r2, #1
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	7fffffe8 	.word	0x7fffffe8

08000bdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <LL_ADC_Disable+0x20>)
 8000bea:	4013      	ands	r3, r2
 8000bec:	2202      	movs	r2, #2
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b002      	add	sp, #8
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	7fffffe8 	.word	0x7fffffe8

08000c00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <LL_ADC_IsEnabled+0x18>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <LL_ADC_IsEnabled+0x1a>
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d101      	bne.n	8000c3a <LL_ADC_IsDisableOngoing+0x18>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <LL_ADC_IsDisableOngoing+0x1a>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <LL_ADC_REG_StartConversion+0x20>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	2204      	movs	r2, #4
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	7fffffe8 	.word	0x7fffffe8

08000c68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <LL_ADC_REG_StopConversion+0x20>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	2210      	movs	r2, #16
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	7fffffe8 	.word	0x7fffffe8

08000c8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d101      	bne.n	8000ca4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	231f      	movs	r3, #31
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e17f      	b.n	8000fd6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10a      	bne.n	8000cf4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fd6b 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2254      	movs	r2, #84	; 0x54
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f7ff ff49 	bl	8000b90 <LL_ADC_IsInternalRegulatorEnabled>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d115      	bne.n	8000d2e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f7ff ff2e 	bl	8000b68 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d0c:	4bb4      	ldr	r3, [pc, #720]	; (8000fe0 <HAL_ADC_Init+0x330>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	49b4      	ldr	r1, [pc, #720]	; (8000fe4 <HAL_ADC_Init+0x334>)
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff f9f4 	bl	8000100 <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d20:	e002      	b.n	8000d28 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f9      	bne.n	8000d22 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff ff2c 	bl	8000b90 <LL_ADC_IsInternalRegulatorEnabled>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d10f      	bne.n	8000d5c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	2210      	movs	r2, #16
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d54:	231f      	movs	r3, #31
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0018      	movs	r0, r3
 8000d62:	f7ff ff93 	bl	8000c8c <LL_ADC_REG_IsConversionOngoing>
 8000d66:	0003      	movs	r3, r0
 8000d68:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	2210      	movs	r2, #16
 8000d70:	4013      	ands	r3, r2
 8000d72:	d000      	beq.n	8000d76 <HAL_ADC_Init+0xc6>
 8000d74:	e122      	b.n	8000fbc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d000      	beq.n	8000d7e <HAL_ADC_Init+0xce>
 8000d7c:	e11e      	b.n	8000fbc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	4a99      	ldr	r2, [pc, #612]	; (8000fe8 <HAL_ADC_Init+0x338>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	2202      	movs	r2, #2
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff ff34 	bl	8000c00 <LL_ADC_IsEnabled>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d000      	beq.n	8000d9e <HAL_ADC_Init+0xee>
 8000d9c:	e0ad      	b.n	8000efa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7e1b      	ldrb	r3, [r3, #24]
 8000da6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000da8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7e5b      	ldrb	r3, [r3, #25]
 8000dae:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000db0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7e9b      	ldrb	r3, [r3, #26]
 8000db6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000db8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_ADC_Init+0x118>
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	015b      	lsls	r3, r3, #5
 8000dc6:	e000      	b.n	8000dca <HAL_ADC_Init+0x11a>
 8000dc8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000dca:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000dd0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	da04      	bge.n	8000de4 <HAL_ADC_Init+0x134>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	e001      	b.n	8000de8 <HAL_ADC_Init+0x138>
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000de8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	212c      	movs	r1, #44	; 0x2c
 8000dee:	5c5b      	ldrb	r3, [r3, r1]
 8000df0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000df2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d115      	bne.n	8000e30 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e9b      	ldrb	r3, [r3, #26]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	0252      	lsls	r2, r2, #9
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e00b      	b.n	8000e30 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e28:	2201      	movs	r2, #1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00a      	beq.n	8000e4e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3c:	23e0      	movs	r3, #224	; 0xe0
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e46:	4313      	orrs	r3, r2
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	4a65      	ldr	r2, [pc, #404]	; (8000fec <HAL_ADC_Init+0x33c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	0f9b      	lsrs	r3, r3, #30
 8000e6a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e70:	4313      	orrs	r3, r2
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	223c      	movs	r2, #60	; 0x3c
 8000e7c:	5c9b      	ldrb	r3, [r3, r2]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d111      	bne.n	8000ea6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	0f9b      	lsrs	r3, r3, #30
 8000e88:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000e8e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000e94:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000e9a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a50      	ldr	r2, [pc, #320]	; (8000ff0 <HAL_ADC_Init+0x340>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	23c0      	movs	r3, #192	; 0xc0
 8000ec2:	061b      	lsls	r3, r3, #24
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d018      	beq.n	8000efa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	05db      	lsls	r3, r3, #23
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d012      	beq.n	8000efa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	061b      	lsls	r3, r3, #24
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d00c      	beq.n	8000efa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <HAL_ADC_Init+0x344>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <HAL_ADC_Init+0x348>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	0019      	movs	r1, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	039b      	lsls	r3, r3, #14
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <HAL_ADC_Init+0x344>)
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	001a      	movs	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	f7ff fd8a 	bl	8000a1e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	493a      	ldr	r1, [pc, #232]	; (8000ffc <HAL_ADC_Init+0x34c>)
 8000f14:	001a      	movs	r2, r3
 8000f16:	f7ff fd82 	bl	8000a1e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4249      	negs	r1, r1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
 8000f34:	e018      	b.n	8000f68 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	039b      	lsls	r3, r3, #14
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d112      	bne.n	8000f68 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	221c      	movs	r2, #28
 8000f52:	4013      	ands	r3, r2
 8000f54:	2210      	movs	r2, #16
 8000f56:	4252      	negs	r2, r2
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff fd72 	bl	8000a58 <LL_ADC_GetSamplingTimeCommonChannels>
 8000f74:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d10b      	bne.n	8000f96 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000f94:	e01c      	b.n	8000fd0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	2212      	movs	r2, #18
 8000f9c:	4393      	bics	r3, r2
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000faa:	2201      	movs	r2, #1
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000fb2:	231f      	movs	r3, #31
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000fba:	e009      	b.n	8000fd0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000fc8:	231f      	movs	r3, #31
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000fd0:	231f      	movs	r3, #31
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
}
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b008      	add	sp, #32
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	00030d40 	.word	0x00030d40
 8000fe8:	fffffefd 	.word	0xfffffefd
 8000fec:	fffe0201 	.word	0xfffe0201
 8000ff0:	1ffffc02 	.word	0x1ffffc02
 8000ff4:	40012708 	.word	0x40012708
 8000ff8:	ffc3ffff 	.word	0xffc3ffff
 8000ffc:	07ffff04 	.word	0x07ffff04

08001000 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff fe3d 	bl	8000c8c <LL_ADC_REG_IsConversionOngoing>
 8001012:	1e03      	subs	r3, r0, #0
 8001014:	d135      	bne.n	8001082 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2254      	movs	r2, #84	; 0x54
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_ADC_Start+0x24>
 8001020:	2302      	movs	r3, #2
 8001022:	e035      	b.n	8001090 <HAL_ADC_Start+0x90>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2254      	movs	r2, #84	; 0x54
 8001028:	2101      	movs	r1, #1
 800102a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800102c:	250f      	movs	r5, #15
 800102e:	197c      	adds	r4, r7, r5
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fb28 	bl	8001688 <ADC_Enable>
 8001038:	0003      	movs	r3, r0
 800103a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800103c:	197b      	adds	r3, r7, r5
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d119      	bne.n	8001078 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <HAL_ADC_Start+0x98>)
 800104a:	4013      	ands	r3, r2
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	0052      	lsls	r2, r2, #1
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	221c      	movs	r2, #28
 8001062:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2254      	movs	r2, #84	; 0x54
 8001068:	2100      	movs	r1, #0
 800106a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff fde7 	bl	8000c44 <LL_ADC_REG_StartConversion>
 8001076:	e008      	b.n	800108a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2254      	movs	r2, #84	; 0x54
 800107c:	2100      	movs	r1, #0
 800107e:	5499      	strb	r1, [r3, r2]
 8001080:	e003      	b.n	800108a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	2202      	movs	r2, #2
 8001088:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	b004      	add	sp, #16
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	fffff0fe 	.word	0xfffff0fe

0800109c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2254      	movs	r2, #84	; 0x54
 80010a8:	5c9b      	ldrb	r3, [r3, r2]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d101      	bne.n	80010b2 <HAL_ADC_Stop+0x16>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e029      	b.n	8001106 <HAL_ADC_Stop+0x6a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2254      	movs	r2, #84	; 0x54
 80010b6:	2101      	movs	r1, #1
 80010b8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010ba:	250f      	movs	r5, #15
 80010bc:	197c      	adds	r4, r7, r5
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fa9f 	bl	8001604 <ADC_ConversionStop>
 80010c6:	0003      	movs	r3, r0
 80010c8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010ca:	197b      	adds	r3, r7, r5
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d112      	bne.n	80010f8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80010d2:	197c      	adds	r4, r7, r5
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 fb5c 	bl	8001794 <ADC_Disable>
 80010dc:	0003      	movs	r3, r0
 80010de:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d107      	bne.n	80010f8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ec:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_ADC_Stop+0x74>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	2201      	movs	r2, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2254      	movs	r2, #84	; 0x54
 80010fc:	2100      	movs	r1, #0
 80010fe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b004      	add	sp, #16
 800110c:	bdb0      	pop	{r4, r5, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	fffffefe 	.word	0xfffffefe

08001114 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	2b08      	cmp	r3, #8
 8001124:	d102      	bne.n	800112c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001126:	2308      	movs	r3, #8
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e00f      	b.n	800114c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113c:	2220      	movs	r2, #32
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e072      	b.n	800122e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001148:	2304      	movs	r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800114c:	f7ff fc18 	bl	8000980 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001154:	e01f      	b.n	8001196 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	d01c      	beq.n	8001196 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800115c:	f7ff fc10 	bl	8000980 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d302      	bcc.n	8001172 <HAL_ADC_PollForConversion+0x5e>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4013      	ands	r3, r2
 800117c:	d10b      	bne.n	8001196 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	2204      	movs	r2, #4
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2254      	movs	r2, #84	; 0x54
 800118e:	2100      	movs	r1, #0
 8001190:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e04b      	b.n	800122e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4013      	ands	r3, r2
 80011a0:	d0d9      	beq.n	8001156 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	0092      	lsls	r2, r2, #2
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff fc66 	bl	8000a86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d02e      	beq.n	800121c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7e9b      	ldrb	r3, [r3, #26]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d12a      	bne.n	800121c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2208      	movs	r2, #8
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b08      	cmp	r3, #8
 80011d2:	d123      	bne.n	800121c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff fd57 	bl	8000c8c <LL_ADC_REG_IsConversionOngoing>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d110      	bne.n	8001204 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	210c      	movs	r1, #12
 80011ee:	438a      	bics	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_ADC_PollForConversion+0x124>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	2201      	movs	r2, #1
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	659a      	str	r2, [r3, #88]	; 0x58
 8001202:	e00b      	b.n	800121c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	2220      	movs	r2, #32
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2201      	movs	r2, #1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7e1b      	ldrb	r3, [r3, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	220c      	movs	r2, #12
 800122a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	fffffefe 	.word	0xfffffefe

0800123c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125e:	2317      	movs	r3, #23
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2254      	movs	r2, #84	; 0x54
 800126e:	5c9b      	ldrb	r3, [r3, r2]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x24>
 8001274:	2302      	movs	r3, #2
 8001276:	e1c0      	b.n	80015fa <HAL_ADC_ConfigChannel+0x3a6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2254      	movs	r2, #84	; 0x54
 800127c:	2101      	movs	r1, #1
 800127e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fd01 	bl	8000c8c <LL_ADC_REG_IsConversionOngoing>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d000      	beq.n	8001290 <HAL_ADC_ConfigChannel+0x3c>
 800128e:	e1a3      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d100      	bne.n	800129a <HAL_ADC_ConfigChannel+0x46>
 8001298:	e143      	b.n	8001522 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691a      	ldr	r2, [r3, #16]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	061b      	lsls	r3, r3, #24
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d004      	beq.n	80012b0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012aa:	4ac1      	ldr	r2, [pc, #772]	; (80015b0 <HAL_ADC_ConfigChannel+0x35c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d108      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f7ff fc14 	bl	8000ae8 <LL_ADC_REG_SetSequencerChAdd>
 80012c0:	e0c9      	b.n	8001456 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	211f      	movs	r1, #31
 80012cc:	400b      	ands	r3, r1
 80012ce:	210f      	movs	r1, #15
 80012d0:	4099      	lsls	r1, r3
 80012d2:	000b      	movs	r3, r1
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	035b      	lsls	r3, r3, #13
 80012e0:	0b5b      	lsrs	r3, r3, #13
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x9c>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	0e9b      	lsrs	r3, r3, #26
 80012ea:	221f      	movs	r2, #31
 80012ec:	4013      	ands	r3, r2
 80012ee:	e098      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4013      	ands	r3, r2
 80012f8:	d000      	beq.n	80012fc <HAL_ADC_ConfigChannel+0xa8>
 80012fa:	e091      	b.n	8001420 <HAL_ADC_ConfigChannel+0x1cc>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d000      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xb4>
 8001306:	e089      	b.n	800141c <HAL_ADC_ConfigChannel+0x1c8>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2204      	movs	r2, #4
 800130e:	4013      	ands	r3, r2
 8001310:	d000      	beq.n	8001314 <HAL_ADC_ConfigChannel+0xc0>
 8001312:	e081      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1c4>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2208      	movs	r2, #8
 800131a:	4013      	ands	r3, r2
 800131c:	d000      	beq.n	8001320 <HAL_ADC_ConfigChannel+0xcc>
 800131e:	e079      	b.n	8001414 <HAL_ADC_ConfigChannel+0x1c0>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2210      	movs	r2, #16
 8001326:	4013      	ands	r3, r2
 8001328:	d000      	beq.n	800132c <HAL_ADC_ConfigChannel+0xd8>
 800132a:	e071      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1bc>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2220      	movs	r2, #32
 8001332:	4013      	ands	r3, r2
 8001334:	d000      	beq.n	8001338 <HAL_ADC_ConfigChannel+0xe4>
 8001336:	e069      	b.n	800140c <HAL_ADC_ConfigChannel+0x1b8>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	4013      	ands	r3, r2
 8001340:	d000      	beq.n	8001344 <HAL_ADC_ConfigChannel+0xf0>
 8001342:	e061      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1b4>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	4013      	ands	r3, r2
 800134c:	d000      	beq.n	8001350 <HAL_ADC_ConfigChannel+0xfc>
 800134e:	e059      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1b0>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d151      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1ac>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d149      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1a8>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4013      	ands	r3, r2
 8001372:	d141      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1a4>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4013      	ands	r3, r2
 800137e:	d139      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1a0>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	4013      	ands	r3, r2
 800138a:	d131      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x19c>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	019b      	lsls	r3, r3, #6
 8001394:	4013      	ands	r3, r2
 8001396:	d129      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x198>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	01db      	lsls	r3, r3, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	d121      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x194>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	4013      	ands	r3, r2
 80013ae:	d119      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x190>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	025b      	lsls	r3, r3, #9
 80013b8:	4013      	ands	r3, r2
 80013ba:	d111      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x18c>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x188>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	02db      	lsls	r3, r3, #11
 80013d0:	4013      	ands	r3, r2
 80013d2:	d001      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x184>
 80013d4:	2312      	movs	r3, #18
 80013d6:	e024      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013d8:	2300      	movs	r3, #0
 80013da:	e022      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013dc:	2311      	movs	r3, #17
 80013de:	e020      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013e0:	2310      	movs	r3, #16
 80013e2:	e01e      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013e4:	230f      	movs	r3, #15
 80013e6:	e01c      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013e8:	230e      	movs	r3, #14
 80013ea:	e01a      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013ec:	230d      	movs	r3, #13
 80013ee:	e018      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013f0:	230c      	movs	r3, #12
 80013f2:	e016      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013f4:	230b      	movs	r3, #11
 80013f6:	e014      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013f8:	230a      	movs	r3, #10
 80013fa:	e012      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 80013fc:	2309      	movs	r3, #9
 80013fe:	e010      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001400:	2308      	movs	r3, #8
 8001402:	e00e      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001404:	2307      	movs	r3, #7
 8001406:	e00c      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001408:	2306      	movs	r3, #6
 800140a:	e00a      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 800140c:	2305      	movs	r3, #5
 800140e:	e008      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001410:	2304      	movs	r3, #4
 8001412:	e006      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	2303      	movs	r3, #3
 8001416:	e004      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1ce>
 8001420:	2300      	movs	r3, #0
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	6852      	ldr	r2, [r2, #4]
 8001426:	201f      	movs	r0, #31
 8001428:	4002      	ands	r2, r0
 800142a:	4093      	lsls	r3, r2
 800142c:	000a      	movs	r2, r1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	d808      	bhi.n	8001456 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	001a      	movs	r2, r3
 8001452:	f7ff fb29 	bl	8000aa8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	001a      	movs	r2, r3
 8001464:	f7ff fb64 	bl	8000b30 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db00      	blt.n	8001472 <HAL_ADC_ConfigChannel+0x21e>
 8001470:	e0bc      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fac5 	bl	8000a04 <LL_ADC_GetCommonPathInternalCh>
 800147a:	0003      	movs	r3, r0
 800147c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a4d      	ldr	r2, [pc, #308]	; (80015b8 <HAL_ADC_ConfigChannel+0x364>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d122      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001490:	d11d      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	0412      	lsls	r2, r2, #16
 8001498:	4313      	orrs	r3, r2
 800149a:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 800149c:	0019      	movs	r1, r3
 800149e:	0010      	movs	r0, r2
 80014a0:	f7ff fa9c 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014a4:	4b45      	ldr	r3, [pc, #276]	; (80015bc <HAL_ADC_ConfigChannel+0x368>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4945      	ldr	r1, [pc, #276]	; (80015c0 <HAL_ADC_ConfigChannel+0x36c>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7fe fe28 	bl	8000100 <__udivsi3>
 80014b0:	0003      	movs	r3, r0
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	0013      	movs	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	189b      	adds	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014be:	e002      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014cc:	e08e      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a3c      	ldr	r2, [pc, #240]	; (80015c4 <HAL_ADC_ConfigChannel+0x370>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d10e      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	045b      	lsls	r3, r3, #17
 80014de:	4013      	ands	r3, r2
 80014e0:	d109      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	0452      	lsls	r2, r2, #17
 80014e8:	4313      	orrs	r3, r2
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 80014ec:	0019      	movs	r1, r3
 80014ee:	0010      	movs	r0, r2
 80014f0:	f7ff fa74 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
 80014f4:	e07a      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a33      	ldr	r2, [pc, #204]	; (80015c8 <HAL_ADC_ConfigChannel+0x374>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d000      	beq.n	8001502 <HAL_ADC_ConfigChannel+0x2ae>
 8001500:	e074      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	03db      	lsls	r3, r3, #15
 8001508:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800150a:	d000      	beq.n	800150e <HAL_ADC_ConfigChannel+0x2ba>
 800150c:	e06e      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2280      	movs	r2, #128	; 0x80
 8001512:	03d2      	lsls	r2, r2, #15
 8001514:	4313      	orrs	r3, r2
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 8001518:	0019      	movs	r1, r3
 800151a:	0010      	movs	r0, r2
 800151c:	f7ff fa5e 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
 8001520:	e064      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	429a      	cmp	r2, r3
 800152c:	d004      	beq.n	8001538 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_ADC_ConfigChannel+0x35c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d107      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0019      	movs	r1, r3
 8001542:	0010      	movs	r0, r2
 8001544:	f7ff fae1 	bl	8000b0a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da4d      	bge.n	80015ec <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fa56 	bl	8000a04 <LL_ADC_GetCommonPathInternalCh>
 8001558:	0003      	movs	r3, r0
 800155a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_ADC_ConfigChannel+0x364>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d108      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_ADC_ConfigChannel+0x378>)
 800156a:	4013      	ands	r3, r2
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f7ff fa33 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
 8001576:	e039      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_ADC_ConfigChannel+0x370>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d108      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_ADC_ConfigChannel+0x37c>)
 8001586:	4013      	ands	r3, r2
 8001588:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 800158a:	0019      	movs	r1, r3
 800158c:	0010      	movs	r0, r2
 800158e:	f7ff fa25 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
 8001592:	e02b      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_ADC_ConfigChannel+0x374>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d126      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_ADC_ConfigChannel+0x380>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_ADC_ConfigChannel+0x360>)
 80015a6:	0019      	movs	r1, r3
 80015a8:	0010      	movs	r0, r2
 80015aa:	f7ff fa17 	bl	80009dc <LL_ADC_SetCommonPathInternalCh>
 80015ae:	e01d      	b.n	80015ec <HAL_ADC_ConfigChannel+0x398>
 80015b0:	80000004 	.word	0x80000004
 80015b4:	40012708 	.word	0x40012708
 80015b8:	b0001000 	.word	0xb0001000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	00030d40 	.word	0x00030d40
 80015c4:	b8004000 	.word	0xb8004000
 80015c8:	b4002000 	.word	0xb4002000
 80015cc:	ff7fffff 	.word	0xff7fffff
 80015d0:	feffffff 	.word	0xfeffffff
 80015d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	2220      	movs	r2, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015e4:	2317      	movs	r3, #23
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2254      	movs	r2, #84	; 0x54
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80015f4:	2317      	movs	r3, #23
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	781b      	ldrb	r3, [r3, #0]
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b006      	add	sp, #24
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)

08001604 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fb3b 	bl	8000c8c <LL_ADC_REG_IsConversionOngoing>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d031      	beq.n	800167e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff faff 	bl	8000c22 <LL_ADC_IsDisableOngoing>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d104      	bne.n	8001632 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fb1b 	bl	8000c68 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001632:	f7ff f9a5 	bl	8000980 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800163a:	e01a      	b.n	8001672 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800163c:	f7ff f9a0 	bl	8000980 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d913      	bls.n	8001672 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d00d      	beq.n	8001672 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	2210      	movs	r2, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	2201      	movs	r2, #1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e006      	b.n	8001680 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2204      	movs	r2, #4
 800167a:	4013      	ands	r3, r2
 800167c:	d1de      	bne.n	800163c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff fab1 	bl	8000c00 <LL_ADC_IsEnabled>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d000      	beq.n	80016a4 <ADC_Enable+0x1c>
 80016a2:	e069      	b.n	8001778 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a36      	ldr	r2, [pc, #216]	; (8001784 <ADC_Enable+0xfc>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	d00d      	beq.n	80016cc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	2210      	movs	r2, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2201      	movs	r2, #1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e056      	b.n	800177a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff fa71 	bl	8000bb8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <ADC_Enable+0x100>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff f993 	bl	8000a04 <LL_ADC_GetCommonPathInternalCh>
 80016de:	0002      	movs	r2, r0
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	4013      	ands	r3, r2
 80016e6:	d00f      	beq.n	8001708 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <ADC_Enable+0x104>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4928      	ldr	r1, [pc, #160]	; (8001790 <ADC_Enable+0x108>)
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7fe fd06 	bl	8000100 <__udivsi3>
 80016f4:	0003      	movs	r3, r0
 80016f6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80016f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016fa:	e002      	b.n	8001702 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3b01      	subs	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e5b      	ldrb	r3, [r3, #25]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d033      	beq.n	8001778 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001710:	f7ff f936 	bl	8000980 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001718:	e027      	b.n	800176a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fa6e 	bl	8000c00 <LL_ADC_IsEnabled>
 8001724:	1e03      	subs	r3, r0, #0
 8001726:	d104      	bne.n	8001732 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff fa43 	bl	8000bb8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001732:	f7ff f925 	bl	8000980 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d914      	bls.n	800176a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	2b01      	cmp	r3, #1
 800174c:	d00d      	beq.n	800176a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	2210      	movs	r2, #16
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2201      	movs	r2, #1
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e007      	b.n	800177a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	2b01      	cmp	r3, #1
 8001776:	d1d0      	bne.n	800171a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	80000017 	.word	0x80000017
 8001788:	40012708 	.word	0x40012708
 800178c:	20000000 	.word	0x20000000
 8001790:	00030d40 	.word	0x00030d40

08001794 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fa3e 	bl	8000c22 <LL_ADC_IsDisableOngoing>
 80017a6:	0003      	movs	r3, r0
 80017a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff fa26 	bl	8000c00 <LL_ADC_IsEnabled>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d046      	beq.n	8001846 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d143      	bne.n	8001846 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2205      	movs	r2, #5
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10d      	bne.n	80017e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fa03 	bl	8000bdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2203      	movs	r2, #3
 80017dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017de:	f7ff f8cf 	bl	8000980 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017e6:	e028      	b.n	800183a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	2210      	movs	r2, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2201      	movs	r2, #1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e021      	b.n	8001848 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001804:	f7ff f8bc 	bl	8000980 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d913      	bls.n	800183a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	d00d      	beq.n	800183a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	2210      	movs	r2, #16
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2201      	movs	r2, #1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e006      	b.n	8001848 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	d1de      	bne.n	8001804 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b004      	add	sp, #16
 800184e:	bd80      	pop	{r7, pc}

08001850 <LL_ADC_SetCalibrationFactor>:
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	22b4      	movs	r2, #180	; 0xb4
 800185e:	589b      	ldr	r3, [r3, r2]
 8001860:	227f      	movs	r2, #127	; 0x7f
 8001862:	4393      	bics	r3, r2
 8001864:	001a      	movs	r2, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	21b4      	movs	r1, #180	; 0xb4
 800186e:	505a      	str	r2, [r3, r1]
}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <LL_ADC_GetCalibrationFactor>:
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	22b4      	movs	r2, #180	; 0xb4
 8001884:	589b      	ldr	r3, [r3, r2]
 8001886:	227f      	movs	r2, #127	; 0x7f
 8001888:	4013      	ands	r3, r2
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <LL_ADC_Enable>:
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <LL_ADC_Enable+0x20>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	2201      	movs	r2, #1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	7fffffe8 	.word	0x7fffffe8

080018b8 <LL_ADC_Disable>:
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <LL_ADC_Disable+0x20>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2202      	movs	r2, #2
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	7fffffe8 	.word	0x7fffffe8

080018dc <LL_ADC_IsEnabled>:
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <LL_ADC_IsEnabled+0x18>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_ADC_IsEnabled+0x1a>
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <LL_ADC_StartCalibration>:
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <LL_ADC_StartCalibration+0x24>)
 800190e:	4013      	ands	r3, r2
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	0612      	lsls	r2, r2, #24
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	7fffffe8 	.word	0x7fffffe8

08001928 <LL_ADC_IsCalibrationOnGoing>:
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0fdb      	lsrs	r3, r3, #31
 8001936:	07da      	lsls	r2, r3, #31
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	061b      	lsls	r3, r3, #24
 800193c:	429a      	cmp	r2, r3
 800193e:	d101      	bne.n	8001944 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2254      	movs	r2, #84	; 0x54
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_ADCEx_Calibration_Start+0x1e>
 800196a:	2302      	movs	r3, #2
 800196c:	e0ba      	b.n	8001ae4 <HAL_ADCEx_Calibration_Start+0x194>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2254      	movs	r2, #84	; 0x54
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001976:	2317      	movs	r3, #23
 8001978:	18fc      	adds	r4, r7, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff09 	bl	8001794 <ADC_Disable>
 8001982:	0003      	movs	r3, r0
 8001984:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff ffa6 	bl	80018dc <LL_ADC_IsEnabled>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d000      	beq.n	8001996 <HAL_ADCEx_Calibration_Start+0x46>
 8001994:	e099      	b.n	8001aca <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a54      	ldr	r2, [pc, #336]	; (8001aec <HAL_ADCEx_Calibration_Start+0x19c>)
 800199c:	4013      	ands	r3, r2
 800199e:	2202      	movs	r2, #2
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a50      	ldr	r2, [pc, #320]	; (8001af0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	494d      	ldr	r1, [pc, #308]	; (8001af4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 80019be:	400a      	ands	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e02d      	b.n	8001a24 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff ff97 	bl	8001900 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019d2:	e014      	b.n	80019fe <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3301      	adds	r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d90d      	bls.n	80019fe <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	2212      	movs	r2, #18
 80019e8:	4393      	bics	r3, r2
 80019ea:	2210      	movs	r2, #16
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2254      	movs	r2, #84	; 0x54
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e072      	b.n	8001ae4 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7ff ff90 	bl	8001928 <LL_ADC_IsCalibrationOnGoing>
 8001a08:	1e03      	subs	r3, r0, #0
 8001a0a:	d1e3      	bne.n	80019d4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <LL_ADC_GetCalibrationFactor>
 8001a16:	0002      	movs	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	189b      	adds	r3, r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d9ce      	bls.n	80019c8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001a2a:	69f9      	ldr	r1, [r7, #28]
 8001a2c:	69b8      	ldr	r0, [r7, #24]
 8001a2e:	f7fe fb67 	bl	8000100 <__udivsi3>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff ff2a 	bl	8001894 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff ff01 	bl	8001850 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff ff30 	bl	80018b8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a58:	f7fe ff92 	bl	8000980 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a60:	e01b      	b.n	8001a9a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a62:	f7fe ff8d 	bl	8000980 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d914      	bls.n	8001a9a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <LL_ADC_IsEnabled>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d00d      	beq.n	8001a9a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	2210      	movs	r2, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e024      	b.n	8001ae4 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f7ff ff1c 	bl	80018dc <LL_ADC_IsEnabled>
 8001aa4:	1e03      	subs	r3, r0, #0
 8001aa6:	d1dc      	bne.n	8001a62 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	2203      	movs	r2, #3
 8001abe:	4393      	bics	r3, r2
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac8:	e005      	b.n	8001ad6 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	2210      	movs	r2, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2254      	movs	r2, #84	; 0x54
 8001ada:	2100      	movs	r1, #0
 8001adc:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	781b      	ldrb	r3, [r3, #0]
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b009      	add	sp, #36	; 0x24
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	fffffefd 	.word	0xfffffefd
 8001af0:	00008003 	.word	0x00008003
 8001af4:	ffff7ffc 	.word	0xffff7ffc
 8001af8:	0002f1ff 	.word	0x0002f1ff

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b10:	d828      	bhi.n	8001b64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	33c0      	adds	r3, #192	; 0xc0
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	589b      	ldr	r3, [r3, r2]
 8001b22:	1dfa      	adds	r2, r7, #7
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	0011      	movs	r1, r2
 8001b28:	2203      	movs	r2, #3
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	4091      	lsls	r1, r2
 8001b32:	000a      	movs	r2, r1
 8001b34:	43d2      	mvns	r2, r2
 8001b36:	401a      	ands	r2, r3
 8001b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	22ff      	movs	r2, #255	; 0xff
 8001b40:	401a      	ands	r2, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	0018      	movs	r0, r3
 8001b48:	2303      	movs	r3, #3
 8001b4a:	4003      	ands	r3, r0
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	33c0      	adds	r3, #192	; 0xc0
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b62:	e031      	b.n	8001bc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	400b      	ands	r3, r1
 8001b70:	3b08      	subs	r3, #8
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3306      	adds	r3, #6
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1dfa      	adds	r2, r7, #7
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	0011      	movs	r1, r2
 8001b84:	2203      	movs	r2, #3
 8001b86:	400a      	ands	r2, r1
 8001b88:	00d2      	lsls	r2, r2, #3
 8001b8a:	21ff      	movs	r1, #255	; 0xff
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	401a      	ands	r2, r3
 8001b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	22ff      	movs	r2, #255	; 0xff
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	001c      	movs	r4, r3
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	4023      	ands	r3, r4
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	3306      	adds	r3, #6
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	18c3      	adds	r3, r0, r3
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	045b      	lsls	r3, r3, #17
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d301      	bcc.n	8001bf0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bec:	2301      	movs	r3, #1
 8001bee:	e010      	b.n	8001c12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <SysTick_Config+0x44>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	425b      	negs	r3, r3
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff7c 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x44>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x44>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	0018      	movs	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	1c02      	adds	r2, r0, #0
 8001c30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff ffbf 	bl	8001bd8 <SysTick_Config>
 8001c5a:	0003      	movs	r3, r0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d11f      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	189b      	adds	r3, r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7fe fa32 	bl	8000100 <__udivsi3>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca2:	e008      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e001      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e009      	b.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d0ed      	beq.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffff9ff 	.word	0xfffff9ff
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	000f4240 	.word	0x000f4240

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e2f3      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1e>
 8001d00:	e07c      	b.n	8001dfc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d02:	4bc3      	ldr	r3, [pc, #780]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2238      	movs	r2, #56	; 0x38
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0c:	4bc0      	ldr	r3, [pc, #768]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2203      	movs	r2, #3
 8001d12:	4013      	ands	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d102      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3e>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4bb9      	ldr	r3, [pc, #740]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d062      	beq.n	8001dfa <HAL_RCC_OscConfig+0x116>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d15e      	bne.n	8001dfa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2ce      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x78>
 8001d4c:	4bb0      	ldr	r3, [pc, #704]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4baf      	ldr	r3, [pc, #700]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	0249      	lsls	r1, r1, #9
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e020      	b.n	8001d9e <HAL_RCC_OscConfig+0xba>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	23a0      	movs	r3, #160	; 0xa0
 8001d62:	02db      	lsls	r3, r3, #11
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d10e      	bne.n	8001d86 <HAL_RCC_OscConfig+0xa2>
 8001d68:	4ba9      	ldr	r3, [pc, #676]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4ba8      	ldr	r3, [pc, #672]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	02c9      	lsls	r1, r1, #11
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4ba6      	ldr	r3, [pc, #664]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4ba5      	ldr	r3, [pc, #660]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0249      	lsls	r1, r1, #9
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e00b      	b.n	8001d9e <HAL_RCC_OscConfig+0xba>
 8001d86:	4ba2      	ldr	r3, [pc, #648]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4ba1      	ldr	r3, [pc, #644]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	49a1      	ldr	r1, [pc, #644]	; (8002014 <HAL_RCC_OscConfig+0x330>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	4b9f      	ldr	r3, [pc, #636]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b9e      	ldr	r3, [pc, #632]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	499f      	ldr	r1, [pc, #636]	; (8002018 <HAL_RCC_OscConfig+0x334>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe fdeb 	bl	8000980 <HAL_GetTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7fe fde6 	bl	8000980 <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e28d      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc2:	4b93      	ldr	r3, [pc, #588]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xcc>
 8001dce:	e015      	b.n	8001dfc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fdd6 	bl	8000980 <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dda:	f7fe fdd1 	bl	8000980 <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	; 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e278      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	029b      	lsls	r3, r3, #10
 8001df4:	4013      	ands	r3, r2
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0xf6>
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2202      	movs	r2, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d100      	bne.n	8001e08 <HAL_RCC_OscConfig+0x124>
 8001e06:	e099      	b.n	8001f3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2238      	movs	r2, #56	; 0x38
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e12:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0x144>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d002      	beq.n	8001e2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d135      	bne.n	8001e9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2e:	4b78      	ldr	r3, [pc, #480]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x162>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e24b      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b72      	ldr	r3, [pc, #456]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a74      	ldr	r2, [pc, #464]	; (800201c <HAL_RCC_OscConfig+0x338>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	021a      	lsls	r2, r3, #8
 8001e56:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e62:	4b6b      	ldr	r3, [pc, #428]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6e      	ldr	r2, [pc, #440]	; (8002020 <HAL_RCC_OscConfig+0x33c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e76:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0adb      	lsrs	r3, r3, #11
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	4013      	ands	r3, r2
 8001e80:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x340>)
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x344>)
 8001e86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e88:	4b68      	ldr	r3, [pc, #416]	; (800202c <HAL_RCC_OscConfig+0x348>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7fe fd1b 	bl	80008c8 <HAL_InitTick>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d051      	beq.n	8001f3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e221      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d030      	beq.n	8001f04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5e      	ldr	r2, [pc, #376]	; (8002020 <HAL_RCC_OscConfig+0x33c>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	4b57      	ldr	r3, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	4b56      	ldr	r3, [pc, #344]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0049      	lsls	r1, r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fd5c 	bl	8000980 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7fe fd57 	bl	8000980 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1fe      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b48      	ldr	r3, [pc, #288]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a4a      	ldr	r2, [pc, #296]	; (800201c <HAL_RCC_OscConfig+0x338>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	e01b      	b.n	8001f3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	4949      	ldr	r1, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0x34c>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe fd36 	bl	8000980 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fd31 	bl	8000980 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1d8      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x236>
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	4013      	ands	r3, r2
 8001f44:	d047      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f46:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2238      	movs	r2, #56	; 0x38
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b18      	cmp	r3, #24
 8001f50:	d10a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f52:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d03c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d138      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e1ba      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d019      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fd00 	bl	8000980 <HAL_GetTick>
 8001f80:	0003      	movs	r3, r0
 8001f82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f86:	f7fe fcfb 	bl	8000980 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1a2      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0f1      	beq.n	8001f86 <HAL_RCC_OscConfig+0x2a2>
 8001fa2:	e018      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	438a      	bics	r2, r1
 8001fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fce6 	bl	8000980 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fba:	f7fe fce1 	bl	8000980 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e188      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d1f1      	bne.n	8001fba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2fe>
 8001fe0:	e0c6      	b.n	8002170 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	231f      	movs	r3, #31
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2238      	movs	r2, #56	; 0x38
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d11e      	bne.n	8002034 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x31e>
 8002000:	e0b6      	b.n	8002170 <HAL_RCC_OscConfig+0x48c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d000      	beq.n	800200c <HAL_RCC_OscConfig+0x328>
 800200a:	e0b1      	b.n	8002170 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e166      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
 8002010:	40021000 	.word	0x40021000
 8002014:	fffeffff 	.word	0xfffeffff
 8002018:	fffbffff 	.word	0xfffbffff
 800201c:	ffff80ff 	.word	0xffff80ff
 8002020:	ffffc7ff 	.word	0xffffc7ff
 8002024:	00f42400 	.word	0x00f42400
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004
 8002030:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002034:	4bac      	ldr	r3, [pc, #688]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4013      	ands	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_RCC_OscConfig+0x360>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x362>
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d011      	beq.n	800206e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4ba7      	ldr	r3, [pc, #668]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800204c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800204e:	4ba6      	ldr	r3, [pc, #664]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0549      	lsls	r1, r1, #21
 8002054:	430a      	orrs	r2, r1
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
 8002058:	4ba3      	ldr	r3, [pc, #652]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800205a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	055b      	lsls	r3, r3, #21
 8002060:	4013      	ands	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002066:	231f      	movs	r3, #31
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b9f      	ldr	r3, [pc, #636]	; (80022ec <HAL_RCC_OscConfig+0x608>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d11a      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207a:	4b9c      	ldr	r3, [pc, #624]	; (80022ec <HAL_RCC_OscConfig+0x608>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b9b      	ldr	r3, [pc, #620]	; (80022ec <HAL_RCC_OscConfig+0x608>)
 8002080:	2180      	movs	r1, #128	; 0x80
 8002082:	0049      	lsls	r1, r1, #1
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002088:	f7fe fc7a 	bl	8000980 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7fe fc75 	bl	8000980 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e11c      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a4:	4b91      	ldr	r3, [pc, #580]	; (80022ec <HAL_RCC_OscConfig+0x608>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3e2>
 80020b8:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020bc:	4b8a      	ldr	r3, [pc, #552]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80020c4:	e01c      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x404>
 80020ce:	4b86      	ldr	r3, [pc, #536]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d2:	4b85      	ldr	r3, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020d4:	2104      	movs	r1, #4
 80020d6:	430a      	orrs	r2, r1
 80020d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80020da:	4b83      	ldr	r3, [pc, #524]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020de:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
 80020e8:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ec:	4b7e      	ldr	r3, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80020f4:	4b7c      	ldr	r3, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020f8:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80020fa:	2104      	movs	r1, #4
 80020fc:	438a      	bics	r2, r1
 80020fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d014      	beq.n	8002132 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fc3a 	bl	8000980 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002110:	e009      	b.n	8002126 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe fc35 	bl	8000980 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4a74      	ldr	r2, [pc, #464]	; (80022f0 <HAL_RCC_OscConfig+0x60c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0db      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x42e>
 8002130:	e013      	b.n	800215a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fc25 	bl	8000980 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800213a:	e009      	b.n	8002150 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7fe fc20 	bl	8000980 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	4a6a      	ldr	r2, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x60c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0c6      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002150:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800215a:	231f      	movs	r3, #31
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002168:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800216a:	4962      	ldr	r1, [pc, #392]	; (80022f4 <HAL_RCC_OscConfig+0x610>)
 800216c:	400a      	ands	r2, r1
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d100      	bne.n	800217a <HAL_RCC_OscConfig+0x496>
 8002178:	e0b0      	b.n	80022dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217a:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2238      	movs	r2, #56	; 0x38
 8002180:	4013      	ands	r3, r2
 8002182:	2b10      	cmp	r3, #16
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x4a4>
 8002186:	e078      	b.n	800227a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d153      	bne.n	8002238 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002190:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b54      	ldr	r3, [pc, #336]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002196:	4958      	ldr	r1, [pc, #352]	; (80022f8 <HAL_RCC_OscConfig+0x614>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fbf0 	bl	8000980 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe fbeb 	bl	8000980 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e092      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	049b      	lsls	r3, r3, #18
 80021c0:	4013      	ands	r3, r2
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x618>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	431a      	orrs	r2, r3
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0449      	lsls	r1, r1, #17
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0549      	lsls	r1, r1, #21
 800220a:	430a      	orrs	r2, r1
 800220c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fbb7 	bl	8000980 <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fbb2 	bl	8000980 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e059      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	049b      	lsls	r3, r3, #18
 8002232:	4013      	ands	r3, r2
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x534>
 8002236:	e051      	b.n	80022dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800223e:	492e      	ldr	r1, [pc, #184]	; (80022f8 <HAL_RCC_OscConfig+0x614>)
 8002240:	400a      	ands	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fb9c 	bl	8000980 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7fe fb97 	bl	8000980 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e03e      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	049b      	lsls	r3, r3, #18
 8002268:	4013      	ands	r3, r2
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002272:	4923      	ldr	r1, [pc, #140]	; (8002300 <HAL_RCC_OscConfig+0x61c>)
 8002274:	400a      	ands	r2, r1
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	e030      	b.n	80022dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02b      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_RCC_OscConfig+0x604>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2203      	movs	r2, #3
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	429a      	cmp	r2, r3
 8002298:	d11e      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2270      	movs	r2, #112	; 0x70
 800229e:	401a      	ands	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d117      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	23fe      	movs	r3, #254	; 0xfe
 80022ac:	01db      	lsls	r3, r3, #7
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d10e      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	23f8      	movs	r3, #248	; 0xf8
 80022be:	039b      	lsls	r3, r3, #14
 80022c0:	401a      	ands	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	0f5b      	lsrs	r3, r3, #29
 80022ce:	075a      	lsls	r2, r3, #29
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b008      	add	sp, #32
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	00001388 	.word	0x00001388
 80022f4:	efffffff 	.word	0xefffffff
 80022f8:	feffffff 	.word	0xfeffffff
 80022fc:	1fc1808c 	.word	0x1fc1808c
 8002300:	effefffc 	.word	0xeffefffc

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0e9      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b76      	ldr	r3, [pc, #472]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2207      	movs	r2, #7
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d91e      	bls.n	8002364 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2207      	movs	r2, #7
 800232c:	4393      	bics	r3, r2
 800232e:	0019      	movs	r1, r3
 8002330:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002338:	f7fe fb22 	bl	8000980 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002340:	e009      	b.n	8002356 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002342:	f7fe fb1d 	bl	8000980 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0ca      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1ee      	bne.n	8002342 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d015      	beq.n	800239a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	d006      	beq.n	8002386 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	21e0      	movs	r1, #224	; 0xe0
 8002380:	01c9      	lsls	r1, r1, #7
 8002382:	430a      	orrs	r2, r1
 8002384:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002386:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_RCC_ClockConfig+0x1fc>)
 800238c:	4013      	ands	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2201      	movs	r2, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d057      	beq.n	8002454 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	4013      	ands	r3, r2
 80023b6:	d12b      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e097      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	049b      	lsls	r3, r3, #18
 80023cc:	4013      	ands	r3, r2
 80023ce:	d11f      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e08b      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023dc:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	d113      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e07f      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f4:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e074      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	2202      	movs	r2, #2
 8002408:	4013      	ands	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e06d      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2207      	movs	r2, #7
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe faac 	bl	8000980 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	e009      	b.n	8002442 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe faa7 	bl	8000980 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e054      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	; 0x38
 8002448:	401a      	ands	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	429a      	cmp	r2, r3
 8002452:	d1ec      	bne.n	800242e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2207      	movs	r2, #7
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d21e      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2207      	movs	r2, #7
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002474:	f7fe fa84 	bl	8000980 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247c:	e009      	b.n	8002492 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247e:	f7fe fa7f 	bl	8000980 <HAL_GetTick>
 8002482:	0002      	movs	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_RCC_ClockConfig+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e02c      	b.n	80024ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d1ee      	bne.n	800247e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2204      	movs	r2, #4
 80024a6:	4013      	ands	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a15      	ldr	r2, [pc, #84]	; (8002504 <HAL_RCC_ClockConfig+0x200>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80024be:	f000 f829 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024c2:	0001      	movs	r1, r0
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCC_ClockConfig+0x1f8>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	220f      	movs	r2, #15
 80024cc:	401a      	ands	r2, r3
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <HAL_RCC_ClockConfig+0x204>)
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	58d3      	ldr	r3, [r2, r3]
 80024d4:	221f      	movs	r2, #31
 80024d6:	4013      	ands	r3, r2
 80024d8:	000a      	movs	r2, r1
 80024da:	40da      	lsrs	r2, r3
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_ClockConfig+0x208>)
 80024de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x20c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe f9ef 	bl	80008c8 <HAL_InitTick>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40022000 	.word	0x40022000
 80024f8:	00001388 	.word	0x00001388
 80024fc:	40021000 	.word	0x40021000
 8002500:	fffff0ff 	.word	0xfffff0ff
 8002504:	ffff8fff 	.word	0xffff8fff
 8002508:	08002708 	.word	0x08002708
 800250c:	20000000 	.word	0x20000000
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2238      	movs	r2, #56	; 0x38
 8002520:	4013      	ands	r3, r2
 8002522:	d10f      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0adb      	lsrs	r3, r3, #11
 800252a:	2207      	movs	r2, #7
 800252c:	4013      	ands	r3, r2
 800252e:	2201      	movs	r2, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	4835      	ldr	r0, [pc, #212]	; (8002610 <HAL_RCC_GetSysClockFreq+0xfc>)
 800253a:	f7fd fde1 	bl	8000100 <__udivsi3>
 800253e:	0003      	movs	r3, r0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	e05d      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2238      	movs	r2, #56	; 0x38
 800254a:	4013      	ands	r3, r2
 800254c:	2b08      	cmp	r3, #8
 800254e:	d102      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCC_GetSysClockFreq+0x100>)
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e054      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2238      	movs	r2, #56	; 0x38
 800255c:	4013      	ands	r3, r2
 800255e:	2b10      	cmp	r3, #16
 8002560:	d138      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2203      	movs	r2, #3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	2207      	movs	r2, #7
 8002574:	4013      	ands	r3, r2
 8002576:	3301      	adds	r3, #1
 8002578:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d10d      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	4824      	ldr	r0, [pc, #144]	; (8002614 <HAL_RCC_GetSysClockFreq+0x100>)
 8002584:	f7fd fdbc 	bl	8000100 <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	0019      	movs	r1, r3
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	227f      	movs	r2, #127	; 0x7f
 8002594:	4013      	ands	r3, r2
 8002596:	434b      	muls	r3, r1
 8002598:	617b      	str	r3, [r7, #20]
        break;
 800259a:	e00d      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025a0:	f7fd fdae 	bl	8000100 <__udivsi3>
 80025a4:	0003      	movs	r3, r0
 80025a6:	0019      	movs	r1, r3
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	227f      	movs	r2, #127	; 0x7f
 80025b0:	4013      	ands	r3, r2
 80025b2:	434b      	muls	r3, r1
 80025b4:	617b      	str	r3, [r7, #20]
        break;
 80025b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0f5b      	lsrs	r3, r3, #29
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	6978      	ldr	r0, [r7, #20]
 80025ca:	f7fd fd99 	bl	8000100 <__udivsi3>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e015      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2238      	movs	r2, #56	; 0x38
 80025da:	4013      	ands	r3, r2
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d103      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e00b      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2238      	movs	r2, #56	; 0x38
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b18      	cmp	r3, #24
 80025f2:	d103      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025f4:	23fa      	movs	r3, #250	; 0xfa
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e001      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002600:	693b      	ldr	r3, [r7, #16]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b006      	add	sp, #24
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40021000 	.word	0x40021000
 8002610:	00f42400 	.word	0x00f42400
 8002614:	007a1200 	.word	0x007a1200

08002618 <memset>:
 8002618:	0003      	movs	r3, r0
 800261a:	1882      	adds	r2, r0, r2
 800261c:	4293      	cmp	r3, r2
 800261e:	d100      	bne.n	8002622 <memset+0xa>
 8002620:	4770      	bx	lr
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	e7f9      	b.n	800261c <memset+0x4>

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	2600      	movs	r6, #0
 800262c:	4c0c      	ldr	r4, [pc, #48]	; (8002660 <__libc_init_array+0x38>)
 800262e:	4d0d      	ldr	r5, [pc, #52]	; (8002664 <__libc_init_array+0x3c>)
 8002630:	1b64      	subs	r4, r4, r5
 8002632:	10a4      	asrs	r4, r4, #2
 8002634:	42a6      	cmp	r6, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	2600      	movs	r6, #0
 800263a:	f000 f819 	bl	8002670 <_init>
 800263e:	4c0a      	ldr	r4, [pc, #40]	; (8002668 <__libc_init_array+0x40>)
 8002640:	4d0a      	ldr	r5, [pc, #40]	; (800266c <__libc_init_array+0x44>)
 8002642:	1b64      	subs	r4, r4, r5
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	42a6      	cmp	r6, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	00b3      	lsls	r3, r6, #2
 800264e:	58eb      	ldr	r3, [r5, r3]
 8002650:	4798      	blx	r3
 8002652:	3601      	adds	r6, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	00b3      	lsls	r3, r6, #2
 8002658:	58eb      	ldr	r3, [r5, r3]
 800265a:	4798      	blx	r3
 800265c:	3601      	adds	r6, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	08002748 	.word	0x08002748
 8002664:	08002748 	.word	0x08002748
 8002668:	0800274c 	.word	0x0800274c
 800266c:	08002748 	.word	0x08002748

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
