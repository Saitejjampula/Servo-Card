
goxo board vref test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f98  08003f98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa0  08003fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08003fb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003fb4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbd9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce1  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000841  00000000  00000000  0002f3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b982  00000000  00000000  0002fc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf79  00000000  00000000  0004b5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6759  00000000  00000000  00058524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000265c  00000000  00000000  0010ec80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001112dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e78 	.word	0x08003e78

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003e78 	.word	0x08003e78

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 fa44 	bl	80008dc <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 fa3f 	bl	80008dc <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__aeabi_fdiv>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	464f      	mov	r7, r9
 80005cc:	4646      	mov	r6, r8
 80005ce:	46d6      	mov	lr, sl
 80005d0:	0245      	lsls	r5, r0, #9
 80005d2:	b5c0      	push	{r6, r7, lr}
 80005d4:	0047      	lsls	r7, r0, #1
 80005d6:	1c0c      	adds	r4, r1, #0
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	0e3f      	lsrs	r7, r7, #24
 80005dc:	0fc6      	lsrs	r6, r0, #31
 80005de:	2f00      	cmp	r7, #0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_fdiv+0x1c>
 80005e2:	e06f      	b.n	80006c4 <__aeabi_fdiv+0xfc>
 80005e4:	2fff      	cmp	r7, #255	; 0xff
 80005e6:	d100      	bne.n	80005ea <__aeabi_fdiv+0x22>
 80005e8:	e074      	b.n	80006d4 <__aeabi_fdiv+0x10c>
 80005ea:	2300      	movs	r3, #0
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	4699      	mov	r9, r3
 80005f0:	469a      	mov	sl, r3
 80005f2:	00ed      	lsls	r5, r5, #3
 80005f4:	04d2      	lsls	r2, r2, #19
 80005f6:	4315      	orrs	r5, r2
 80005f8:	3f7f      	subs	r7, #127	; 0x7f
 80005fa:	0263      	lsls	r3, r4, #9
 80005fc:	0a5b      	lsrs	r3, r3, #9
 80005fe:	4698      	mov	r8, r3
 8000600:	0063      	lsls	r3, r4, #1
 8000602:	0e1b      	lsrs	r3, r3, #24
 8000604:	0fe4      	lsrs	r4, r4, #31
 8000606:	2b00      	cmp	r3, #0
 8000608:	d04d      	beq.n	80006a6 <__aeabi_fdiv+0xde>
 800060a:	2bff      	cmp	r3, #255	; 0xff
 800060c:	d045      	beq.n	800069a <__aeabi_fdiv+0xd2>
 800060e:	4642      	mov	r2, r8
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	00d2      	lsls	r2, r2, #3
 8000614:	04c9      	lsls	r1, r1, #19
 8000616:	4311      	orrs	r1, r2
 8000618:	4688      	mov	r8, r1
 800061a:	2200      	movs	r2, #0
 800061c:	3b7f      	subs	r3, #127	; 0x7f
 800061e:	0031      	movs	r1, r6
 8000620:	1aff      	subs	r7, r7, r3
 8000622:	464b      	mov	r3, r9
 8000624:	4061      	eors	r1, r4
 8000626:	b2c9      	uxtb	r1, r1
 8000628:	2b0f      	cmp	r3, #15
 800062a:	d900      	bls.n	800062e <__aeabi_fdiv+0x66>
 800062c:	e0b8      	b.n	80007a0 <__aeabi_fdiv+0x1d8>
 800062e:	4870      	ldr	r0, [pc, #448]	; (80007f0 <__aeabi_fdiv+0x228>)
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	58c3      	ldr	r3, [r0, r3]
 8000634:	469f      	mov	pc, r3
 8000636:	2300      	movs	r3, #0
 8000638:	4698      	mov	r8, r3
 800063a:	0026      	movs	r6, r4
 800063c:	4645      	mov	r5, r8
 800063e:	4692      	mov	sl, r2
 8000640:	4653      	mov	r3, sl
 8000642:	2b02      	cmp	r3, #2
 8000644:	d100      	bne.n	8000648 <__aeabi_fdiv+0x80>
 8000646:	e08d      	b.n	8000764 <__aeabi_fdiv+0x19c>
 8000648:	2b03      	cmp	r3, #3
 800064a:	d100      	bne.n	800064e <__aeabi_fdiv+0x86>
 800064c:	e0a1      	b.n	8000792 <__aeabi_fdiv+0x1ca>
 800064e:	2b01      	cmp	r3, #1
 8000650:	d018      	beq.n	8000684 <__aeabi_fdiv+0xbc>
 8000652:	003b      	movs	r3, r7
 8000654:	337f      	adds	r3, #127	; 0x7f
 8000656:	2b00      	cmp	r3, #0
 8000658:	dd6d      	ble.n	8000736 <__aeabi_fdiv+0x16e>
 800065a:	076a      	lsls	r2, r5, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fdiv+0xa0>
 800065e:	220f      	movs	r2, #15
 8000660:	402a      	ands	r2, r5
 8000662:	2a04      	cmp	r2, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fdiv+0xa0>
 8000666:	3504      	adds	r5, #4
 8000668:	012a      	lsls	r2, r5, #4
 800066a:	d503      	bpl.n	8000674 <__aeabi_fdiv+0xac>
 800066c:	4b61      	ldr	r3, [pc, #388]	; (80007f4 <__aeabi_fdiv+0x22c>)
 800066e:	401d      	ands	r5, r3
 8000670:	003b      	movs	r3, r7
 8000672:	3380      	adds	r3, #128	; 0x80
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	dd00      	ble.n	800067a <__aeabi_fdiv+0xb2>
 8000678:	e074      	b.n	8000764 <__aeabi_fdiv+0x19c>
 800067a:	01aa      	lsls	r2, r5, #6
 800067c:	0a52      	lsrs	r2, r2, #9
 800067e:	b2d8      	uxtb	r0, r3
 8000680:	e002      	b.n	8000688 <__aeabi_fdiv+0xc0>
 8000682:	000e      	movs	r6, r1
 8000684:	2000      	movs	r0, #0
 8000686:	2200      	movs	r2, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	07f6      	lsls	r6, r6, #31
 800068c:	4310      	orrs	r0, r2
 800068e:	4330      	orrs	r0, r6
 8000690:	bce0      	pop	{r5, r6, r7}
 8000692:	46ba      	mov	sl, r7
 8000694:	46b1      	mov	r9, r6
 8000696:	46a8      	mov	r8, r5
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	4643      	mov	r3, r8
 800069c:	2b00      	cmp	r3, #0
 800069e:	d13f      	bne.n	8000720 <__aeabi_fdiv+0x158>
 80006a0:	2202      	movs	r2, #2
 80006a2:	3fff      	subs	r7, #255	; 0xff
 80006a4:	e003      	b.n	80006ae <__aeabi_fdiv+0xe6>
 80006a6:	4643      	mov	r3, r8
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d12d      	bne.n	8000708 <__aeabi_fdiv+0x140>
 80006ac:	2201      	movs	r2, #1
 80006ae:	0031      	movs	r1, r6
 80006b0:	464b      	mov	r3, r9
 80006b2:	4061      	eors	r1, r4
 80006b4:	b2c9      	uxtb	r1, r1
 80006b6:	4313      	orrs	r3, r2
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d838      	bhi.n	800072e <__aeabi_fdiv+0x166>
 80006bc:	484e      	ldr	r0, [pc, #312]	; (80007f8 <__aeabi_fdiv+0x230>)
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	58c3      	ldr	r3, [r0, r3]
 80006c2:	469f      	mov	pc, r3
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	d113      	bne.n	80006f0 <__aeabi_fdiv+0x128>
 80006c8:	2304      	movs	r3, #4
 80006ca:	4699      	mov	r9, r3
 80006cc:	3b03      	subs	r3, #3
 80006ce:	2700      	movs	r7, #0
 80006d0:	469a      	mov	sl, r3
 80006d2:	e792      	b.n	80005fa <__aeabi_fdiv+0x32>
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d105      	bne.n	80006e4 <__aeabi_fdiv+0x11c>
 80006d8:	2308      	movs	r3, #8
 80006da:	4699      	mov	r9, r3
 80006dc:	3b06      	subs	r3, #6
 80006de:	27ff      	movs	r7, #255	; 0xff
 80006e0:	469a      	mov	sl, r3
 80006e2:	e78a      	b.n	80005fa <__aeabi_fdiv+0x32>
 80006e4:	230c      	movs	r3, #12
 80006e6:	4699      	mov	r9, r3
 80006e8:	3b09      	subs	r3, #9
 80006ea:	27ff      	movs	r7, #255	; 0xff
 80006ec:	469a      	mov	sl, r3
 80006ee:	e784      	b.n	80005fa <__aeabi_fdiv+0x32>
 80006f0:	0028      	movs	r0, r5
 80006f2:	f000 f8d5 	bl	80008a0 <__clzsi2>
 80006f6:	2776      	movs	r7, #118	; 0x76
 80006f8:	1f43      	subs	r3, r0, #5
 80006fa:	409d      	lsls	r5, r3
 80006fc:	2300      	movs	r3, #0
 80006fe:	427f      	negs	r7, r7
 8000700:	4699      	mov	r9, r3
 8000702:	469a      	mov	sl, r3
 8000704:	1a3f      	subs	r7, r7, r0
 8000706:	e778      	b.n	80005fa <__aeabi_fdiv+0x32>
 8000708:	4640      	mov	r0, r8
 800070a:	f000 f8c9 	bl	80008a0 <__clzsi2>
 800070e:	4642      	mov	r2, r8
 8000710:	1f43      	subs	r3, r0, #5
 8000712:	409a      	lsls	r2, r3
 8000714:	2376      	movs	r3, #118	; 0x76
 8000716:	425b      	negs	r3, r3
 8000718:	4690      	mov	r8, r2
 800071a:	1a1b      	subs	r3, r3, r0
 800071c:	2200      	movs	r2, #0
 800071e:	e77e      	b.n	800061e <__aeabi_fdiv+0x56>
 8000720:	2303      	movs	r3, #3
 8000722:	464a      	mov	r2, r9
 8000724:	431a      	orrs	r2, r3
 8000726:	4691      	mov	r9, r2
 8000728:	33fc      	adds	r3, #252	; 0xfc
 800072a:	2203      	movs	r2, #3
 800072c:	e777      	b.n	800061e <__aeabi_fdiv+0x56>
 800072e:	000e      	movs	r6, r1
 8000730:	20ff      	movs	r0, #255	; 0xff
 8000732:	2200      	movs	r2, #0
 8000734:	e7a8      	b.n	8000688 <__aeabi_fdiv+0xc0>
 8000736:	2201      	movs	r2, #1
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	2b1b      	cmp	r3, #27
 800073c:	dca2      	bgt.n	8000684 <__aeabi_fdiv+0xbc>
 800073e:	379e      	adds	r7, #158	; 0x9e
 8000740:	002a      	movs	r2, r5
 8000742:	40bd      	lsls	r5, r7
 8000744:	40da      	lsrs	r2, r3
 8000746:	1e6b      	subs	r3, r5, #1
 8000748:	419d      	sbcs	r5, r3
 800074a:	4315      	orrs	r5, r2
 800074c:	076a      	lsls	r2, r5, #29
 800074e:	d004      	beq.n	800075a <__aeabi_fdiv+0x192>
 8000750:	220f      	movs	r2, #15
 8000752:	402a      	ands	r2, r5
 8000754:	2a04      	cmp	r2, #4
 8000756:	d000      	beq.n	800075a <__aeabi_fdiv+0x192>
 8000758:	3504      	adds	r5, #4
 800075a:	016a      	lsls	r2, r5, #5
 800075c:	d544      	bpl.n	80007e8 <__aeabi_fdiv+0x220>
 800075e:	2001      	movs	r0, #1
 8000760:	2200      	movs	r2, #0
 8000762:	e791      	b.n	8000688 <__aeabi_fdiv+0xc0>
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	2200      	movs	r2, #0
 8000768:	e78e      	b.n	8000688 <__aeabi_fdiv+0xc0>
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	2600      	movs	r6, #0
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	03d2      	lsls	r2, r2, #15
 8000772:	e789      	b.n	8000688 <__aeabi_fdiv+0xc0>
 8000774:	2300      	movs	r3, #0
 8000776:	4698      	mov	r8, r3
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	03d2      	lsls	r2, r2, #15
 800077c:	4215      	tst	r5, r2
 800077e:	d008      	beq.n	8000792 <__aeabi_fdiv+0x1ca>
 8000780:	4643      	mov	r3, r8
 8000782:	4213      	tst	r3, r2
 8000784:	d105      	bne.n	8000792 <__aeabi_fdiv+0x1ca>
 8000786:	431a      	orrs	r2, r3
 8000788:	0252      	lsls	r2, r2, #9
 800078a:	0026      	movs	r6, r4
 800078c:	20ff      	movs	r0, #255	; 0xff
 800078e:	0a52      	lsrs	r2, r2, #9
 8000790:	e77a      	b.n	8000688 <__aeabi_fdiv+0xc0>
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	03d2      	lsls	r2, r2, #15
 8000796:	432a      	orrs	r2, r5
 8000798:	0252      	lsls	r2, r2, #9
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	0a52      	lsrs	r2, r2, #9
 800079e:	e773      	b.n	8000688 <__aeabi_fdiv+0xc0>
 80007a0:	4642      	mov	r2, r8
 80007a2:	016b      	lsls	r3, r5, #5
 80007a4:	0155      	lsls	r5, r2, #5
 80007a6:	42ab      	cmp	r3, r5
 80007a8:	d21a      	bcs.n	80007e0 <__aeabi_fdiv+0x218>
 80007aa:	201b      	movs	r0, #27
 80007ac:	2200      	movs	r2, #0
 80007ae:	3f01      	subs	r7, #1
 80007b0:	2601      	movs	r6, #1
 80007b2:	001c      	movs	r4, r3
 80007b4:	0052      	lsls	r2, r2, #1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	db01      	blt.n	80007c0 <__aeabi_fdiv+0x1f8>
 80007bc:	429d      	cmp	r5, r3
 80007be:	d801      	bhi.n	80007c4 <__aeabi_fdiv+0x1fc>
 80007c0:	1b5b      	subs	r3, r3, r5
 80007c2:	4332      	orrs	r2, r6
 80007c4:	3801      	subs	r0, #1
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d1f3      	bne.n	80007b2 <__aeabi_fdiv+0x1ea>
 80007ca:	1e58      	subs	r0, r3, #1
 80007cc:	4183      	sbcs	r3, r0
 80007ce:	4313      	orrs	r3, r2
 80007d0:	001d      	movs	r5, r3
 80007d2:	003b      	movs	r3, r7
 80007d4:	337f      	adds	r3, #127	; 0x7f
 80007d6:	000e      	movs	r6, r1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd00      	ble.n	80007de <__aeabi_fdiv+0x216>
 80007dc:	e73d      	b.n	800065a <__aeabi_fdiv+0x92>
 80007de:	e7aa      	b.n	8000736 <__aeabi_fdiv+0x16e>
 80007e0:	201a      	movs	r0, #26
 80007e2:	2201      	movs	r2, #1
 80007e4:	1b5b      	subs	r3, r3, r5
 80007e6:	e7e3      	b.n	80007b0 <__aeabi_fdiv+0x1e8>
 80007e8:	01aa      	lsls	r2, r5, #6
 80007ea:	2000      	movs	r0, #0
 80007ec:	0a52      	lsrs	r2, r2, #9
 80007ee:	e74b      	b.n	8000688 <__aeabi_fdiv+0xc0>
 80007f0:	08003e90 	.word	0x08003e90
 80007f4:	f7ffffff 	.word	0xf7ffffff
 80007f8:	08003ed0 	.word	0x08003ed0

080007fc <__aeabi_i2f>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2800      	cmp	r0, #0
 8000800:	d013      	beq.n	800082a <__aeabi_i2f+0x2e>
 8000802:	17c3      	asrs	r3, r0, #31
 8000804:	18c5      	adds	r5, r0, r3
 8000806:	405d      	eors	r5, r3
 8000808:	0fc4      	lsrs	r4, r0, #31
 800080a:	0028      	movs	r0, r5
 800080c:	f000 f848 	bl	80008a0 <__clzsi2>
 8000810:	239e      	movs	r3, #158	; 0x9e
 8000812:	0001      	movs	r1, r0
 8000814:	1a1b      	subs	r3, r3, r0
 8000816:	2b96      	cmp	r3, #150	; 0x96
 8000818:	dc0f      	bgt.n	800083a <__aeabi_i2f+0x3e>
 800081a:	2808      	cmp	r0, #8
 800081c:	d031      	beq.n	8000882 <__aeabi_i2f+0x86>
 800081e:	3908      	subs	r1, #8
 8000820:	408d      	lsls	r5, r1
 8000822:	026d      	lsls	r5, r5, #9
 8000824:	0a6d      	lsrs	r5, r5, #9
 8000826:	b2d8      	uxtb	r0, r3
 8000828:	e002      	b.n	8000830 <__aeabi_i2f+0x34>
 800082a:	2400      	movs	r4, #0
 800082c:	2000      	movs	r0, #0
 800082e:	2500      	movs	r5, #0
 8000830:	05c0      	lsls	r0, r0, #23
 8000832:	4328      	orrs	r0, r5
 8000834:	07e4      	lsls	r4, r4, #31
 8000836:	4320      	orrs	r0, r4
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	2b99      	cmp	r3, #153	; 0x99
 800083c:	dd0c      	ble.n	8000858 <__aeabi_i2f+0x5c>
 800083e:	2205      	movs	r2, #5
 8000840:	1a12      	subs	r2, r2, r0
 8000842:	0028      	movs	r0, r5
 8000844:	40d0      	lsrs	r0, r2
 8000846:	0002      	movs	r2, r0
 8000848:	0008      	movs	r0, r1
 800084a:	301b      	adds	r0, #27
 800084c:	4085      	lsls	r5, r0
 800084e:	0028      	movs	r0, r5
 8000850:	1e45      	subs	r5, r0, #1
 8000852:	41a8      	sbcs	r0, r5
 8000854:	4302      	orrs	r2, r0
 8000856:	0015      	movs	r5, r2
 8000858:	2905      	cmp	r1, #5
 800085a:	dc16      	bgt.n	800088a <__aeabi_i2f+0x8e>
 800085c:	002a      	movs	r2, r5
 800085e:	480f      	ldr	r0, [pc, #60]	; (800089c <__aeabi_i2f+0xa0>)
 8000860:	4002      	ands	r2, r0
 8000862:	076e      	lsls	r6, r5, #29
 8000864:	d009      	beq.n	800087a <__aeabi_i2f+0x7e>
 8000866:	260f      	movs	r6, #15
 8000868:	4035      	ands	r5, r6
 800086a:	2d04      	cmp	r5, #4
 800086c:	d005      	beq.n	800087a <__aeabi_i2f+0x7e>
 800086e:	3204      	adds	r2, #4
 8000870:	0155      	lsls	r5, r2, #5
 8000872:	d502      	bpl.n	800087a <__aeabi_i2f+0x7e>
 8000874:	239f      	movs	r3, #159	; 0x9f
 8000876:	4002      	ands	r2, r0
 8000878:	1a5b      	subs	r3, r3, r1
 800087a:	0192      	lsls	r2, r2, #6
 800087c:	0a55      	lsrs	r5, r2, #9
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	e7d6      	b.n	8000830 <__aeabi_i2f+0x34>
 8000882:	026d      	lsls	r5, r5, #9
 8000884:	2096      	movs	r0, #150	; 0x96
 8000886:	0a6d      	lsrs	r5, r5, #9
 8000888:	e7d2      	b.n	8000830 <__aeabi_i2f+0x34>
 800088a:	1f4a      	subs	r2, r1, #5
 800088c:	4095      	lsls	r5, r2
 800088e:	002a      	movs	r2, r5
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <__aeabi_i2f+0xa0>)
 8000892:	4002      	ands	r2, r0
 8000894:	076e      	lsls	r6, r5, #29
 8000896:	d0f0      	beq.n	800087a <__aeabi_i2f+0x7e>
 8000898:	e7e5      	b.n	8000866 <__aeabi_i2f+0x6a>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	fbffffff 	.word	0xfbffffff

080008a0 <__clzsi2>:
 80008a0:	211c      	movs	r1, #28
 80008a2:	2301      	movs	r3, #1
 80008a4:	041b      	lsls	r3, r3, #16
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d301      	bcc.n	80008ae <__clzsi2+0xe>
 80008aa:	0c00      	lsrs	r0, r0, #16
 80008ac:	3910      	subs	r1, #16
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	4298      	cmp	r0, r3
 80008b2:	d301      	bcc.n	80008b8 <__clzsi2+0x18>
 80008b4:	0a00      	lsrs	r0, r0, #8
 80008b6:	3908      	subs	r1, #8
 80008b8:	091b      	lsrs	r3, r3, #4
 80008ba:	4298      	cmp	r0, r3
 80008bc:	d301      	bcc.n	80008c2 <__clzsi2+0x22>
 80008be:	0900      	lsrs	r0, r0, #4
 80008c0:	3904      	subs	r1, #4
 80008c2:	a202      	add	r2, pc, #8	; (adr r2, 80008cc <__clzsi2+0x2c>)
 80008c4:	5c10      	ldrb	r0, [r2, r0]
 80008c6:	1840      	adds	r0, r0, r1
 80008c8:	4770      	bx	lr
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	02020304 	.word	0x02020304
 80008d0:	01010101 	.word	0x01010101
	...

080008dc <__clzdi2>:
 80008dc:	b510      	push	{r4, lr}
 80008de:	2900      	cmp	r1, #0
 80008e0:	d103      	bne.n	80008ea <__clzdi2+0xe>
 80008e2:	f7ff ffdd 	bl	80008a0 <__clzsi2>
 80008e6:	3020      	adds	r0, #32
 80008e8:	e002      	b.n	80008f0 <__clzdi2+0x14>
 80008ea:	0008      	movs	r0, r1
 80008ec:	f7ff ffd8 	bl	80008a0 <__clzsi2>
 80008f0:	bd10      	pop	{r4, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fa71 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f82d 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 f92d 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000906:	f000 f8dd 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800090a:	f000 f86f 	bl	80009ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <main+0x60>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fdfd 	bl	8001510 <HAL_ADC_Start>
  uint16_t vbat_value;

  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <main+0x60>)
 8000918:	2164      	movs	r1, #100	; 0x64
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fe82 	bl	8001624 <HAL_ADC_PollForConversion>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d106      	bne.n	8000932 <main+0x3e>
      vbat_value = HAL_ADC_GetValue(&hadc1);
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <main+0x60>)
 8000926:	0018      	movs	r0, r3
 8000928:	f000 ff10 	bl	800174c <HAL_ADC_GetValue>
 800092c:	0002      	movs	r2, r0
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	801a      	strh	r2, [r3, #0]
  }
  HAL_ADC_Stop(&hadc1);
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <main+0x60>)
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fe39 	bl	80015ac <HAL_ADC_Stop>

  float vbat_voltage = (1.2f * 4095) / vbat_value; // 4095 is the maximum ADC value for 12-bit resolution
 800093a:	1dbb      	adds	r3, r7, #6
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff ff5c 	bl	80007fc <__aeabi_i2f>
 8000944:	1c03      	adds	r3, r0, #0
 8000946:	1c19      	adds	r1, r3, #0
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <main+0x64>)
 800094a:	f7ff fe3d 	bl	80005c8 <__aeabi_fdiv>
 800094e:	1c03      	adds	r3, r0, #0
 8000950:	603b      	str	r3, [r7, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x5e>
 8000954:	20000028 	.word	0x20000028
 8000958:	45999000 	.word	0x45999000

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b095      	sub	sp, #84	; 0x54
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	2414      	movs	r4, #20
 8000964:	193b      	adds	r3, r7, r4
 8000966:	0018      	movs	r0, r3
 8000968:	233c      	movs	r3, #60	; 0x3c
 800096a:	001a      	movs	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fa57 	bl	8003e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	0018      	movs	r0, r3
 8000976:	2310      	movs	r3, #16
 8000978:	001a      	movs	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	f003 fa50 	bl	8003e20 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	0018      	movs	r0, r3
 8000986:	f001 fc29 	bl	80021dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fc61 	bl	8002274 <HAL_RCC_OscConfig>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009b6:	f000 f923 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2100      	movs	r1, #0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 ffac 	bl	8002934 <HAL_RCC_ClockConfig>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009e0:	f000 f90e 	bl	8000c00 <Error_Handler>
  }
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b015      	add	sp, #84	; 0x54
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	0018      	movs	r0, r3
 80009f6:	230c      	movs	r3, #12
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f003 fa10 	bl	8003e20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a00:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <MX_ADC1_Init+0xd0>)
 8000a04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a06:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	05d2      	lsls	r2, r2, #23
 8000a0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1a:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a40:	2220      	movs	r2, #32
 8000a42:	2100      	movs	r1, #0
 8000a44:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a54:	222c      	movs	r2, #44	; 0x2c
 8000a56:	2100      	movs	r1, #0
 8000a58:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a62:	2203      	movs	r2, #3
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a6e:	223c      	movs	r2, #60	; 0x3c
 8000a70:	2100      	movs	r1, #0
 8000a72:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fb9f 	bl	80011c0 <HAL_ADC_Init>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000a86:	f000 f8bb 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <MX_ADC1_Init+0xd4>)
 8000a8e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	1d3a      	adds	r2, r7, #4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_ADC1_Init+0xcc>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fe5e 	bl	8001764 <HAL_ADC_ConfigChannel>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000aac:	f000 f8a8 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b004      	add	sp, #16
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	40012400 	.word	0x40012400
 8000ac0:	b8004000 	.word	0xb8004000

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000aca:	4a24      	ldr	r2, [pc, #144]	; (8000b5c <MX_USART2_UART_Init+0x98>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000ad0:	22e1      	movs	r2, #225	; 0xe1
 8000ad2:	0252      	lsls	r2, r2, #9
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f002 faf6 	bl	8003100 <HAL_UART_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f872 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	0018      	movs	r0, r3
 8000b22:	f003 f89d 	bl	8003c60 <HAL_UARTEx_SetTxFifoThreshold>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f869 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f003 f8d4 	bl	8003ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f860 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x94>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f003 f852 	bl	8003bec <HAL_UARTEx_DisableFifoMode>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f858 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	2000008c 	.word	0x2000008c
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	240c      	movs	r4, #12
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	2314      	movs	r3, #20
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2100      	movs	r1, #0
 8000b72:	f003 f955 	bl	8003e20 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	2204      	movs	r2, #4
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b94:	2120      	movs	r1, #32
 8000b96:	430a      	orrs	r2, r1
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_GPIO_Init+0x9c>)
 8000bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bbe:	23a0      	movs	r3, #160	; 0xa0
 8000bc0:	05db      	lsls	r3, r3, #23
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f001 faea 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bcc:	0021      	movs	r1, r4
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2202      	movs	r2, #2
 8000be4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000be6:	187a      	adds	r2, r7, r1
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f96a 	bl	8001ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b009      	add	sp, #36	; 0x24
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	2180      	movs	r1, #128	; 0x80
 8000c32:	0549      	lsls	r1, r1, #21
 8000c34:	430a      	orrs	r2, r1
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_MspInit+0x44>)
 8000c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	055b      	lsls	r3, r3, #21
 8000c40:	4013      	ands	r3, r2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_ADC_MspInit+0x38>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d10d      	bne.n	8000c82 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_ADC_MspInit+0x3c>)
 8000c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_ADC_MspInit+0x3c>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0349      	lsls	r1, r1, #13
 8000c70:	430a      	orrs	r2, r1
 8000c72:	641a      	str	r2, [r3, #64]	; 0x40
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_ADC_MspInit+0x3c>)
 8000c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	035b      	lsls	r3, r3, #13
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40012400 	.word	0x40012400
 8000c90:	40021000 	.word	0x40021000

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b09d      	sub	sp, #116	; 0x74
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	235c      	movs	r3, #92	; 0x5c
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f003 f8ba 	bl	8003e20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	2410      	movs	r4, #16
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	234c      	movs	r3, #76	; 0x4c
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f003 f8b2 	bl	8003e20 <memset>
  if(huart->Instance==USART2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <HAL_UART_MspInit+0xb8>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d13e      	bne.n	8000d44 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	2202      	movs	r2, #2
 8000cca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ccc:	193b      	adds	r3, r7, r4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 ffd7 	bl	8002c88 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	1e03      	subs	r3, r0, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cde:	f7ff ff8f 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000ce4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	; 0x34
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0xbc>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d16:	215c      	movs	r1, #92	; 0x5c
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 f8c2 	bl	8001ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b01d      	add	sp, #116	; 0x74
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40021000 	.word	0x40021000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f89c 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d90:	f7ff fff7 	bl	8000d82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dba:	f003 f839 	bl	8003e30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000dbe:	f7ff fd99 	bl	80008f4 <main>

08000dc2 <LoopForever>:

LoopForever:
  b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	08003fa8 	.word	0x08003fa8
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000124 	.word	0x20000124

08000ddc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_COMP_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_Init+0x3c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_Init+0x3c>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	0049      	lsls	r1, r1, #1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f810 	bl	8000e20 <HAL_InitTick>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e001      	b.n	8000e10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fefe 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e28:	230f      	movs	r3, #15
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_InitTick+0x88>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d02b      	beq.n	8000e90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_InitTick+0x8c>)
 8000e3a:	681c      	ldr	r4, [r3, #0]
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_InitTick+0x88>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	0019      	movs	r1, r3
 8000e42:	23fa      	movs	r3, #250	; 0xfa
 8000e44:	0098      	lsls	r0, r3, #2
 8000e46:	f7ff f95d 	bl	8000104 <__udivsi3>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	0020      	movs	r0, r4
 8000e50:	f7ff f958 	bl	8000104 <__udivsi3>
 8000e54:	0003      	movs	r3, r0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 f829 	bl	8001eae <HAL_SYSTICK_Config>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d112      	bne.n	8000e86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d80a      	bhi.n	8000e7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f808 	bl	8001e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_InitTick+0x90>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e00d      	b.n	8000e98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e008      	b.n	8000e98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e86:	230f      	movs	r3, #15
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e003      	b.n	8000e98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	230f      	movs	r3, #15
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	781b      	ldrb	r3, [r3, #0]
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b005      	add	sp, #20
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x1c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_IncTick+0x20>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	18d2      	adds	r2, r2, r3
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_IncTick+0x20>)
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000120 	.word	0x20000120

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <HAL_GetTick+0x10>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	20000120 	.word	0x20000120

08000eec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000efc:	401a      	ands	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	fe3fffff 	.word	0xfe3fffff

08000f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	23e0      	movs	r3, #224	; 0xe0
 8000f22:	045b      	lsls	r3, r3, #17
 8000f24:	4013      	ands	r3, r2
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	2104      	movs	r1, #4
 8000f42:	400a      	ands	r2, r1
 8000f44:	2107      	movs	r1, #7
 8000f46:	4091      	lsls	r1, r2
 8000f48:	000a      	movs	r2, r1
 8000f4a:	43d2      	mvns	r2, r2
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2104      	movs	r1, #4
 8000f52:	400b      	ands	r3, r1
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	4099      	lsls	r1, r3
 8000f58:	000b      	movs	r3, r1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	2104      	movs	r1, #4
 8000f7a:	400a      	ands	r2, r1
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	000a      	movs	r2, r1
 8000f82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	2104      	movs	r1, #4
 8000f88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	0013      	movs	r3, r2
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	23c0      	movs	r3, #192	; 0xc0
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d101      	bne.n	8000fae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	211f      	movs	r1, #31
 8000fcc:	400a      	ands	r2, r1
 8000fce:	210f      	movs	r1, #15
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	43d2      	mvns	r2, r2
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	0e9b      	lsrs	r3, r3, #26
 8000fdc:	210f      	movs	r1, #15
 8000fde:	4019      	ands	r1, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	201f      	movs	r0, #31
 8000fe4:	4003      	ands	r3, r0
 8000fe6:	4099      	lsls	r1, r3
 8000fe8:	000b      	movs	r3, r1
 8000fea:	431a      	orrs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	035b      	lsls	r3, r3, #13
 800100a:	0b5b      	lsrs	r3, r3, #13
 800100c:	431a      	orrs	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b002      	add	sp, #8
 8001018:	bd80      	pop	{r7, pc}

0800101a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	0352      	lsls	r2, r2, #13
 800102c:	0b52      	lsrs	r2, r2, #13
 800102e:	43d2      	mvns	r2, r2
 8001030:	401a      	ands	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	0212      	lsls	r2, r2, #8
 8001054:	43d2      	mvns	r2, r2
 8001056:	401a      	ands	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	400b      	ands	r3, r1
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001062:	400b      	ands	r3, r1
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	07ffff00 	.word	0x07ffff00

08001078 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <LL_ADC_EnableInternalRegulator+0x24>)
 8001086:	4013      	ands	r3, r2
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	0552      	lsls	r2, r2, #21
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	6fffffe8 	.word	0x6fffffe8

080010a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	401a      	ands	r2, r3
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	055b      	lsls	r3, r3, #21
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d101      	bne.n	80010be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010be:	2300      	movs	r3, #0
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <LL_ADC_Enable+0x20>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	7fffffe8 	.word	0x7fffffe8

080010ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <LL_ADC_Disable+0x20>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	2202      	movs	r2, #2
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001104:	46c0      	nop			; (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	7fffffe8 	.word	0x7fffffe8

08001110 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2201      	movs	r2, #1
 800111e:	4013      	ands	r3, r2
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <LL_ADC_IsEnabled+0x18>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <LL_ADC_IsEnabled+0x1a>
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	2b02      	cmp	r3, #2
 8001144:	d101      	bne.n	800114a <LL_ADC_IsDisableOngoing+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsDisableOngoing+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <LL_ADC_REG_StartConversion+0x20>)
 8001162:	4013      	ands	r3, r2
 8001164:	2204      	movs	r2, #4
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	7fffffe8 	.word	0x7fffffe8

08001178 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <LL_ADC_REG_StopConversion+0x20>)
 8001186:	4013      	ands	r3, r2
 8001188:	2210      	movs	r2, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	7fffffe8 	.word	0x7fffffe8

0800119c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2204      	movs	r2, #4
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d101      	bne.n	80011b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	0018      	movs	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b002      	add	sp, #8
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	231f      	movs	r3, #31
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e17f      	b.n	80014e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fd2f 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2254      	movs	r2, #84	; 0x54
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ff49 	bl	80010a0 <LL_ADC_IsInternalRegulatorEnabled>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d115      	bne.n	800123e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff ff2e 	bl	8001078 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800121c:	4bb4      	ldr	r3, [pc, #720]	; (80014f0 <HAL_ADC_Init+0x330>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	49b4      	ldr	r1, [pc, #720]	; (80014f4 <HAL_ADC_Init+0x334>)
 8001222:	0018      	movs	r0, r3
 8001224:	f7fe ff6e 	bl	8000104 <__udivsi3>
 8001228:	0003      	movs	r3, r0
 800122a:	3301      	adds	r3, #1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001230:	e002      	b.n	8001238 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff2c 	bl	80010a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001248:	1e03      	subs	r3, r0, #0
 800124a:	d10f      	bne.n	800126c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	2210      	movs	r2, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2201      	movs	r2, #1
 800125e:	431a      	orrs	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001264:	231f      	movs	r3, #31
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ff93 	bl	800119c <LL_ADC_REG_IsConversionOngoing>
 8001276:	0003      	movs	r3, r0
 8001278:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	2210      	movs	r2, #16
 8001280:	4013      	ands	r3, r2
 8001282:	d000      	beq.n	8001286 <HAL_ADC_Init+0xc6>
 8001284:	e122      	b.n	80014cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d000      	beq.n	800128e <HAL_ADC_Init+0xce>
 800128c:	e11e      	b.n	80014cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	4a99      	ldr	r2, [pc, #612]	; (80014f8 <HAL_ADC_Init+0x338>)
 8001294:	4013      	ands	r3, r2
 8001296:	2202      	movs	r2, #2
 8001298:	431a      	orrs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff34 	bl	8001110 <LL_ADC_IsEnabled>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d000      	beq.n	80012ae <HAL_ADC_Init+0xee>
 80012ac:	e0ad      	b.n	800140a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7e1b      	ldrb	r3, [r3, #24]
 80012b6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7e5b      	ldrb	r3, [r3, #25]
 80012be:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7e9b      	ldrb	r3, [r3, #26]
 80012c6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <HAL_ADC_Init+0x118>
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	e000      	b.n	80012da <HAL_ADC_Init+0x11a>
 80012d8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012da:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012e0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da04      	bge.n	80012f4 <HAL_ADC_Init+0x134>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	e001      	b.n	80012f8 <HAL_ADC_Init+0x138>
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80012f8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	212c      	movs	r1, #44	; 0x2c
 80012fe:	5c5b      	ldrb	r3, [r3, r1]
 8001300:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001302:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2220      	movs	r2, #32
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d115      	bne.n	8001340 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d105      	bne.n	8001328 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	0252      	lsls	r2, r2, #9
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	e00b      	b.n	8001340 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	2220      	movs	r2, #32
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	2201      	movs	r2, #1
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134c:	23e0      	movs	r3, #224	; 0xe0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001356:	4313      	orrs	r3, r2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_ADC_Init+0x33c>)
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	430a      	orrs	r2, r1
 8001372:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	0f9b      	lsrs	r3, r3, #30
 800137a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001380:	4313      	orrs	r3, r2
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	223c      	movs	r2, #60	; 0x3c
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d111      	bne.n	80013b6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0f9b      	lsrs	r3, r3, #30
 8001398:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800139e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80013a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80013aa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	2201      	movs	r2, #1
 80013b2:	4313      	orrs	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_ADC_Init+0x340>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	23c0      	movs	r3, #192	; 0xc0
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d018      	beq.n	800140a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d012      	beq.n	800140a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	061b      	lsls	r3, r3, #24
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d00c      	beq.n	800140a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013f0:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_ADC_Init+0x344>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a44      	ldr	r2, [pc, #272]	; (8001508 <HAL_ADC_Init+0x348>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	039b      	lsls	r3, r3, #14
 8001402:	401a      	ands	r2, r3
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <HAL_ADC_Init+0x344>)
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	001a      	movs	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f7ff fd8a 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	493a      	ldr	r1, [pc, #232]	; (800150c <HAL_ADC_Init+0x34c>)
 8001424:	001a      	movs	r2, r3
 8001426:	f7ff fd82 	bl	8000f2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2110      	movs	r1, #16
 800143e:	4249      	negs	r1, r1
 8001440:	430a      	orrs	r2, r1
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
 8001444:	e018      	b.n	8001478 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	039b      	lsls	r3, r3, #14
 800144e:	429a      	cmp	r2, r3
 8001450:	d112      	bne.n	8001478 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	3b01      	subs	r3, #1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	221c      	movs	r2, #28
 8001462:	4013      	ands	r3, r2
 8001464:	2210      	movs	r2, #16
 8001466:	4252      	negs	r2, r2
 8001468:	409a      	lsls	r2, r3
 800146a:	0011      	movs	r1, r2
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2100      	movs	r1, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fd72 	bl	8000f68 <LL_ADC_GetSamplingTimeCommonChannels>
 8001484:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800148a:	429a      	cmp	r2, r3
 800148c:	d10b      	bne.n	80014a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	2203      	movs	r2, #3
 800149a:	4393      	bics	r3, r2
 800149c:	2201      	movs	r2, #1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014a4:	e01c      	b.n	80014e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	2212      	movs	r2, #18
 80014ac:	4393      	bics	r3, r2
 80014ae:	2210      	movs	r2, #16
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	2201      	movs	r2, #1
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80014c2:	231f      	movs	r3, #31
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014ca:	e009      	b.n	80014e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	2210      	movs	r2, #16
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014d8:	231f      	movs	r3, #31
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014e0:	231f      	movs	r3, #31
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b008      	add	sp, #32
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	20000000 	.word	0x20000000
 80014f4:	00030d40 	.word	0x00030d40
 80014f8:	fffffefd 	.word	0xfffffefd
 80014fc:	fffe0201 	.word	0xfffe0201
 8001500:	1ffffc02 	.word	0x1ffffc02
 8001504:	40012708 	.word	0x40012708
 8001508:	ffc3ffff 	.word	0xffc3ffff
 800150c:	07ffff04 	.word	0x07ffff04

08001510 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff fe3d 	bl	800119c <LL_ADC_REG_IsConversionOngoing>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d135      	bne.n	8001592 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2254      	movs	r2, #84	; 0x54
 800152a:	5c9b      	ldrb	r3, [r3, r2]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_ADC_Start+0x24>
 8001530:	2302      	movs	r3, #2
 8001532:	e035      	b.n	80015a0 <HAL_ADC_Start+0x90>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2254      	movs	r2, #84	; 0x54
 8001538:	2101      	movs	r1, #1
 800153a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800153c:	250f      	movs	r5, #15
 800153e:	197c      	adds	r4, r7, r5
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	0018      	movs	r0, r3
 8001544:	f000 fb28 	bl	8001b98 <ADC_Enable>
 8001548:	0003      	movs	r3, r0
 800154a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800154c:	197b      	adds	r3, r7, r5
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d119      	bne.n	8001588 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_ADC_Start+0x98>)
 800155a:	4013      	ands	r3, r2
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	0052      	lsls	r2, r2, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	221c      	movs	r2, #28
 8001572:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2254      	movs	r2, #84	; 0x54
 8001578:	2100      	movs	r1, #0
 800157a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fde7 	bl	8001154 <LL_ADC_REG_StartConversion>
 8001586:	e008      	b.n	800159a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2254      	movs	r2, #84	; 0x54
 800158c:	2100      	movs	r1, #0
 800158e:	5499      	strb	r1, [r3, r2]
 8001590:	e003      	b.n	800159a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001592:	230f      	movs	r3, #15
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	2202      	movs	r2, #2
 8001598:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800159a:	230f      	movs	r3, #15
 800159c:	18fb      	adds	r3, r7, r3
 800159e:	781b      	ldrb	r3, [r3, #0]
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}
 80015a8:	fffff0fe 	.word	0xfffff0fe

080015ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2254      	movs	r2, #84	; 0x54
 80015b8:	5c9b      	ldrb	r3, [r3, r2]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Stop+0x16>
 80015be:	2302      	movs	r3, #2
 80015c0:	e029      	b.n	8001616 <HAL_ADC_Stop+0x6a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2254      	movs	r2, #84	; 0x54
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80015ca:	250f      	movs	r5, #15
 80015cc:	197c      	adds	r4, r7, r5
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 fa9f 	bl	8001b14 <ADC_ConversionStop>
 80015d6:	0003      	movs	r3, r0
 80015d8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015da:	197b      	adds	r3, r7, r5
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d112      	bne.n	8001608 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015e2:	197c      	adds	r4, r7, r5
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 fb5c 	bl	8001ca4 <ADC_Disable>
 80015ec:	0003      	movs	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015f0:	197b      	adds	r3, r7, r5
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_ADC_Stop+0x74>)
 80015fe:	4013      	ands	r3, r2
 8001600:	2201      	movs	r2, #1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2254      	movs	r2, #84	; 0x54
 800160c:	2100      	movs	r1, #0
 800160e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b004      	add	sp, #16
 800161c:	bdb0      	pop	{r4, r5, r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	fffffefe 	.word	0xfffffefe

08001624 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d102      	bne.n	800163c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001636:	2308      	movs	r3, #8
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e00f      	b.n	800165c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2201      	movs	r2, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	2220      	movs	r2, #32
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e072      	b.n	800173e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001658:	2304      	movs	r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800165c:	f7ff fc3c 	bl	8000ed8 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001664:	e01f      	b.n	80016a6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	d01c      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800166c:	f7ff fc34 	bl	8000ed8 <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d302      	bcc.n	8001682 <HAL_ADC_PollForConversion+0x5e>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d111      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	d10b      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	2204      	movs	r2, #4
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2254      	movs	r2, #84	; 0x54
 800169e:	2100      	movs	r1, #0
 80016a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e04b      	b.n	800173e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	d0d9      	beq.n	8001666 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff fc66 	bl	8000f96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d02e      	beq.n	800172c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e9b      	ldrb	r3, [r3, #26]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d12a      	bne.n	800172c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2208      	movs	r2, #8
 80016de:	4013      	ands	r3, r2
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d123      	bne.n	800172c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff fd57 	bl	800119c <LL_ADC_REG_IsConversionOngoing>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d110      	bne.n	8001714 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	210c      	movs	r1, #12
 80016fe:	438a      	bics	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_ADC_PollForConversion+0x124>)
 8001708:	4013      	ands	r3, r2
 800170a:	2201      	movs	r2, #1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58
 8001712:	e00b      	b.n	800172c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	2220      	movs	r2, #32
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2201      	movs	r2, #1
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d103      	bne.n	800173c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	220c      	movs	r2, #12
 800173a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	fffffefe 	.word	0xfffffefe

0800174c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2254      	movs	r2, #84	; 0x54
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x24>
 8001784:	2302      	movs	r3, #2
 8001786:	e1c0      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x3a6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2254      	movs	r2, #84	; 0x54
 800178c:	2101      	movs	r1, #1
 800178e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff fd01 	bl	800119c <LL_ADC_REG_IsConversionOngoing>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d000      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x3c>
 800179e:	e1a3      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d100      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x46>
 80017a8:	e143      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d004      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017ba:	4ac1      	ldr	r2, [pc, #772]	; (8001ac0 <HAL_ADC_ConfigChannel+0x35c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d108      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0019      	movs	r1, r3
 80017ca:	0010      	movs	r0, r2
 80017cc:	f7ff fc14 	bl	8000ff8 <LL_ADC_REG_SetSequencerChAdd>
 80017d0:	e0c9      	b.n	8001966 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	211f      	movs	r1, #31
 80017dc:	400b      	ands	r3, r1
 80017de:	210f      	movs	r1, #15
 80017e0:	4099      	lsls	r1, r3
 80017e2:	000b      	movs	r3, r1
 80017e4:	43db      	mvns	r3, r3
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	035b      	lsls	r3, r3, #13
 80017f0:	0b5b      	lsrs	r3, r3, #13
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x9c>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	0e9b      	lsrs	r3, r3, #26
 80017fa:	221f      	movs	r2, #31
 80017fc:	4013      	ands	r3, r2
 80017fe:	e098      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d000      	beq.n	800180c <HAL_ADC_ConfigChannel+0xa8>
 800180a:	e091      	b.n	8001930 <HAL_ADC_ConfigChannel+0x1cc>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d000      	beq.n	8001818 <HAL_ADC_ConfigChannel+0xb4>
 8001816:	e089      	b.n	800192c <HAL_ADC_ConfigChannel+0x1c8>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2204      	movs	r2, #4
 800181e:	4013      	ands	r3, r2
 8001820:	d000      	beq.n	8001824 <HAL_ADC_ConfigChannel+0xc0>
 8001822:	e081      	b.n	8001928 <HAL_ADC_ConfigChannel+0x1c4>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	4013      	ands	r3, r2
 800182c:	d000      	beq.n	8001830 <HAL_ADC_ConfigChannel+0xcc>
 800182e:	e079      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1c0>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2210      	movs	r2, #16
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_ConfigChannel+0xd8>
 800183a:	e071      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1bc>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2220      	movs	r2, #32
 8001842:	4013      	ands	r3, r2
 8001844:	d000      	beq.n	8001848 <HAL_ADC_ConfigChannel+0xe4>
 8001846:	e069      	b.n	800191c <HAL_ADC_ConfigChannel+0x1b8>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2240      	movs	r2, #64	; 0x40
 800184e:	4013      	ands	r3, r2
 8001850:	d000      	beq.n	8001854 <HAL_ADC_ConfigChannel+0xf0>
 8001852:	e061      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1b4>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	4013      	ands	r3, r2
 800185c:	d000      	beq.n	8001860 <HAL_ADC_ConfigChannel+0xfc>
 800185e:	e059      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1b0>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4013      	ands	r3, r2
 800186a:	d151      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1ac>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d149      	bne.n	800190c <HAL_ADC_ConfigChannel+0x1a8>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4013      	ands	r3, r2
 8001882:	d141      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1a4>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d139      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1a0>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	4013      	ands	r3, r2
 800189a:	d131      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x19c>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	019b      	lsls	r3, r3, #6
 80018a4:	4013      	ands	r3, r2
 80018a6:	d129      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x198>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	01db      	lsls	r3, r3, #7
 80018b0:	4013      	ands	r3, r2
 80018b2:	d121      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x194>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	4013      	ands	r3, r2
 80018be:	d119      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x190>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	4013      	ands	r3, r2
 80018ca:	d111      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x18c>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x188>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	4013      	ands	r3, r2
 80018e2:	d001      	beq.n	80018e8 <HAL_ADC_ConfigChannel+0x184>
 80018e4:	2312      	movs	r3, #18
 80018e6:	e024      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e022      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018ec:	2311      	movs	r3, #17
 80018ee:	e020      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018f0:	2310      	movs	r3, #16
 80018f2:	e01e      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018f4:	230f      	movs	r3, #15
 80018f6:	e01c      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018f8:	230e      	movs	r3, #14
 80018fa:	e01a      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 80018fc:	230d      	movs	r3, #13
 80018fe:	e018      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001900:	230c      	movs	r3, #12
 8001902:	e016      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001904:	230b      	movs	r3, #11
 8001906:	e014      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001908:	230a      	movs	r3, #10
 800190a:	e012      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 800190c:	2309      	movs	r3, #9
 800190e:	e010      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001910:	2308      	movs	r3, #8
 8001912:	e00e      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001914:	2307      	movs	r3, #7
 8001916:	e00c      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001918:	2306      	movs	r3, #6
 800191a:	e00a      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 800191c:	2305      	movs	r3, #5
 800191e:	e008      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001920:	2304      	movs	r3, #4
 8001922:	e006      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_ADC_ConfigChannel+0x1ce>
 8001930:	2300      	movs	r3, #0
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	6852      	ldr	r2, [r2, #4]
 8001936:	201f      	movs	r0, #31
 8001938:	4002      	ands	r2, r0
 800193a:	4093      	lsls	r3, r2
 800193c:	000a      	movs	r2, r1
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d808      	bhi.n	8001966 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	001a      	movs	r2, r3
 8001962:	f7ff fb29 	bl	8000fb8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6819      	ldr	r1, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	001a      	movs	r2, r3
 8001974:	f7ff fb64 	bl	8001040 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db00      	blt.n	8001982 <HAL_ADC_ConfigChannel+0x21e>
 8001980:	e0bc      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001982:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fac5 	bl	8000f14 <LL_ADC_GetCommonPathInternalCh>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4d      	ldr	r2, [pc, #308]	; (8001ac8 <HAL_ADC_ConfigChannel+0x364>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d122      	bne.n	80019de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a0:	d11d      	bne.n	80019de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0412      	lsls	r2, r2, #16
 80019a8:	4313      	orrs	r3, r2
 80019aa:	4a46      	ldr	r2, [pc, #280]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 80019ac:	0019      	movs	r1, r3
 80019ae:	0010      	movs	r0, r2
 80019b0:	f7ff fa9c 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <HAL_ADC_ConfigChannel+0x368>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4945      	ldr	r1, [pc, #276]	; (8001ad0 <HAL_ADC_ConfigChannel+0x36c>)
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7fe fba2 	bl	8000104 <__udivsi3>
 80019c0:	0003      	movs	r3, r0
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	0013      	movs	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	189b      	adds	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019ce:	e002      	b.n	80019d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f9      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019dc:	e08e      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a3c      	ldr	r2, [pc, #240]	; (8001ad4 <HAL_ADC_ConfigChannel+0x370>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d10e      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	045b      	lsls	r3, r3, #17
 80019ee:	4013      	ands	r3, r2
 80019f0:	d109      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0452      	lsls	r2, r2, #17
 80019f8:	4313      	orrs	r3, r2
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 80019fc:	0019      	movs	r1, r3
 80019fe:	0010      	movs	r0, r2
 8001a00:	f7ff fa74 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
 8001a04:	e07a      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a33      	ldr	r2, [pc, #204]	; (8001ad8 <HAL_ADC_ConfigChannel+0x374>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d000      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x2ae>
 8001a10:	e074      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	03db      	lsls	r3, r3, #15
 8001a18:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001a1a:	d000      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x2ba>
 8001a1c:	e06e      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	03d2      	lsls	r2, r2, #15
 8001a24:	4313      	orrs	r3, r2
 8001a26:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f7ff fa5e 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
 8001a30:	e064      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_ADC_ConfigChannel+0x35c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d107      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0019      	movs	r1, r3
 8001a52:	0010      	movs	r0, r2
 8001a54:	f7ff fae1 	bl	800101a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da4d      	bge.n	8001afc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff fa56 	bl	8000f14 <LL_ADC_GetCommonPathInternalCh>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <HAL_ADC_ConfigChannel+0x364>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d108      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_ADC_ConfigChannel+0x378>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001a7e:	0019      	movs	r1, r3
 8001a80:	0010      	movs	r0, r2
 8001a82:	f7ff fa33 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
 8001a86:	e039      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_ADC_ConfigChannel+0x370>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d108      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_ADC_ConfigChannel+0x37c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	0010      	movs	r0, r2
 8001a9e:	f7ff fa25 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
 8001aa2:	e02b      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_ADC_ConfigChannel+0x374>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d126      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_ADC_ConfigChannel+0x380>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_ADC_ConfigChannel+0x360>)
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	0010      	movs	r0, r2
 8001aba:	f7ff fa17 	bl	8000eec <LL_ADC_SetCommonPathInternalCh>
 8001abe:	e01d      	b.n	8001afc <HAL_ADC_ConfigChannel+0x398>
 8001ac0:	80000004 	.word	0x80000004
 8001ac4:	40012708 	.word	0x40012708
 8001ac8:	b0001000 	.word	0xb0001000
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	00030d40 	.word	0x00030d40
 8001ad4:	b8004000 	.word	0xb8004000
 8001ad8:	b4002000 	.word	0xb4002000
 8001adc:	ff7fffff 	.word	0xff7fffff
 8001ae0:	feffffff 	.word	0xfeffffff
 8001ae4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	2220      	movs	r2, #32
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001af4:	2317      	movs	r3, #23
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2254      	movs	r2, #84	; 0x54
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001b04:	2317      	movs	r3, #23
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	781b      	ldrb	r3, [r3, #0]
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b006      	add	sp, #24
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)

08001b14 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fb3b 	bl	800119c <LL_ADC_REG_IsConversionOngoing>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d031      	beq.n	8001b8e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff faff 	bl	8001132 <LL_ADC_IsDisableOngoing>
 8001b34:	1e03      	subs	r3, r0, #0
 8001b36:	d104      	bne.n	8001b42 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fb1b 	bl	8001178 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b42:	f7ff f9c9 	bl	8000ed8 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b4a:	e01a      	b.n	8001b82 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b4c:	f7ff f9c4 	bl	8000ed8 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d913      	bls.n	8001b82 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4013      	ands	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	2201      	movs	r2, #1
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e006      	b.n	8001b90 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1de      	bne.n	8001b4c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b004      	add	sp, #16
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fab1 	bl	8001110 <LL_ADC_IsEnabled>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d000      	beq.n	8001bb4 <ADC_Enable+0x1c>
 8001bb2:	e069      	b.n	8001c88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	4a36      	ldr	r2, [pc, #216]	; (8001c94 <ADC_Enable+0xfc>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e056      	b.n	8001c8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fa71 	bl	80010c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <ADC_Enable+0x100>)
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff f993 	bl	8000f14 <LL_ADC_GetCommonPathInternalCh>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00f      	beq.n	8001c18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <ADC_Enable+0x104>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4928      	ldr	r1, [pc, #160]	; (8001ca0 <ADC_Enable+0x108>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7fe fa80 	bl	8000104 <__udivsi3>
 8001c04:	0003      	movs	r3, r0
 8001c06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001c08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c0a:	e002      	b.n	8001c12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e5b      	ldrb	r3, [r3, #25]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d033      	beq.n	8001c88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f95a 	bl	8000ed8 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c28:	e027      	b.n	8001c7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7ff fa6e 	bl	8001110 <LL_ADC_IsEnabled>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d104      	bne.n	8001c42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fa43 	bl	80010c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c42:	f7ff f949 	bl	8000ed8 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d914      	bls.n	8001c7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d00d      	beq.n	8001c7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	2210      	movs	r2, #16
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6e:	2201      	movs	r2, #1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e007      	b.n	8001c8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d1d0      	bne.n	8001c2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	80000017 	.word	0x80000017
 8001c98:	40012708 	.word	0x40012708
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	00030d40 	.word	0x00030d40

08001ca4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fa3e 	bl	8001132 <LL_ADC_IsDisableOngoing>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff fa26 	bl	8001110 <LL_ADC_IsEnabled>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d046      	beq.n	8001d56 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d143      	bne.n	8001d56 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10d      	bne.n	8001cf8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff fa03 	bl	80010ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2203      	movs	r2, #3
 8001cec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cee:	f7ff f8f3 	bl	8000ed8 <HAL_GetTick>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001cf6:	e028      	b.n	8001d4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	2201      	movs	r2, #1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e021      	b.n	8001d58 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d14:	f7ff f8e0 	bl	8000ed8 <HAL_GetTick>
 8001d18:	0002      	movs	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d913      	bls.n	8001d4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	2210      	movs	r2, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	2201      	movs	r2, #1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e006      	b.n	8001d58 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2201      	movs	r2, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	d1de      	bne.n	8001d14 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	0002      	movs	r2, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b7f      	cmp	r3, #127	; 0x7f
 8001d74:	d828      	bhi.n	8001dc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <__NVIC_SetPriority+0xd4>)
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	33c0      	adds	r3, #192	; 0xc0
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	589b      	ldr	r3, [r3, r2]
 8001d86:	1dfa      	adds	r2, r7, #7
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	400a      	ands	r2, r1
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	21ff      	movs	r1, #255	; 0xff
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	43d2      	mvns	r2, r2
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	22ff      	movs	r2, #255	; 0xff
 8001da4:	401a      	ands	r2, r3
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	0018      	movs	r0, r3
 8001dac:	2303      	movs	r3, #3
 8001dae:	4003      	ands	r3, r0
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db4:	481f      	ldr	r0, [pc, #124]	; (8001e34 <__NVIC_SetPriority+0xd4>)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	33c0      	adds	r3, #192	; 0xc0
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dc6:	e031      	b.n	8001e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <__NVIC_SetPriority+0xd8>)
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0019      	movs	r1, r3
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	3b08      	subs	r3, #8
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3306      	adds	r3, #6
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	3304      	adds	r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1dfa      	adds	r2, r7, #7
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	0011      	movs	r1, r2
 8001de8:	2203      	movs	r2, #3
 8001dea:	400a      	ands	r2, r1
 8001dec:	00d2      	lsls	r2, r2, #3
 8001dee:	21ff      	movs	r1, #255	; 0xff
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	43d2      	mvns	r2, r2
 8001df6:	401a      	ands	r2, r3
 8001df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	401a      	ands	r2, r3
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0018      	movs	r0, r3
 8001e08:	2303      	movs	r3, #3
 8001e0a:	4003      	ands	r3, r0
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <__NVIC_SetPriority+0xd8>)
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	001c      	movs	r4, r3
 8001e18:	230f      	movs	r3, #15
 8001e1a:	4023      	ands	r3, r4
 8001e1c:	3b08      	subs	r3, #8
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	430a      	orrs	r2, r1
 8001e22:	3306      	adds	r3, #6
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	18c3      	adds	r3, r0, r3
 8001e28:	3304      	adds	r3, #4
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b003      	add	sp, #12
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	045b      	lsls	r3, r3, #17
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d301      	bcc.n	8001e54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e50:	2301      	movs	r3, #1
 8001e52:	e010      	b.n	8001e76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <SysTick_Config+0x44>)
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	425b      	negs	r3, r3
 8001e60:	2103      	movs	r1, #3
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff ff7c 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x44>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x44>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	210f      	movs	r1, #15
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	1c02      	adds	r2, r0, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff ffbf 	bl	8001e3c <SysTick_Config>
 8001ebe:	0003      	movs	r3, r0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e14d      	b.n	8002174 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4091      	lsls	r1, r2
 8001ee2:	000a      	movs	r2, r1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d100      	bne.n	8001ef0 <HAL_GPIO_Init+0x28>
 8001eee:	e13e      	b.n	800216e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d005      	beq.n	8001f08 <HAL_GPIO_Init+0x40>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d130      	bne.n	8001f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	409a      	lsls	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	43da      	mvns	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	2201      	movs	r2, #1
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d017      	beq.n	8001fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	409a      	lsls	r2, r3
 8001f84:	0013      	movs	r3, r2
 8001f86:	43da      	mvns	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	409a      	lsls	r2, r3
 8001f98:	0013      	movs	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2203      	movs	r2, #3
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d123      	bne.n	8001ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	58d3      	ldr	r3, [r2, r3]
 8001fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2107      	movs	r1, #7
 8001fde:	400b      	ands	r3, r1
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	43da      	mvns	r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	401a      	ands	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	029b      	lsls	r3, r3, #10
 8002036:	4013      	ands	r3, r2
 8002038:	d100      	bne.n	800203c <HAL_GPIO_Init+0x174>
 800203a:	e098      	b.n	800216e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x2c4>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3318      	adds	r3, #24
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	589b      	ldr	r3, [r3, r2]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	220f      	movs	r2, #15
 8002054:	409a      	lsls	r2, r3
 8002056:	0013      	movs	r3, r2
 8002058:	43da      	mvns	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	23a0      	movs	r3, #160	; 0xa0
 8002064:	05db      	lsls	r3, r3, #23
 8002066:	429a      	cmp	r2, r3
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x1d6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_GPIO_Init+0x2c8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1d2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_GPIO_Init+0x2cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1ce>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_GPIO_Init+0x2d0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1ca>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_GPIO_Init+0x2d4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1c6>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800208e:	2305      	movs	r3, #5
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x1d8>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x1d8>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x1d8>
 800209e:	2300      	movs	r3, #0
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	2103      	movs	r1, #3
 80020a4:	400a      	ands	r2, r1
 80020a6:	00d2      	lsls	r2, r2, #3
 80020a8:	4093      	lsls	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020b0:	4936      	ldr	r1, [pc, #216]	; (800218c <HAL_GPIO_Init+0x2c4>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3318      	adds	r3, #24
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_GPIO_Init+0x2c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	035b      	lsls	r3, r3, #13
 80020d6:	4013      	ands	r3, r2
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <HAL_GPIO_Init+0x2c4>)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_GPIO_Init+0x2c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	039b      	lsls	r3, r3, #14
 8002100:	4013      	ands	r3, r2
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_GPIO_Init+0x2c4>)
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8002114:	2384      	movs	r3, #132	; 0x84
 8002116:	58d3      	ldr	r3, [r2, r3]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43da      	mvns	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002138:	4914      	ldr	r1, [pc, #80]	; (800218c <HAL_GPIO_Init+0x2c4>)
 800213a:	2284      	movs	r2, #132	; 0x84
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	58d3      	ldr	r3, [r2, r3]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43da      	mvns	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	025b      	lsls	r3, r3, #9
 800215a:	4013      	ands	r3, r2
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002166:	4909      	ldr	r1, [pc, #36]	; (800218c <HAL_GPIO_Init+0x2c4>)
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	40da      	lsrs	r2, r3
 800217c:	1e13      	subs	r3, r2, #0
 800217e:	d000      	beq.n	8002182 <HAL_GPIO_Init+0x2ba>
 8002180:	e6aa      	b.n	8001ed8 <HAL_GPIO_Init+0x10>
  }
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021800 	.word	0x40021800
 8002190:	50000400 	.word	0x50000400
 8002194:	50000800 	.word	0x50000800
 8002198:	50000c00 	.word	0x50000c00
 800219c:	50001000 	.word	0x50001000

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	0008      	movs	r0, r1
 80021aa:	0011      	movs	r1, r2
 80021ac:	1cbb      	adds	r3, r7, #2
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	1c7b      	adds	r3, r7, #1
 80021b4:	1c0a      	adds	r2, r1, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c0:	1cbb      	adds	r3, r7, #2
 80021c2:	881a      	ldrh	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	1cbb      	adds	r3, r7, #2
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	0019      	movs	r1, r3
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d11f      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	0013      	movs	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	189b      	adds	r3, r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4912      	ldr	r1, [pc, #72]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800220e:	0018      	movs	r0, r3
 8002210:	f7fd ff78 	bl	8000104 <__udivsi3>
 8002214:	0003      	movs	r3, r0
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221a:	e008      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3b01      	subs	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e001      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e009      	b.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	401a      	ands	r2, r3
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	429a      	cmp	r2, r3
 800223e:	d0ed      	beq.n	800221c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40007000 	.word	0x40007000
 8002250:	fffff9ff 	.word	0xfffff9ff
 8002254:	20000000 	.word	0x20000000
 8002258:	000f4240 	.word	0x000f4240

0800225c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	23e0      	movs	r3, #224	; 0xe0
 8002266:	01db      	lsls	r3, r3, #7
 8002268:	4013      	ands	r3, r2
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f000 fb50 	bl	8002928 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_RCC_OscConfig+0x20>
 8002292:	e07c      	b.n	800238e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002294:	4bc3      	ldr	r3, [pc, #780]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2238      	movs	r2, #56	; 0x38
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800229e:	4bc1      	ldr	r3, [pc, #772]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2203      	movs	r2, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_OscConfig+0x40>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d002      	beq.n	80022ba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d10b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ba:	4bba      	ldr	r3, [pc, #744]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	4013      	ands	r3, r2
 80022c4:	d062      	beq.n	800238c <HAL_RCC_OscConfig+0x118>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d15e      	bne.n	800238c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e32a      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	025b      	lsls	r3, r3, #9
 80022da:	429a      	cmp	r2, r3
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a>
 80022de:	4bb1      	ldr	r3, [pc, #708]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4bb0      	ldr	r3, [pc, #704]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0249      	lsls	r1, r1, #9
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0xbc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	23a0      	movs	r3, #160	; 0xa0
 80022f4:	02db      	lsls	r3, r3, #11
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10e      	bne.n	8002318 <HAL_RCC_OscConfig+0xa4>
 80022fa:	4baa      	ldr	r3, [pc, #680]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4ba9      	ldr	r3, [pc, #676]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002300:	2180      	movs	r1, #128	; 0x80
 8002302:	02c9      	lsls	r1, r1, #11
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	4ba6      	ldr	r3, [pc, #664]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba5      	ldr	r3, [pc, #660]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e00b      	b.n	8002330 <HAL_RCC_OscConfig+0xbc>
 8002318:	4ba2      	ldr	r3, [pc, #648]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800231e:	49a2      	ldr	r1, [pc, #648]	; (80025a8 <HAL_RCC_OscConfig+0x334>)
 8002320:	400a      	ands	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	4b9f      	ldr	r3, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800232a:	49a0      	ldr	r1, [pc, #640]	; (80025ac <HAL_RCC_OscConfig+0x338>)
 800232c:	400a      	ands	r2, r1
 800232e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d014      	beq.n	8002362 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fdce 	bl	8000ed8 <HAL_GetTick>
 800233c:	0003      	movs	r3, r0
 800233e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002342:	f7fe fdc9 	bl	8000ed8 <HAL_GetTick>
 8002346:	0002      	movs	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e2e9      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002354:	4b93      	ldr	r3, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	4013      	ands	r3, r2
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0xce>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fdb9 	bl	8000ed8 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fdb4 	bl	8000ed8 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e2d4      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	029b      	lsls	r3, r3, #10
 8002386:	4013      	ands	r3, r2
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0xf8>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2202      	movs	r2, #2
 8002394:	4013      	ands	r3, r2
 8002396:	d100      	bne.n	800239a <HAL_RCC_OscConfig+0x126>
 8002398:	e099      	b.n	80024ce <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2238      	movs	r2, #56	; 0x38
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2203      	movs	r2, #3
 80023aa:	4013      	ands	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_OscConfig+0x146>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d135      	bne.n	800242c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4013      	ands	r3, r2
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x164>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e2a7      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b72      	ldr	r3, [pc, #456]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a74      	ldr	r2, [pc, #464]	; (80025b0 <HAL_RCC_OscConfig+0x33c>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	021a      	lsls	r2, r3, #8
 80023e8:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d112      	bne.n	800241a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023f4:	4b6b      	ldr	r3, [pc, #428]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x340>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0adb      	lsrs	r3, r3, #11
 800240e:	2207      	movs	r2, #7
 8002410:	4013      	ands	r3, r2
 8002412:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x344>)
 8002414:	40da      	lsrs	r2, r3
 8002416:	4b69      	ldr	r3, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x348>)
 8002418:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800241a:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x34c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe fcfe 	bl	8000e20 <HAL_InitTick>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d051      	beq.n	80024cc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e27d      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d030      	beq.n	8002496 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002434:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5e      	ldr	r2, [pc, #376]	; (80025b4 <HAL_RCC_OscConfig+0x340>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b56      	ldr	r3, [pc, #344]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0049      	lsls	r1, r1, #1
 8002452:	430a      	orrs	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fd3f 	bl	8000ed8 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe fd3a 	bl	8000ed8 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e25a      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002472:	4b4c      	ldr	r3, [pc, #304]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4013      	ands	r3, r2
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x33c>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	021a      	lsls	r2, r3, #8
 800248e:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e01b      	b.n	80024ce <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800249c:	4949      	ldr	r1, [pc, #292]	; (80025c4 <HAL_RCC_OscConfig+0x350>)
 800249e:	400a      	ands	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fd19 	bl	8000ed8 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fd14 	bl	8000ed8 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e234      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024be:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4013      	ands	r3, r2
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x238>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2208      	movs	r2, #8
 80024d4:	4013      	ands	r3, r2
 80024d6:	d047      	beq.n	8002568 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2238      	movs	r2, #56	; 0x38
 80024de:	4013      	ands	r3, r2
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	d10a      	bne.n	80024fa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024e4:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	2202      	movs	r2, #2
 80024ea:	4013      	ands	r3, r2
 80024ec:	d03c      	beq.n	8002568 <HAL_RCC_OscConfig+0x2f4>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d138      	bne.n	8002568 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e216      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d019      	beq.n	8002536 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002502:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7fe fce3 	bl	8000ed8 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fcde 	bl	8000ed8 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1fe      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x2a4>
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002538:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800253c:	2101      	movs	r1, #1
 800253e:	438a      	bics	r2, r1
 8002540:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fcc9 	bl	8000ed8 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe fcc4 	bl	8000ed8 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1e4      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2204      	movs	r2, #4
 800256e:	4013      	ands	r3, r2
 8002570:	d100      	bne.n	8002574 <HAL_RCC_OscConfig+0x300>
 8002572:	e0c7      	b.n	8002704 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002574:	231f      	movs	r3, #31
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800257c:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2238      	movs	r2, #56	; 0x38
 8002582:	4013      	ands	r3, r2
 8002584:	2b20      	cmp	r3, #32
 8002586:	d11f      	bne.n	80025c8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x330>)
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2202      	movs	r2, #2
 800258e:	4013      	ands	r3, r2
 8002590:	d100      	bne.n	8002594 <HAL_RCC_OscConfig+0x320>
 8002592:	e0b7      	b.n	8002704 <HAL_RCC_OscConfig+0x490>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d000      	beq.n	800259e <HAL_RCC_OscConfig+0x32a>
 800259c:	e0b2      	b.n	8002704 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c2      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	40021000 	.word	0x40021000
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	fffbffff 	.word	0xfffbffff
 80025b0:	ffff80ff 	.word	0xffff80ff
 80025b4:	ffffc7ff 	.word	0xffffc7ff
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004
 80025c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025c8:	4bb5      	ldr	r3, [pc, #724]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80025ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x364>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x366>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d011      	beq.n	8002602 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4bb0      	ldr	r3, [pc, #704]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80025e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e2:	4baf      	ldr	r3, [pc, #700]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0549      	lsls	r1, r1, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80025ec:	4bac      	ldr	r3, [pc, #688]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80025ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4ba8      	ldr	r3, [pc, #672]	; (80028a4 <HAL_RCC_OscConfig+0x630>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d11a      	bne.n	8002644 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260e:	4ba5      	ldr	r3, [pc, #660]	; (80028a4 <HAL_RCC_OscConfig+0x630>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4ba4      	ldr	r3, [pc, #656]	; (80028a4 <HAL_RCC_OscConfig+0x630>)
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	0049      	lsls	r1, r1, #1
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800261c:	f7fe fc5c 	bl	8000ed8 <HAL_GetTick>
 8002620:	0003      	movs	r3, r0
 8002622:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe fc57 	bl	8000ed8 <HAL_GetTick>
 800262a:	0002      	movs	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e177      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4b9a      	ldr	r3, [pc, #616]	; (80028a4 <HAL_RCC_OscConfig+0x630>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x3e6>
 800264c:	4b94      	ldr	r3, [pc, #592]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800264e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002650:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002652:	2101      	movs	r1, #1
 8002654:	430a      	orrs	r2, r1
 8002656:	65da      	str	r2, [r3, #92]	; 0x5c
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x420>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x408>
 8002662:	4b8f      	ldr	r3, [pc, #572]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002664:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002666:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002668:	2104      	movs	r1, #4
 800266a:	430a      	orrs	r2, r1
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c
 800266e:	4b8c      	ldr	r3, [pc, #560]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002672:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x420>
 800267c:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800267e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002680:	4b87      	ldr	r3, [pc, #540]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c
 8002688:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800268a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800268e:	2104      	movs	r1, #4
 8002690:	438a      	bics	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d014      	beq.n	80026c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fc1c 	bl	8000ed8 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fc17 	bl	8000ed8 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a7d      	ldr	r2, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x634>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e136      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b79      	ldr	r3, [pc, #484]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x432>
 80026c4:	e013      	b.n	80026ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fc07 	bl	8000ed8 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ce:	e009      	b.n	80026e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fc02 	bl	8000ed8 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	4a73      	ldr	r2, [pc, #460]	; (80028a8 <HAL_RCC_OscConfig+0x634>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e121      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e4:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ee:	231f      	movs	r3, #31
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80026fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80026fe:	496b      	ldr	r1, [pc, #428]	; (80028ac <HAL_RCC_OscConfig+0x638>)
 8002700:	400a      	ands	r2, r1
 8002702:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	4013      	ands	r3, r2
 800270c:	d039      	beq.n	8002782 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01b      	beq.n	800274e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002716:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	03c9      	lsls	r1, r1, #15
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fbd8 	bl	8000ed8 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7fe fbd3 	bl	8000ed8 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0f3      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002740:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	4013      	ands	r3, r2
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x4ba>
 800274c:	e019      	b.n	8002782 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002754:	4956      	ldr	r1, [pc, #344]	; (80028b0 <HAL_RCC_OscConfig+0x63c>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fbbd 	bl	8000ed8 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7fe fbb8 	bl	8000ed8 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0d8      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	4013      	ands	r3, r2
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d100      	bne.n	800278c <HAL_RCC_OscConfig+0x518>
 800278a:	e0cc      	b.n	8002926 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2238      	movs	r2, #56	; 0x38
 8002792:	4013      	ands	r3, r2
 8002794:	2b10      	cmp	r3, #16
 8002796:	d100      	bne.n	800279a <HAL_RCC_OscConfig+0x526>
 8002798:	e07b      	b.n	8002892 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d156      	bne.n	8002850 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80027a8:	4942      	ldr	r1, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x640>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fb93 	bl	8000ed8 <HAL_GetTick>
 80027b2:	0003      	movs	r3, r0
 80027b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe fb8e 	bl	8000ed8 <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0ae      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	049b      	lsls	r3, r3, #18
 80027d2:	4013      	ands	r3, r2
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <HAL_RCC_OscConfig+0x644>)
 80027dc:	4013      	ands	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	431a      	orrs	r2, r3
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002806:	430a      	orrs	r2, r1
 8002808:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	0449      	lsls	r1, r1, #17
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0549      	lsls	r1, r1, #21
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fb57 	bl	8000ed8 <HAL_GetTick>
 800282a:	0003      	movs	r3, r0
 800282c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe fb52 	bl	8000ed8 <HAL_GetTick>
 8002834:	0002      	movs	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e072      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	049b      	lsls	r3, r3, #18
 800284a:	4013      	ands	r3, r2
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x5bc>
 800284e:	e06a      	b.n	8002926 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002856:	4917      	ldr	r1, [pc, #92]	; (80028b4 <HAL_RCC_OscConfig+0x640>)
 8002858:	400a      	ands	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fb3c 	bl	8000ed8 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fb37 	bl	8000ed8 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e057      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	049b      	lsls	r3, r3, #18
 8002880:	4013      	ands	r3, r2
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_OscConfig+0x62c>)
 800288a:	490c      	ldr	r1, [pc, #48]	; (80028bc <HAL_RCC_OscConfig+0x648>)
 800288c:	400a      	ands	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	e049      	b.n	8002926 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d112      	bne.n	80028c0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e044      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	00001388 	.word	0x00001388
 80028ac:	efffffff 	.word	0xefffffff
 80028b0:	ffbfffff 	.word	0xffbfffff
 80028b4:	feffffff 	.word	0xfeffffff
 80028b8:	11c1808c 	.word	0x11c1808c
 80028bc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_OscConfig+0x6bc>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2203      	movs	r2, #3
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d126      	bne.n	8002922 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2270      	movs	r2, #112	; 0x70
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d11f      	bne.n	8002922 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	23fe      	movs	r3, #254	; 0xfe
 80028e6:	01db      	lsls	r3, r3, #7
 80028e8:	401a      	ands	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d116      	bne.n	8002922 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	23f8      	movs	r3, #248	; 0xf8
 80028f8:	039b      	lsls	r3, r3, #14
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d10e      	bne.n	8002922 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	23e0      	movs	r3, #224	; 0xe0
 8002908:	051b      	lsls	r3, r3, #20
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	0f5b      	lsrs	r3, r3, #29
 8002918:	075a      	lsls	r2, r3, #29
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b008      	add	sp, #32
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0e9      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2207      	movs	r2, #7
 800294e:	4013      	ands	r3, r2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d91e      	bls.n	8002994 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2207      	movs	r2, #7
 800295c:	4393      	bics	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002968:	f7fe fab6 	bl	8000ed8 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002970:	e009      	b.n	8002986 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002972:	f7fe fab1 	bl	8000ed8 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a6a      	ldr	r2, [pc, #424]	; (8002b28 <HAL_RCC_ClockConfig+0x1f4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0ca      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2207      	movs	r2, #7
 800298c:	4013      	ands	r3, r2
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d015      	beq.n	80029ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	d006      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029a8:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b5f      	ldr	r3, [pc, #380]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029ae:	21e0      	movs	r1, #224	; 0xe0
 80029b0:	01c9      	lsls	r1, r1, #7
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	4a5d      	ldr	r2, [pc, #372]	; (8002b30 <HAL_RCC_ClockConfig+0x1fc>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2201      	movs	r2, #1
 80029d0:	4013      	ands	r3, r2
 80029d2:	d057      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	4013      	ands	r3, r2
 80029e6:	d12b      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e097      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f4:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	049b      	lsls	r3, r3, #18
 80029fc:	4013      	ands	r3, r2
 80029fe:	d11f      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e08b      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0c:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4013      	ands	r3, r2
 8002a16:	d113      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e07f      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a24:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a28:	2202      	movs	r2, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e074      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a32:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e06d      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2207      	movs	r2, #7
 8002a46:	4393      	bics	r3, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fa40 	bl	8000ed8 <HAL_GetTick>
 8002a58:	0003      	movs	r3, r0
 8002a5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5c:	e009      	b.n	8002a72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5e:	f7fe fa3b 	bl	8000ed8 <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <HAL_RCC_ClockConfig+0x1f4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2238      	movs	r2, #56	; 0x38
 8002a78:	401a      	ands	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1ec      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2207      	movs	r2, #7
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d21e      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2207      	movs	r2, #7
 8002a98:	4393      	bics	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fa18 	bl	8000ed8 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aac:	e009      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aae:	f7fe fa13 	bl	8000ed8 <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_RCC_ClockConfig+0x1f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e02c      	b.n	8002b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	4013      	ands	r3, r2
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_RCC_ClockConfig+0x200>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002aee:	f000 f829 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002af2:	0001      	movs	r1, r0
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	220f      	movs	r2, #15
 8002afc:	401a      	ands	r2, r3
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x204>)
 8002b00:	0092      	lsls	r2, r2, #2
 8002b02:	58d3      	ldr	r3, [r2, r3]
 8002b04:	221f      	movs	r2, #31
 8002b06:	4013      	ands	r3, r2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	40da      	lsrs	r2, r3
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x208>)
 8002b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x20c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fe f983 	bl	8000e20 <HAL_InitTick>
 8002b1a:	0003      	movs	r3, r0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b004      	add	sp, #16
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40022000 	.word	0x40022000
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	fffff0ff 	.word	0xfffff0ff
 8002b34:	ffff8fff 	.word	0xffff8fff
 8002b38:	08003f10 	.word	0x08003f10
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	20000004 	.word	0x20000004

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4a:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2238      	movs	r2, #56	; 0x38
 8002b50:	4013      	ands	r3, r2
 8002b52:	d10f      	bne.n	8002b74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b54:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0adb      	lsrs	r3, r3, #11
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2201      	movs	r2, #1
 8002b60:	409a      	lsls	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b66:	6839      	ldr	r1, [r7, #0]
 8002b68:	4835      	ldr	r0, [pc, #212]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b6a:	f7fd facb 	bl	8000104 <__udivsi3>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e05d      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2238      	movs	r2, #56	; 0x38
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b80:	4b30      	ldr	r3, [pc, #192]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e054      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b86:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2238      	movs	r2, #56	; 0x38
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d138      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4824      	ldr	r0, [pc, #144]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bb4:	f7fd faa6 	bl	8000104 <__udivsi3>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	0019      	movs	r1, r3
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	0a1b      	lsrs	r3, r3, #8
 8002bc2:	227f      	movs	r2, #127	; 0x7f
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	434b      	muls	r3, r1
 8002bc8:	617b      	str	r3, [r7, #20]
        break;
 8002bca:	e00d      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	481c      	ldr	r0, [pc, #112]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bd0:	f7fd fa98 	bl	8000104 <__udivsi3>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	227f      	movs	r2, #127	; 0x7f
 8002be0:	4013      	ands	r3, r2
 8002be2:	434b      	muls	r3, r1
 8002be4:	617b      	str	r3, [r7, #20]
        break;
 8002be6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0f5b      	lsrs	r3, r3, #29
 8002bee:	2207      	movs	r2, #7
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	6978      	ldr	r0, [r7, #20]
 8002bfa:	f7fd fa83 	bl	8000104 <__udivsi3>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e015      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2238      	movs	r2, #56	; 0x38
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d103      	bne.n	8002c18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2238      	movs	r2, #56	; 0x38
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b18      	cmp	r3, #24
 8002c22:	d103      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c24:	23fa      	movs	r3, #250	; 0xfa
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	e001      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c30:	693b      	ldr	r3, [r7, #16]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b006      	add	sp, #24
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	20000000 	.word	0x20000000

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c60:	f7ff fff2 	bl	8002c48 <HAL_RCC_GetHCLKFreq>
 8002c64:	0004      	movs	r4, r0
 8002c66:	f7ff faf9 	bl	800225c <LL_RCC_GetAPB1Prescaler>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	0b1a      	lsrs	r2, r3, #12
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	58d3      	ldr	r3, [r2, r3]
 8002c74:	221f      	movs	r2, #31
 8002c76:	4013      	ands	r3, r2
 8002c78:	40dc      	lsrs	r4, r3
 8002c7a:	0023      	movs	r3, r4
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bdb0      	pop	{r4, r5, r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	08003f50 	.word	0x08003f50

08002c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c90:	2313      	movs	r3, #19
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c98:	2312      	movs	r3, #18
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cac:	e0ad      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cae:	2011      	movs	r0, #17
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	055b      	lsls	r3, r3, #21
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d110      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc6:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0549      	lsls	r1, r1, #21
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	055b      	lsls	r3, r3, #21
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	183b      	adds	r3, r7, r0
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce4:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	0049      	lsls	r1, r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe f8f1 	bl	8000ed8 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe f8ec 	bl	8000ed8 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d904      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d0a:	2313      	movs	r3, #19
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2203      	movs	r2, #3
 8002d10:	701a      	strb	r2, [r3, #0]
        break;
 8002d12:	e005      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d14:	4b30      	ldr	r3, [pc, #192]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d0ed      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d20:	2313      	movs	r3, #19
 8002d22:	18fb      	adds	r3, r7, r3
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d15e      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d019      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d014      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d50:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	0249      	lsls	r1, r1, #9
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d64:	491e      	ldr	r1, [pc, #120]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2201      	movs	r2, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	d016      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f8ae 	bl	8000ed8 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d80:	e00c      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe f8a9 	bl	8000ed8 <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d904      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d92:	2313      	movs	r3, #19
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2203      	movs	r2, #3
 8002d98:	701a      	strb	r2, [r3, #0]
            break;
 8002d9a:	e004      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	2202      	movs	r2, #2
 8002da2:	4013      	ands	r3, r2
 8002da4:	d0ed      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002da6:	2313      	movs	r3, #19
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dc4:	e016      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dc6:	2312      	movs	r3, #18
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2213      	movs	r2, #19
 8002dcc:	18ba      	adds	r2, r7, r2
 8002dce:	7812      	ldrb	r2, [r2, #0]
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	fffffcff 	.word	0xfffffcff
 8002de0:	fffeffff 	.word	0xfffeffff
 8002de4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	2312      	movs	r3, #18
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2213      	movs	r2, #19
 8002dee:	18ba      	adds	r2, r7, r2
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df4:	2311      	movs	r3, #17
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4bb6      	ldr	r3, [pc, #728]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e02:	4bb5      	ldr	r3, [pc, #724]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e04:	49b5      	ldr	r1, [pc, #724]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e14:	4bb0      	ldr	r3, [pc, #704]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	2203      	movs	r2, #3
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e32:	4ba9      	ldr	r3, [pc, #676]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	220c      	movs	r2, #12
 8002e38:	4393      	bics	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	4ba5      	ldr	r3, [pc, #660]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e50:	4ba1      	ldr	r3, [pc, #644]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2230      	movs	r2, #48	; 0x30
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b9e      	ldr	r3, [pc, #632]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e6e:	4b9a      	ldr	r3, [pc, #616]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4a9b      	ldr	r2, [pc, #620]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	4b96      	ldr	r3, [pc, #600]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	015b      	lsls	r3, r3, #5
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002e8e:	4b92      	ldr	r3, [pc, #584]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	4a94      	ldr	r2, [pc, #592]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eae:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	4a8d      	ldr	r2, [pc, #564]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ece:	4b82      	ldr	r3, [pc, #520]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	4a86      	ldr	r2, [pc, #536]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002edc:	4b7e      	ldr	r3, [pc, #504]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eec:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	4a7f      	ldr	r2, [pc, #508]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002efc:	430a      	orrs	r2, r1
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2240      	movs	r2, #64	; 0x40
 8002f06:	4013      	ands	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	4a79      	ldr	r2, [pc, #484]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4013      	ands	r3, r2
 8002f28:	d015      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f2a:	4b6b      	ldr	r3, [pc, #428]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	0899      	lsrs	r1, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	4b68      	ldr	r3, [pc, #416]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d106      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f48:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	0249      	lsls	r1, r1, #9
 8002f52:	430a      	orrs	r2, r1
 8002f54:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	031b      	lsls	r3, r3, #12
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f62:	4b5d      	ldr	r3, [pc, #372]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	4393      	bics	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	039b      	lsls	r3, r3, #14
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d016      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f82:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	4a5c      	ldr	r2, [pc, #368]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f90:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	03db      	lsls	r3, r3, #15
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fa2:	4b4d      	ldr	r3, [pc, #308]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0449      	lsls	r1, r1, #17
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	03db      	lsls	r3, r3, #15
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d016      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	045b      	lsls	r3, r3, #17
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0449      	lsls	r1, r1, #17
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d014      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003006:	430a      	orrs	r2, r1
 8003008:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d106      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	0249      	lsls	r1, r1, #9
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	019b      	lsls	r3, r3, #6
 8003028:	4013      	ands	r3, r2
 800302a:	d014      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	220c      	movs	r2, #12
 8003032:	4393      	bics	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303c:	430a      	orrs	r2, r1
 800303e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b04      	cmp	r3, #4
 8003046:	d106      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	0249      	lsls	r1, r1, #9
 8003052:	430a      	orrs	r2, r1
 8003054:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	045b      	lsls	r3, r3, #17
 800305e:	4013      	ands	r3, r2
 8003060:	d016      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003072:	430a      	orrs	r2, r1
 8003074:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	019b      	lsls	r3, r3, #6
 800307e:	429a      	cmp	r2, r3
 8003080:	d106      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0449      	lsls	r1, r1, #17
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	049b      	lsls	r3, r3, #18
 8003098:	4013      	ands	r3, r2
 800309a:	d016      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ac:	430a      	orrs	r2, r1
 80030ae:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	0449      	lsls	r1, r1, #17
 80030c6:	430a      	orrs	r2, r1
 80030c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030ca:	2312      	movs	r3, #18
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b006      	add	sp, #24
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	efffffff 	.word	0xefffffff
 80030e0:	fffff3ff 	.word	0xfffff3ff
 80030e4:	fffffcff 	.word	0xfffffcff
 80030e8:	fff3ffff 	.word	0xfff3ffff
 80030ec:	ffcfffff 	.word	0xffcfffff
 80030f0:	ffffcfff 	.word	0xffffcfff
 80030f4:	ffff3fff 	.word	0xffff3fff
 80030f8:	ffbfffff 	.word	0xffbfffff
 80030fc:	feffffff 	.word	0xfeffffff

08003100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e046      	b.n	80031a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2288      	movs	r2, #136	; 0x88
 8003116:	589b      	ldr	r3, [r3, r2]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2284      	movs	r2, #132	; 0x84
 8003120:	2100      	movs	r1, #0
 8003122:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f7fd fdb4 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2288      	movs	r2, #136	; 0x88
 8003130:	2124      	movs	r1, #36	; 0x24
 8003132:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2101      	movs	r1, #1
 8003140:	438a      	bics	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 f830 	bl	80031ac <UART_SetConfig>
 800314c:	0003      	movs	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e024      	b.n	80031a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f000 fb79 	bl	8003858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	490d      	ldr	r1, [pc, #52]	; (80031a8 <HAL_UART_Init+0xa8>)
 8003172:	400a      	ands	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	212a      	movs	r1, #42	; 0x2a
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fc11 	bl	80039c0 <UART_CheckIdleState>
 800319e:	0003      	movs	r3, r0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffffb7ff 	.word	0xffffb7ff

080031ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b5b0      	push	{r4, r5, r7, lr}
 80031ae:	b090      	sub	sp, #64	; 0x40
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031b4:	231a      	movs	r3, #26
 80031b6:	2220      	movs	r2, #32
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	19db      	adds	r3, r3, r7
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4ac1      	ldr	r2, [pc, #772]	; (80034e4 <UART_SetConfig+0x338>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4abc      	ldr	r2, [pc, #752]	; (80034e8 <UART_SetConfig+0x33c>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	0003      	movs	r3, r0
 8003204:	430b      	orrs	r3, r1
 8003206:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4ab6      	ldr	r2, [pc, #728]	; (80034ec <UART_SetConfig+0x340>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <UART_SetConfig+0x80>
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4ab4      	ldr	r2, [pc, #720]	; (80034f0 <UART_SetConfig+0x344>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003228:	4313      	orrs	r3, r2
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4ab0      	ldr	r2, [pc, #704]	; (80034f4 <UART_SetConfig+0x348>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323e:	430b      	orrs	r3, r1
 8003240:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	220f      	movs	r2, #15
 800324a:	4393      	bics	r3, r2
 800324c:	0018      	movs	r0, r3
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	0003      	movs	r3, r0
 8003258:	430b      	orrs	r3, r1
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4aa5      	ldr	r2, [pc, #660]	; (80034f8 <UART_SetConfig+0x34c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d131      	bne.n	80032ca <UART_SetConfig+0x11e>
 8003266:	4ba5      	ldr	r3, [pc, #660]	; (80034fc <UART_SetConfig+0x350>)
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	2203      	movs	r2, #3
 800326c:	4013      	ands	r3, r2
 800326e:	2b03      	cmp	r3, #3
 8003270:	d01d      	beq.n	80032ae <UART_SetConfig+0x102>
 8003272:	d823      	bhi.n	80032bc <UART_SetConfig+0x110>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d00c      	beq.n	8003292 <UART_SetConfig+0xe6>
 8003278:	d820      	bhi.n	80032bc <UART_SetConfig+0x110>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <UART_SetConfig+0xd8>
 800327e:	2b01      	cmp	r3, #1
 8003280:	d00e      	beq.n	80032a0 <UART_SetConfig+0xf4>
 8003282:	e01b      	b.n	80032bc <UART_SetConfig+0x110>
 8003284:	231b      	movs	r3, #27
 8003286:	2220      	movs	r2, #32
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e154      	b.n	800353c <UART_SetConfig+0x390>
 8003292:	231b      	movs	r3, #27
 8003294:	2220      	movs	r2, #32
 8003296:	189b      	adds	r3, r3, r2
 8003298:	19db      	adds	r3, r3, r7
 800329a:	2202      	movs	r2, #2
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e14d      	b.n	800353c <UART_SetConfig+0x390>
 80032a0:	231b      	movs	r3, #27
 80032a2:	2220      	movs	r2, #32
 80032a4:	189b      	adds	r3, r3, r2
 80032a6:	19db      	adds	r3, r3, r7
 80032a8:	2204      	movs	r2, #4
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e146      	b.n	800353c <UART_SetConfig+0x390>
 80032ae:	231b      	movs	r3, #27
 80032b0:	2220      	movs	r2, #32
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	19db      	adds	r3, r3, r7
 80032b6:	2208      	movs	r2, #8
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e13f      	b.n	800353c <UART_SetConfig+0x390>
 80032bc:	231b      	movs	r3, #27
 80032be:	2220      	movs	r2, #32
 80032c0:	189b      	adds	r3, r3, r2
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	2210      	movs	r2, #16
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e138      	b.n	800353c <UART_SetConfig+0x390>
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a8c      	ldr	r2, [pc, #560]	; (8003500 <UART_SetConfig+0x354>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d131      	bne.n	8003338 <UART_SetConfig+0x18c>
 80032d4:	4b89      	ldr	r3, [pc, #548]	; (80034fc <UART_SetConfig+0x350>)
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	220c      	movs	r2, #12
 80032da:	4013      	ands	r3, r2
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d01d      	beq.n	800331c <UART_SetConfig+0x170>
 80032e0:	d823      	bhi.n	800332a <UART_SetConfig+0x17e>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d00c      	beq.n	8003300 <UART_SetConfig+0x154>
 80032e6:	d820      	bhi.n	800332a <UART_SetConfig+0x17e>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <UART_SetConfig+0x146>
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00e      	beq.n	800330e <UART_SetConfig+0x162>
 80032f0:	e01b      	b.n	800332a <UART_SetConfig+0x17e>
 80032f2:	231b      	movs	r3, #27
 80032f4:	2220      	movs	r2, #32
 80032f6:	189b      	adds	r3, r3, r2
 80032f8:	19db      	adds	r3, r3, r7
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e11d      	b.n	800353c <UART_SetConfig+0x390>
 8003300:	231b      	movs	r3, #27
 8003302:	2220      	movs	r2, #32
 8003304:	189b      	adds	r3, r3, r2
 8003306:	19db      	adds	r3, r3, r7
 8003308:	2202      	movs	r2, #2
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e116      	b.n	800353c <UART_SetConfig+0x390>
 800330e:	231b      	movs	r3, #27
 8003310:	2220      	movs	r2, #32
 8003312:	189b      	adds	r3, r3, r2
 8003314:	19db      	adds	r3, r3, r7
 8003316:	2204      	movs	r2, #4
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e10f      	b.n	800353c <UART_SetConfig+0x390>
 800331c:	231b      	movs	r3, #27
 800331e:	2220      	movs	r2, #32
 8003320:	189b      	adds	r3, r3, r2
 8003322:	19db      	adds	r3, r3, r7
 8003324:	2208      	movs	r2, #8
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e108      	b.n	800353c <UART_SetConfig+0x390>
 800332a:	231b      	movs	r3, #27
 800332c:	2220      	movs	r2, #32
 800332e:	189b      	adds	r3, r3, r2
 8003330:	19db      	adds	r3, r3, r7
 8003332:	2210      	movs	r2, #16
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e101      	b.n	800353c <UART_SetConfig+0x390>
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a71      	ldr	r2, [pc, #452]	; (8003504 <UART_SetConfig+0x358>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d131      	bne.n	80033a6 <UART_SetConfig+0x1fa>
 8003342:	4b6e      	ldr	r3, [pc, #440]	; (80034fc <UART_SetConfig+0x350>)
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	2230      	movs	r2, #48	; 0x30
 8003348:	4013      	ands	r3, r2
 800334a:	2b30      	cmp	r3, #48	; 0x30
 800334c:	d01d      	beq.n	800338a <UART_SetConfig+0x1de>
 800334e:	d823      	bhi.n	8003398 <UART_SetConfig+0x1ec>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d00c      	beq.n	800336e <UART_SetConfig+0x1c2>
 8003354:	d820      	bhi.n	8003398 <UART_SetConfig+0x1ec>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <UART_SetConfig+0x1b4>
 800335a:	2b10      	cmp	r3, #16
 800335c:	d00e      	beq.n	800337c <UART_SetConfig+0x1d0>
 800335e:	e01b      	b.n	8003398 <UART_SetConfig+0x1ec>
 8003360:	231b      	movs	r3, #27
 8003362:	2220      	movs	r2, #32
 8003364:	189b      	adds	r3, r3, r2
 8003366:	19db      	adds	r3, r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e0e6      	b.n	800353c <UART_SetConfig+0x390>
 800336e:	231b      	movs	r3, #27
 8003370:	2220      	movs	r2, #32
 8003372:	189b      	adds	r3, r3, r2
 8003374:	19db      	adds	r3, r3, r7
 8003376:	2202      	movs	r2, #2
 8003378:	701a      	strb	r2, [r3, #0]
 800337a:	e0df      	b.n	800353c <UART_SetConfig+0x390>
 800337c:	231b      	movs	r3, #27
 800337e:	2220      	movs	r2, #32
 8003380:	189b      	adds	r3, r3, r2
 8003382:	19db      	adds	r3, r3, r7
 8003384:	2204      	movs	r2, #4
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e0d8      	b.n	800353c <UART_SetConfig+0x390>
 800338a:	231b      	movs	r3, #27
 800338c:	2220      	movs	r2, #32
 800338e:	189b      	adds	r3, r3, r2
 8003390:	19db      	adds	r3, r3, r7
 8003392:	2208      	movs	r2, #8
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e0d1      	b.n	800353c <UART_SetConfig+0x390>
 8003398:	231b      	movs	r3, #27
 800339a:	2220      	movs	r2, #32
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2210      	movs	r2, #16
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e0ca      	b.n	800353c <UART_SetConfig+0x390>
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a57      	ldr	r2, [pc, #348]	; (8003508 <UART_SetConfig+0x35c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d106      	bne.n	80033be <UART_SetConfig+0x212>
 80033b0:	231b      	movs	r3, #27
 80033b2:	2220      	movs	r2, #32
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e0be      	b.n	800353c <UART_SetConfig+0x390>
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a52      	ldr	r2, [pc, #328]	; (800350c <UART_SetConfig+0x360>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d106      	bne.n	80033d6 <UART_SetConfig+0x22a>
 80033c8:	231b      	movs	r3, #27
 80033ca:	2220      	movs	r2, #32
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e0b2      	b.n	800353c <UART_SetConfig+0x390>
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4d      	ldr	r2, [pc, #308]	; (8003510 <UART_SetConfig+0x364>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d106      	bne.n	80033ee <UART_SetConfig+0x242>
 80033e0:	231b      	movs	r3, #27
 80033e2:	2220      	movs	r2, #32
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e0a6      	b.n	800353c <UART_SetConfig+0x390>
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3e      	ldr	r2, [pc, #248]	; (80034ec <UART_SetConfig+0x340>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d13e      	bne.n	8003476 <UART_SetConfig+0x2ca>
 80033f8:	4b40      	ldr	r3, [pc, #256]	; (80034fc <UART_SetConfig+0x350>)
 80033fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033fc:	23c0      	movs	r3, #192	; 0xc0
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4013      	ands	r3, r2
 8003402:	22c0      	movs	r2, #192	; 0xc0
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <UART_SetConfig+0x2ae>
 800340a:	22c0      	movs	r2, #192	; 0xc0
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	4293      	cmp	r3, r2
 8003410:	d82a      	bhi.n	8003468 <UART_SetConfig+0x2bc>
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	4293      	cmp	r3, r2
 8003418:	d011      	beq.n	800343e <UART_SetConfig+0x292>
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	4293      	cmp	r3, r2
 8003420:	d822      	bhi.n	8003468 <UART_SetConfig+0x2bc>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <UART_SetConfig+0x284>
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <UART_SetConfig+0x2a0>
 800342e:	e01b      	b.n	8003468 <UART_SetConfig+0x2bc>
 8003430:	231b      	movs	r3, #27
 8003432:	2220      	movs	r2, #32
 8003434:	189b      	adds	r3, r3, r2
 8003436:	19db      	adds	r3, r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e07e      	b.n	800353c <UART_SetConfig+0x390>
 800343e:	231b      	movs	r3, #27
 8003440:	2220      	movs	r2, #32
 8003442:	189b      	adds	r3, r3, r2
 8003444:	19db      	adds	r3, r3, r7
 8003446:	2202      	movs	r2, #2
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	e077      	b.n	800353c <UART_SetConfig+0x390>
 800344c:	231b      	movs	r3, #27
 800344e:	2220      	movs	r2, #32
 8003450:	189b      	adds	r3, r3, r2
 8003452:	19db      	adds	r3, r3, r7
 8003454:	2204      	movs	r2, #4
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e070      	b.n	800353c <UART_SetConfig+0x390>
 800345a:	231b      	movs	r3, #27
 800345c:	2220      	movs	r2, #32
 800345e:	189b      	adds	r3, r3, r2
 8003460:	19db      	adds	r3, r3, r7
 8003462:	2208      	movs	r2, #8
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e069      	b.n	800353c <UART_SetConfig+0x390>
 8003468:	231b      	movs	r3, #27
 800346a:	2220      	movs	r2, #32
 800346c:	189b      	adds	r3, r3, r2
 800346e:	19db      	adds	r3, r3, r7
 8003470:	2210      	movs	r2, #16
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e062      	b.n	800353c <UART_SetConfig+0x390>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <UART_SetConfig+0x344>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d157      	bne.n	8003530 <UART_SetConfig+0x384>
 8003480:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <UART_SetConfig+0x350>)
 8003482:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003484:	23c0      	movs	r3, #192	; 0xc0
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4013      	ands	r3, r2
 800348a:	22c0      	movs	r2, #192	; 0xc0
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <UART_SetConfig+0x368>
 8003492:	22c0      	movs	r2, #192	; 0xc0
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	4293      	cmp	r3, r2
 8003498:	d843      	bhi.n	8003522 <UART_SetConfig+0x376>
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	4293      	cmp	r3, r2
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x31a>
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d83b      	bhi.n	8003522 <UART_SetConfig+0x376>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <UART_SetConfig+0x30c>
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	0052      	lsls	r2, r2, #1
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <UART_SetConfig+0x328>
 80034b6:	e034      	b.n	8003522 <UART_SetConfig+0x376>
 80034b8:	231b      	movs	r3, #27
 80034ba:	2220      	movs	r2, #32
 80034bc:	189b      	adds	r3, r3, r2
 80034be:	19db      	adds	r3, r3, r7
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e03a      	b.n	800353c <UART_SetConfig+0x390>
 80034c6:	231b      	movs	r3, #27
 80034c8:	2220      	movs	r2, #32
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	19db      	adds	r3, r3, r7
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e033      	b.n	800353c <UART_SetConfig+0x390>
 80034d4:	231b      	movs	r3, #27
 80034d6:	2220      	movs	r2, #32
 80034d8:	189b      	adds	r3, r3, r2
 80034da:	19db      	adds	r3, r3, r7
 80034dc:	2204      	movs	r2, #4
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	e02c      	b.n	800353c <UART_SetConfig+0x390>
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	cfff69f3 	.word	0xcfff69f3
 80034e8:	ffffcfff 	.word	0xffffcfff
 80034ec:	40008000 	.word	0x40008000
 80034f0:	40008400 	.word	0x40008400
 80034f4:	11fff4ff 	.word	0x11fff4ff
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40021000 	.word	0x40021000
 8003500:	40004400 	.word	0x40004400
 8003504:	40004800 	.word	0x40004800
 8003508:	40004c00 	.word	0x40004c00
 800350c:	40005000 	.word	0x40005000
 8003510:	40013c00 	.word	0x40013c00
 8003514:	231b      	movs	r3, #27
 8003516:	2220      	movs	r2, #32
 8003518:	189b      	adds	r3, r3, r2
 800351a:	19db      	adds	r3, r3, r7
 800351c:	2208      	movs	r2, #8
 800351e:	701a      	strb	r2, [r3, #0]
 8003520:	e00c      	b.n	800353c <UART_SetConfig+0x390>
 8003522:	231b      	movs	r3, #27
 8003524:	2220      	movs	r2, #32
 8003526:	189b      	adds	r3, r3, r2
 8003528:	19db      	adds	r3, r3, r7
 800352a:	2210      	movs	r2, #16
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e005      	b.n	800353c <UART_SetConfig+0x390>
 8003530:	231b      	movs	r3, #27
 8003532:	2220      	movs	r2, #32
 8003534:	189b      	adds	r3, r3, r2
 8003536:	19db      	adds	r3, r3, r7
 8003538:	2210      	movs	r2, #16
 800353a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4ac1      	ldr	r2, [pc, #772]	; (8003848 <UART_SetConfig+0x69c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d005      	beq.n	8003552 <UART_SetConfig+0x3a6>
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4ac0      	ldr	r2, [pc, #768]	; (800384c <UART_SetConfig+0x6a0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d000      	beq.n	8003552 <UART_SetConfig+0x3a6>
 8003550:	e093      	b.n	800367a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003552:	231b      	movs	r3, #27
 8003554:	2220      	movs	r2, #32
 8003556:	189b      	adds	r3, r3, r2
 8003558:	19db      	adds	r3, r3, r7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d015      	beq.n	800358c <UART_SetConfig+0x3e0>
 8003560:	dc18      	bgt.n	8003594 <UART_SetConfig+0x3e8>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d00d      	beq.n	8003582 <UART_SetConfig+0x3d6>
 8003566:	dc15      	bgt.n	8003594 <UART_SetConfig+0x3e8>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <UART_SetConfig+0x3c6>
 800356c:	2b02      	cmp	r3, #2
 800356e:	d005      	beq.n	800357c <UART_SetConfig+0x3d0>
 8003570:	e010      	b.n	8003594 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003572:	f7ff fb73 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8003576:	0003      	movs	r3, r0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800357a:	e014      	b.n	80035a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800357c:	4bb4      	ldr	r3, [pc, #720]	; (8003850 <UART_SetConfig+0x6a4>)
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003580:	e011      	b.n	80035a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003582:	f7ff fadf 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8003586:	0003      	movs	r3, r0
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800358a:	e00c      	b.n	80035a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003592:	e008      	b.n	80035a6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003598:	231a      	movs	r3, #26
 800359a:	2220      	movs	r2, #32
 800359c:	189b      	adds	r3, r3, r2
 800359e:	19db      	adds	r3, r3, r7
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
        break;
 80035a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d100      	bne.n	80035ae <UART_SetConfig+0x402>
 80035ac:	e135      	b.n	800381a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b2:	4ba8      	ldr	r3, [pc, #672]	; (8003854 <UART_SetConfig+0x6a8>)
 80035b4:	0052      	lsls	r2, r2, #1
 80035b6:	5ad3      	ldrh	r3, [r2, r3]
 80035b8:	0019      	movs	r1, r3
 80035ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035bc:	f7fc fda2 	bl	8000104 <__udivsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	0013      	movs	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	189b      	adds	r3, r3, r2
 80035ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d305      	bcc.n	80035e0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035dc:	429a      	cmp	r2, r3
 80035de:	d906      	bls.n	80035ee <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80035e0:	231a      	movs	r3, #26
 80035e2:	2220      	movs	r2, #32
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	19db      	adds	r3, r3, r7
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e044      	b.n	8003678 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fa:	4b96      	ldr	r3, [pc, #600]	; (8003854 <UART_SetConfig+0x6a8>)
 80035fc:	0052      	lsls	r2, r2, #1
 80035fe:	5ad3      	ldrh	r3, [r2, r3]
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	69b8      	ldr	r0, [r7, #24]
 800360c:	69f9      	ldr	r1, [r7, #28]
 800360e:	f7fc feef 	bl	80003f0 <__aeabi_uldivmod>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	0e11      	lsrs	r1, r2, #24
 8003618:	021d      	lsls	r5, r3, #8
 800361a:	430d      	orrs	r5, r1
 800361c:	0214      	lsls	r4, r2, #8
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68b8      	ldr	r0, [r7, #8]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	1900      	adds	r0, r0, r4
 8003630:	4169      	adcs	r1, r5
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f7fc fed6 	bl	80003f0 <__aeabi_uldivmod>
 8003644:	0002      	movs	r2, r0
 8003646:	000b      	movs	r3, r1
 8003648:	0013      	movs	r3, r2
 800364a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	429a      	cmp	r2, r3
 8003654:	d309      	bcc.n	800366a <UART_SetConfig+0x4be>
 8003656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	035b      	lsls	r3, r3, #13
 800365c:	429a      	cmp	r2, r3
 800365e:	d204      	bcs.n	800366a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003666:	60da      	str	r2, [r3, #12]
 8003668:	e006      	b.n	8003678 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800366a:	231a      	movs	r3, #26
 800366c:	2220      	movs	r2, #32
 800366e:	189b      	adds	r3, r3, r2
 8003670:	19db      	adds	r3, r3, r7
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003676:	e0d0      	b.n	800381a <UART_SetConfig+0x66e>
 8003678:	e0cf      	b.n	800381a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	429a      	cmp	r2, r3
 8003684:	d000      	beq.n	8003688 <UART_SetConfig+0x4dc>
 8003686:	e070      	b.n	800376a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003688:	231b      	movs	r3, #27
 800368a:	2220      	movs	r2, #32
 800368c:	189b      	adds	r3, r3, r2
 800368e:	19db      	adds	r3, r3, r7
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d015      	beq.n	80036c2 <UART_SetConfig+0x516>
 8003696:	dc18      	bgt.n	80036ca <UART_SetConfig+0x51e>
 8003698:	2b04      	cmp	r3, #4
 800369a:	d00d      	beq.n	80036b8 <UART_SetConfig+0x50c>
 800369c:	dc15      	bgt.n	80036ca <UART_SetConfig+0x51e>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <UART_SetConfig+0x4fc>
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d005      	beq.n	80036b2 <UART_SetConfig+0x506>
 80036a6:	e010      	b.n	80036ca <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7ff fad8 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 80036ac:	0003      	movs	r3, r0
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036b0:	e014      	b.n	80036dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <UART_SetConfig+0x6a4>)
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036b6:	e011      	b.n	80036dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b8:	f7ff fa44 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80036bc:	0003      	movs	r3, r0
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036c0:	e00c      	b.n	80036dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036c8:	e008      	b.n	80036dc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036ce:	231a      	movs	r3, #26
 80036d0:	2220      	movs	r2, #32
 80036d2:	189b      	adds	r3, r3, r2
 80036d4:	19db      	adds	r3, r3, r7
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
        break;
 80036da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <UART_SetConfig+0x538>
 80036e2:	e09a      	b.n	800381a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e8:	4b5a      	ldr	r3, [pc, #360]	; (8003854 <UART_SetConfig+0x6a8>)
 80036ea:	0052      	lsls	r2, r2, #1
 80036ec:	5ad3      	ldrh	r3, [r2, r3]
 80036ee:	0019      	movs	r1, r3
 80036f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036f2:	f7fc fd07 	bl	8000104 <__udivsi3>
 80036f6:	0003      	movs	r3, r0
 80036f8:	005a      	lsls	r2, r3, #1
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	18d2      	adds	r2, r2, r3
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	0019      	movs	r1, r3
 8003708:	0010      	movs	r0, r2
 800370a:	f7fc fcfb 	bl	8000104 <__udivsi3>
 800370e:	0003      	movs	r3, r0
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d921      	bls.n	800375c <UART_SetConfig+0x5b0>
 8003718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	025b      	lsls	r3, r3, #9
 800371e:	429a      	cmp	r2, r3
 8003720:	d21c      	bcs.n	800375c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	b29a      	uxth	r2, r3
 8003726:	200e      	movs	r0, #14
 8003728:	2420      	movs	r4, #32
 800372a:	1903      	adds	r3, r0, r4
 800372c:	19db      	adds	r3, r3, r7
 800372e:	210f      	movs	r1, #15
 8003730:	438a      	bics	r2, r1
 8003732:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	085b      	lsrs	r3, r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	2207      	movs	r2, #7
 800373c:	4013      	ands	r3, r2
 800373e:	b299      	uxth	r1, r3
 8003740:	1903      	adds	r3, r0, r4
 8003742:	19db      	adds	r3, r3, r7
 8003744:	1902      	adds	r2, r0, r4
 8003746:	19d2      	adds	r2, r2, r7
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1902      	adds	r2, r0, r4
 8003754:	19d2      	adds	r2, r2, r7
 8003756:	8812      	ldrh	r2, [r2, #0]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e05e      	b.n	800381a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800375c:	231a      	movs	r3, #26
 800375e:	2220      	movs	r2, #32
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e057      	b.n	800381a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800376a:	231b      	movs	r3, #27
 800376c:	2220      	movs	r2, #32
 800376e:	189b      	adds	r3, r3, r2
 8003770:	19db      	adds	r3, r3, r7
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d015      	beq.n	80037a4 <UART_SetConfig+0x5f8>
 8003778:	dc18      	bgt.n	80037ac <UART_SetConfig+0x600>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d00d      	beq.n	800379a <UART_SetConfig+0x5ee>
 800377e:	dc15      	bgt.n	80037ac <UART_SetConfig+0x600>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <UART_SetConfig+0x5de>
 8003784:	2b02      	cmp	r3, #2
 8003786:	d005      	beq.n	8003794 <UART_SetConfig+0x5e8>
 8003788:	e010      	b.n	80037ac <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378a:	f7ff fa67 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 800378e:	0003      	movs	r3, r0
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003792:	e014      	b.n	80037be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <UART_SetConfig+0x6a4>)
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003798:	e011      	b.n	80037be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7ff f9d3 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 800379e:	0003      	movs	r3, r0
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037a2:	e00c      	b.n	80037be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037aa:	e008      	b.n	80037be <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037b0:	231a      	movs	r3, #26
 80037b2:	2220      	movs	r2, #32
 80037b4:	189b      	adds	r3, r3, r2
 80037b6:	19db      	adds	r3, r3, r7
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
        break;
 80037bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02a      	beq.n	800381a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <UART_SetConfig+0x6a8>)
 80037ca:	0052      	lsls	r2, r2, #1
 80037cc:	5ad3      	ldrh	r3, [r2, r3]
 80037ce:	0019      	movs	r1, r3
 80037d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037d2:	f7fc fc97 	bl	8000104 <__udivsi3>
 80037d6:	0003      	movs	r3, r0
 80037d8:	001a      	movs	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	18d2      	adds	r2, r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	0019      	movs	r1, r3
 80037e8:	0010      	movs	r0, r2
 80037ea:	f7fc fc8b 	bl	8000104 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	d90a      	bls.n	800380e <UART_SetConfig+0x662>
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	025b      	lsls	r3, r3, #9
 80037fe:	429a      	cmp	r2, r3
 8003800:	d205      	bcs.n	800380e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	b29a      	uxth	r2, r3
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800380e:	231a      	movs	r3, #26
 8003810:	2220      	movs	r2, #32
 8003812:	189b      	adds	r3, r3, r2
 8003814:	19db      	adds	r3, r3, r7
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	226a      	movs	r2, #106	; 0x6a
 800381e:	2101      	movs	r1, #1
 8003820:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2268      	movs	r2, #104	; 0x68
 8003826:	2101      	movs	r1, #1
 8003828:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	2200      	movs	r2, #0
 800382e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	2200      	movs	r2, #0
 8003834:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003836:	231a      	movs	r3, #26
 8003838:	2220      	movs	r2, #32
 800383a:	189b      	adds	r3, r3, r2
 800383c:	19db      	adds	r3, r3, r7
 800383e:	781b      	ldrb	r3, [r3, #0]
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b010      	add	sp, #64	; 0x40
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	40008000 	.word	0x40008000
 800384c:	40008400 	.word	0x40008400
 8003850:	00f42400 	.word	0x00f42400
 8003854:	08003f70 	.word	0x08003f70

08003858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d00b      	beq.n	8003882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a4a      	ldr	r2, [pc, #296]	; (800399c <UART_AdvFeatureConfig+0x144>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d00b      	beq.n	80038a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4a43      	ldr	r2, [pc, #268]	; (80039a0 <UART_AdvFeatureConfig+0x148>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	2204      	movs	r2, #4
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <UART_AdvFeatureConfig+0x14c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	2208      	movs	r2, #8
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <UART_AdvFeatureConfig+0x150>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	2210      	movs	r2, #16
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <UART_AdvFeatureConfig+0x154>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	2220      	movs	r2, #32
 8003910:	4013      	ands	r3, r2
 8003912:	d00b      	beq.n	800392c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <UART_AdvFeatureConfig+0x158>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	4013      	ands	r3, r2
 8003934:	d01d      	beq.n	8003972 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <UART_AdvFeatureConfig+0x15c>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	035b      	lsls	r3, r3, #13
 8003956:	429a      	cmp	r2, r3
 8003958:	d10b      	bne.n	8003972 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <UART_AdvFeatureConfig+0x160>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	4013      	ands	r3, r2
 800397a:	d00b      	beq.n	8003994 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <UART_AdvFeatureConfig+0x164>)
 8003984:	4013      	ands	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	605a      	str	r2, [r3, #4]
  }
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}
 800399c:	fffdffff 	.word	0xfffdffff
 80039a0:	fffeffff 	.word	0xfffeffff
 80039a4:	fffbffff 	.word	0xfffbffff
 80039a8:	ffff7fff 	.word	0xffff7fff
 80039ac:	ffffefff 	.word	0xffffefff
 80039b0:	ffffdfff 	.word	0xffffdfff
 80039b4:	ffefffff 	.word	0xffefffff
 80039b8:	ff9fffff 	.word	0xff9fffff
 80039bc:	fff7ffff 	.word	0xfff7ffff

080039c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2290      	movs	r2, #144	; 0x90
 80039cc:	2100      	movs	r1, #0
 80039ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039d0:	f7fd fa82 	bl	8000ed8 <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2208      	movs	r2, #8
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d10c      	bne.n	8003a00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	0391      	lsls	r1, r2, #14
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <UART_CheckIdleState+0x98>)
 80039f0:	9200      	str	r2, [sp, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f000 f832 	bl	8003a5c <UART_WaitOnFlagUntilTimeout>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e026      	b.n	8003a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2204      	movs	r2, #4
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d10c      	bne.n	8003a28 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	03d1      	lsls	r1, r2, #15
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <UART_CheckIdleState+0x98>)
 8003a18:	9200      	str	r2, [sp, #0]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f000 f81e 	bl	8003a5c <UART_WaitOnFlagUntilTimeout>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e012      	b.n	8003a4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2288      	movs	r2, #136	; 0x88
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	228c      	movs	r2, #140	; 0x8c
 8003a34:	2120      	movs	r1, #32
 8003a36:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2284      	movs	r2, #132	; 0x84
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	01ffffff 	.word	0x01ffffff

08003a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b094      	sub	sp, #80	; 0x50
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6c:	e0a7      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a70:	3301      	adds	r3, #1
 8003a72:	d100      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a74:	e0a3      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fd fa2f 	bl	8000ed8 <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d13f      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
 8003a96:	2301      	movs	r3, #1
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	494e      	ldr	r1, [pc, #312]	; (8003be8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003aae:	400a      	ands	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	f383 8810 	msr	PRIMASK, r3
}
 8003abc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003abe:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac8:	2301      	movs	r3, #1
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	f383 8810 	msr	PRIMASK, r3
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	f383 8810 	msr	PRIMASK, r3
}
 8003aee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2288      	movs	r2, #136	; 0x88
 8003af4:	2120      	movs	r1, #32
 8003af6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	228c      	movs	r2, #140	; 0x8c
 8003afc:	2120      	movs	r1, #32
 8003afe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2284      	movs	r2, #132	; 0x84
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e069      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	d052      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	401a      	ands	r2, r3
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d148      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	0112      	lsls	r2, r2, #4
 8003b34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b36:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3a:	613b      	str	r3, [r7, #16]
  return(result);
 8003b3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f383 8810 	msr	PRIMASK, r3
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4924      	ldr	r1, [pc, #144]	; (8003be8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b58:	400a      	ands	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b72:	2301      	movs	r3, #1
 8003b74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2101      	movs	r1, #1
 8003b8a:	438a      	bics	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	f383 8810 	msr	PRIMASK, r3
}
 8003b98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2288      	movs	r2, #136	; 0x88
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	228c      	movs	r2, #140	; 0x8c
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2290      	movs	r2, #144	; 0x90
 8003bae:	2120      	movs	r1, #32
 8003bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2284      	movs	r2, #132	; 0x84
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e010      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	425a      	negs	r2, r3
 8003bce:	4153      	adcs	r3, r2
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d100      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0x182>
 8003bdc:	e747      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b014      	add	sp, #80	; 0x50
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fffffe5f 	.word	0xfffffe5f

08003bec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2284      	movs	r2, #132	; 0x84
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e027      	b.n	8003c52 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2284      	movs	r2, #132	; 0x84
 8003c06:	2101      	movs	r1, #1
 8003c08:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2288      	movs	r2, #136	; 0x88
 8003c0e:	2124      	movs	r1, #36	; 0x24
 8003c10:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	438a      	bics	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2288      	movs	r2, #136	; 0x88
 8003c44:	2120      	movs	r1, #32
 8003c46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2284      	movs	r2, #132	; 0x84
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	dfffffff 	.word	0xdfffffff

08003c60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2284      	movs	r2, #132	; 0x84
 8003c6e:	5c9b      	ldrb	r3, [r3, r2]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e02e      	b.n	8003cd6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2284      	movs	r2, #132	; 0x84
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2288      	movs	r2, #136	; 0x88
 8003c84:	2124      	movs	r1, #36	; 0x24
 8003c86:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	08d9      	lsrs	r1, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f000 f854 	bl	8003d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2288      	movs	r2, #136	; 0x88
 8003cc8:	2120      	movs	r1, #32
 8003cca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2284      	movs	r2, #132	; 0x84
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2284      	movs	r2, #132	; 0x84
 8003cee:	5c9b      	ldrb	r3, [r3, r2]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e02f      	b.n	8003d58 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2284      	movs	r2, #132	; 0x84
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2288      	movs	r2, #136	; 0x88
 8003d04:	2124      	movs	r1, #36	; 0x24
 8003d06:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	438a      	bics	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 f813 	bl	8003d64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2288      	movs	r2, #136	; 0x88
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2284      	movs	r2, #132	; 0x84
 8003d52:	2100      	movs	r1, #0
 8003d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	f1ffffff 	.word	0xf1ffffff

08003d64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	226a      	movs	r2, #106	; 0x6a
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2268      	movs	r2, #104	; 0x68
 8003d80:	2101      	movs	r1, #1
 8003d82:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d84:	e043      	b.n	8003e0e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d86:	260f      	movs	r6, #15
 8003d88:	19bb      	adds	r3, r7, r6
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d8e:	200e      	movs	r0, #14
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	2208      	movs	r2, #8
 8003d94:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	0e5b      	lsrs	r3, r3, #25
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	240d      	movs	r4, #13
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	2107      	movs	r1, #7
 8003da6:	400a      	ands	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	0f5b      	lsrs	r3, r3, #29
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	250c      	movs	r5, #12
 8003db6:	197b      	adds	r3, r7, r5
 8003db8:	2107      	movs	r1, #7
 8003dba:	400a      	ands	r2, r1
 8003dbc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dbe:	183b      	adds	r3, r7, r0
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	197a      	adds	r2, r7, r5
 8003dc4:	7812      	ldrb	r2, [r2, #0]
 8003dc6:	4914      	ldr	r1, [pc, #80]	; (8003e18 <UARTEx_SetNbDataToProcess+0xb4>)
 8003dc8:	5c8a      	ldrb	r2, [r1, r2]
 8003dca:	435a      	muls	r2, r3
 8003dcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003dce:	197b      	adds	r3, r7, r5
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <UARTEx_SetNbDataToProcess+0xb8>)
 8003dd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f7fc fa1e 	bl	8000218 <__divsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	b299      	uxth	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	226a      	movs	r2, #106	; 0x6a
 8003de4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003de6:	19bb      	adds	r3, r7, r6
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	193a      	adds	r2, r7, r4
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	490a      	ldr	r1, [pc, #40]	; (8003e18 <UARTEx_SetNbDataToProcess+0xb4>)
 8003df0:	5c8a      	ldrb	r2, [r1, r2]
 8003df2:	435a      	muls	r2, r3
 8003df4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <UARTEx_SetNbDataToProcess+0xb8>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dfe:	0019      	movs	r1, r3
 8003e00:	f7fc fa0a 	bl	8000218 <__divsi3>
 8003e04:	0003      	movs	r3, r0
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2268      	movs	r2, #104	; 0x68
 8003e0c:	5299      	strh	r1, [r3, r2]
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b005      	add	sp, #20
 8003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	08003f88 	.word	0x08003f88
 8003e1c:	08003f90 	.word	0x08003f90

08003e20 <memset>:
 8003e20:	0003      	movs	r3, r0
 8003e22:	1882      	adds	r2, r0, r2
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d100      	bne.n	8003e2a <memset+0xa>
 8003e28:	4770      	bx	lr
 8003e2a:	7019      	strb	r1, [r3, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	e7f9      	b.n	8003e24 <memset+0x4>

08003e30 <__libc_init_array>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	2600      	movs	r6, #0
 8003e34:	4c0c      	ldr	r4, [pc, #48]	; (8003e68 <__libc_init_array+0x38>)
 8003e36:	4d0d      	ldr	r5, [pc, #52]	; (8003e6c <__libc_init_array+0x3c>)
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	42a6      	cmp	r6, r4
 8003e3e:	d109      	bne.n	8003e54 <__libc_init_array+0x24>
 8003e40:	2600      	movs	r6, #0
 8003e42:	f000 f819 	bl	8003e78 <_init>
 8003e46:	4c0a      	ldr	r4, [pc, #40]	; (8003e70 <__libc_init_array+0x40>)
 8003e48:	4d0a      	ldr	r5, [pc, #40]	; (8003e74 <__libc_init_array+0x44>)
 8003e4a:	1b64      	subs	r4, r4, r5
 8003e4c:	10a4      	asrs	r4, r4, #2
 8003e4e:	42a6      	cmp	r6, r4
 8003e50:	d105      	bne.n	8003e5e <__libc_init_array+0x2e>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	00b3      	lsls	r3, r6, #2
 8003e56:	58eb      	ldr	r3, [r5, r3]
 8003e58:	4798      	blx	r3
 8003e5a:	3601      	adds	r6, #1
 8003e5c:	e7ee      	b.n	8003e3c <__libc_init_array+0xc>
 8003e5e:	00b3      	lsls	r3, r6, #2
 8003e60:	58eb      	ldr	r3, [r5, r3]
 8003e62:	4798      	blx	r3
 8003e64:	3601      	adds	r6, #1
 8003e66:	e7f2      	b.n	8003e4e <__libc_init_array+0x1e>
 8003e68:	08003fa0 	.word	0x08003fa0
 8003e6c:	08003fa0 	.word	0x08003fa0
 8003e70:	08003fa4 	.word	0x08003fa4
 8003e74:	08003fa0 	.word	0x08003fa0

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
