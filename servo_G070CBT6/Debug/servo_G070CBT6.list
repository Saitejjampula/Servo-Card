
servo_G070CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006990  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b70  08006b70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b70  08006b70  00016b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000078  08006bf0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08006bf0  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c48f  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6f  00000000  00000000  0002c572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000810  00000000  00000000  0002ef68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017219  00000000  00000000  0002f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d58b  00000000  00000000  00046991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fce4  00000000  00000000  00053f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002efc  00000000  00000000  000e3c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e6afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006a30 	.word	0x08006a30

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	08006a30 	.word	0x08006a30

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cdrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0010      	movs	r0, r2
 8000230:	4662      	mov	r2, ip
 8000232:	468c      	mov	ip, r1
 8000234:	0019      	movs	r1, r3
 8000236:	4663      	mov	r3, ip
 8000238:	e000      	b.n	800023c <__aeabi_cdcmpeq>
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_cdcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f001 f8c9 	bl	80013d4 <__ledf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cdcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_dcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f819 	bl	8001284 <__eqdf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_dcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f001 f8bb 	bl	80013d4 <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_dcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_dcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f001 f8b1 	bl	80013d4 <__ledf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_dcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_dcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f001 f841 	bl	8001308 <__gedf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_dcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_dcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f001 f837 	bl	8001308 <__gedf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_dcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_fmul>:
 80002a8:	0243      	lsls	r3, r0, #9
 80002aa:	0a5b      	lsrs	r3, r3, #9
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	464f      	mov	r7, r9
 80002b0:	4646      	mov	r6, r8
 80002b2:	4699      	mov	r9, r3
 80002b4:	46d6      	mov	lr, sl
 80002b6:	0fc3      	lsrs	r3, r0, #31
 80002b8:	0045      	lsls	r5, r0, #1
 80002ba:	4698      	mov	r8, r3
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	464b      	mov	r3, r9
 80002c0:	1c0f      	adds	r7, r1, #0
 80002c2:	0e2d      	lsrs	r5, r5, #24
 80002c4:	d100      	bne.n	80002c8 <__aeabi_fmul+0x20>
 80002c6:	e0cb      	b.n	8000460 <__aeabi_fmul+0x1b8>
 80002c8:	2dff      	cmp	r5, #255	; 0xff
 80002ca:	d100      	bne.n	80002ce <__aeabi_fmul+0x26>
 80002cc:	e0cf      	b.n	800046e <__aeabi_fmul+0x1c6>
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	00db      	lsls	r3, r3, #3
 80002d2:	04d2      	lsls	r2, r2, #19
 80002d4:	431a      	orrs	r2, r3
 80002d6:	2300      	movs	r3, #0
 80002d8:	4691      	mov	r9, r2
 80002da:	2600      	movs	r6, #0
 80002dc:	469a      	mov	sl, r3
 80002de:	3d7f      	subs	r5, #127	; 0x7f
 80002e0:	027c      	lsls	r4, r7, #9
 80002e2:	007b      	lsls	r3, r7, #1
 80002e4:	0a64      	lsrs	r4, r4, #9
 80002e6:	0e1b      	lsrs	r3, r3, #24
 80002e8:	0fff      	lsrs	r7, r7, #31
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fmul+0x48>
 80002ee:	e0a9      	b.n	8000444 <__aeabi_fmul+0x19c>
 80002f0:	2bff      	cmp	r3, #255	; 0xff
 80002f2:	d011      	beq.n	8000318 <__aeabi_fmul+0x70>
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	00e4      	lsls	r4, r4, #3
 80002f8:	04d2      	lsls	r2, r2, #19
 80002fa:	4314      	orrs	r4, r2
 80002fc:	4642      	mov	r2, r8
 80002fe:	3b7f      	subs	r3, #127	; 0x7f
 8000300:	195b      	adds	r3, r3, r5
 8000302:	407a      	eors	r2, r7
 8000304:	2000      	movs	r0, #0
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	1c5d      	adds	r5, r3, #1
 800030a:	2e0a      	cmp	r6, #10
 800030c:	dd13      	ble.n	8000336 <__aeabi_fmul+0x8e>
 800030e:	003a      	movs	r2, r7
 8000310:	2e0b      	cmp	r6, #11
 8000312:	d047      	beq.n	80003a4 <__aeabi_fmul+0xfc>
 8000314:	4647      	mov	r7, r8
 8000316:	e03f      	b.n	8000398 <__aeabi_fmul+0xf0>
 8000318:	002b      	movs	r3, r5
 800031a:	33ff      	adds	r3, #255	; 0xff
 800031c:	2c00      	cmp	r4, #0
 800031e:	d11e      	bne.n	800035e <__aeabi_fmul+0xb6>
 8000320:	2202      	movs	r2, #2
 8000322:	4316      	orrs	r6, r2
 8000324:	4642      	mov	r2, r8
 8000326:	3501      	adds	r5, #1
 8000328:	407a      	eors	r2, r7
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	35ff      	adds	r5, #255	; 0xff
 800032e:	2e0a      	cmp	r6, #10
 8000330:	dd00      	ble.n	8000334 <__aeabi_fmul+0x8c>
 8000332:	e0e4      	b.n	80004fe <__aeabi_fmul+0x256>
 8000334:	2002      	movs	r0, #2
 8000336:	2e02      	cmp	r6, #2
 8000338:	dc1c      	bgt.n	8000374 <__aeabi_fmul+0xcc>
 800033a:	3e01      	subs	r6, #1
 800033c:	2e01      	cmp	r6, #1
 800033e:	d842      	bhi.n	80003c6 <__aeabi_fmul+0x11e>
 8000340:	2802      	cmp	r0, #2
 8000342:	d03d      	beq.n	80003c0 <__aeabi_fmul+0x118>
 8000344:	2801      	cmp	r0, #1
 8000346:	d166      	bne.n	8000416 <__aeabi_fmul+0x16e>
 8000348:	2000      	movs	r0, #0
 800034a:	2100      	movs	r1, #0
 800034c:	05c0      	lsls	r0, r0, #23
 800034e:	4308      	orrs	r0, r1
 8000350:	07d2      	lsls	r2, r2, #31
 8000352:	4310      	orrs	r0, r2
 8000354:	bce0      	pop	{r5, r6, r7}
 8000356:	46ba      	mov	sl, r7
 8000358:	46b1      	mov	r9, r6
 800035a:	46a8      	mov	r8, r5
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035e:	2203      	movs	r2, #3
 8000360:	4316      	orrs	r6, r2
 8000362:	4642      	mov	r2, r8
 8000364:	3501      	adds	r5, #1
 8000366:	407a      	eors	r2, r7
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	35ff      	adds	r5, #255	; 0xff
 800036c:	2e0a      	cmp	r6, #10
 800036e:	dd00      	ble.n	8000372 <__aeabi_fmul+0xca>
 8000370:	e0e4      	b.n	800053c <__aeabi_fmul+0x294>
 8000372:	2003      	movs	r0, #3
 8000374:	2101      	movs	r1, #1
 8000376:	40b1      	lsls	r1, r6
 8000378:	26a6      	movs	r6, #166	; 0xa6
 800037a:	00f6      	lsls	r6, r6, #3
 800037c:	4231      	tst	r1, r6
 800037e:	d10a      	bne.n	8000396 <__aeabi_fmul+0xee>
 8000380:	2690      	movs	r6, #144	; 0x90
 8000382:	00b6      	lsls	r6, r6, #2
 8000384:	4231      	tst	r1, r6
 8000386:	d116      	bne.n	80003b6 <__aeabi_fmul+0x10e>
 8000388:	3eb9      	subs	r6, #185	; 0xb9
 800038a:	3eff      	subs	r6, #255	; 0xff
 800038c:	420e      	tst	r6, r1
 800038e:	d01a      	beq.n	80003c6 <__aeabi_fmul+0x11e>
 8000390:	46a1      	mov	r9, r4
 8000392:	4682      	mov	sl, r0
 8000394:	e000      	b.n	8000398 <__aeabi_fmul+0xf0>
 8000396:	0017      	movs	r7, r2
 8000398:	4653      	mov	r3, sl
 800039a:	003a      	movs	r2, r7
 800039c:	2b02      	cmp	r3, #2
 800039e:	d00f      	beq.n	80003c0 <__aeabi_fmul+0x118>
 80003a0:	464c      	mov	r4, r9
 80003a2:	4650      	mov	r0, sl
 80003a4:	2803      	cmp	r0, #3
 80003a6:	d1cd      	bne.n	8000344 <__aeabi_fmul+0x9c>
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	03c9      	lsls	r1, r1, #15
 80003ac:	4321      	orrs	r1, r4
 80003ae:	0249      	lsls	r1, r1, #9
 80003b0:	20ff      	movs	r0, #255	; 0xff
 80003b2:	0a49      	lsrs	r1, r1, #9
 80003b4:	e7ca      	b.n	800034c <__aeabi_fmul+0xa4>
 80003b6:	2180      	movs	r1, #128	; 0x80
 80003b8:	2200      	movs	r2, #0
 80003ba:	20ff      	movs	r0, #255	; 0xff
 80003bc:	03c9      	lsls	r1, r1, #15
 80003be:	e7c5      	b.n	800034c <__aeabi_fmul+0xa4>
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	2100      	movs	r1, #0
 80003c4:	e7c2      	b.n	800034c <__aeabi_fmul+0xa4>
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	4649      	mov	r1, r9
 80003ca:	0424      	lsls	r4, r4, #16
 80003cc:	0c24      	lsrs	r4, r4, #16
 80003ce:	0027      	movs	r7, r4
 80003d0:	0c0e      	lsrs	r6, r1, #16
 80003d2:	0409      	lsls	r1, r1, #16
 80003d4:	0c09      	lsrs	r1, r1, #16
 80003d6:	4374      	muls	r4, r6
 80003d8:	434f      	muls	r7, r1
 80003da:	4346      	muls	r6, r0
 80003dc:	4348      	muls	r0, r1
 80003de:	0c39      	lsrs	r1, r7, #16
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	1809      	adds	r1, r1, r0
 80003e4:	428c      	cmp	r4, r1
 80003e6:	d903      	bls.n	80003f0 <__aeabi_fmul+0x148>
 80003e8:	2080      	movs	r0, #128	; 0x80
 80003ea:	0240      	lsls	r0, r0, #9
 80003ec:	4684      	mov	ip, r0
 80003ee:	4466      	add	r6, ip
 80003f0:	043f      	lsls	r7, r7, #16
 80003f2:	0408      	lsls	r0, r1, #16
 80003f4:	0c3f      	lsrs	r7, r7, #16
 80003f6:	19c0      	adds	r0, r0, r7
 80003f8:	0184      	lsls	r4, r0, #6
 80003fa:	1e67      	subs	r7, r4, #1
 80003fc:	41bc      	sbcs	r4, r7
 80003fe:	0c09      	lsrs	r1, r1, #16
 8000400:	0e80      	lsrs	r0, r0, #26
 8000402:	1989      	adds	r1, r1, r6
 8000404:	4304      	orrs	r4, r0
 8000406:	0189      	lsls	r1, r1, #6
 8000408:	430c      	orrs	r4, r1
 800040a:	0109      	lsls	r1, r1, #4
 800040c:	d571      	bpl.n	80004f2 <__aeabi_fmul+0x24a>
 800040e:	2301      	movs	r3, #1
 8000410:	0861      	lsrs	r1, r4, #1
 8000412:	401c      	ands	r4, r3
 8000414:	430c      	orrs	r4, r1
 8000416:	002b      	movs	r3, r5
 8000418:	337f      	adds	r3, #127	; 0x7f
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd51      	ble.n	80004c2 <__aeabi_fmul+0x21a>
 800041e:	0761      	lsls	r1, r4, #29
 8000420:	d004      	beq.n	800042c <__aeabi_fmul+0x184>
 8000422:	210f      	movs	r1, #15
 8000424:	4021      	ands	r1, r4
 8000426:	2904      	cmp	r1, #4
 8000428:	d000      	beq.n	800042c <__aeabi_fmul+0x184>
 800042a:	3404      	adds	r4, #4
 800042c:	0121      	lsls	r1, r4, #4
 800042e:	d503      	bpl.n	8000438 <__aeabi_fmul+0x190>
 8000430:	4b43      	ldr	r3, [pc, #268]	; (8000540 <__aeabi_fmul+0x298>)
 8000432:	401c      	ands	r4, r3
 8000434:	002b      	movs	r3, r5
 8000436:	3380      	adds	r3, #128	; 0x80
 8000438:	2bfe      	cmp	r3, #254	; 0xfe
 800043a:	dcc1      	bgt.n	80003c0 <__aeabi_fmul+0x118>
 800043c:	01a1      	lsls	r1, r4, #6
 800043e:	0a49      	lsrs	r1, r1, #9
 8000440:	b2d8      	uxtb	r0, r3
 8000442:	e783      	b.n	800034c <__aeabi_fmul+0xa4>
 8000444:	2c00      	cmp	r4, #0
 8000446:	d12c      	bne.n	80004a2 <__aeabi_fmul+0x1fa>
 8000448:	2301      	movs	r3, #1
 800044a:	4642      	mov	r2, r8
 800044c:	431e      	orrs	r6, r3
 800044e:	002b      	movs	r3, r5
 8000450:	407a      	eors	r2, r7
 8000452:	2001      	movs	r0, #1
 8000454:	b2d2      	uxtb	r2, r2
 8000456:	1c5d      	adds	r5, r3, #1
 8000458:	2e0a      	cmp	r6, #10
 800045a:	dd00      	ble.n	800045e <__aeabi_fmul+0x1b6>
 800045c:	e757      	b.n	800030e <__aeabi_fmul+0x66>
 800045e:	e76a      	b.n	8000336 <__aeabi_fmul+0x8e>
 8000460:	2b00      	cmp	r3, #0
 8000462:	d110      	bne.n	8000486 <__aeabi_fmul+0x1de>
 8000464:	2301      	movs	r3, #1
 8000466:	2604      	movs	r6, #4
 8000468:	2500      	movs	r5, #0
 800046a:	469a      	mov	sl, r3
 800046c:	e738      	b.n	80002e0 <__aeabi_fmul+0x38>
 800046e:	2b00      	cmp	r3, #0
 8000470:	d104      	bne.n	800047c <__aeabi_fmul+0x1d4>
 8000472:	2302      	movs	r3, #2
 8000474:	2608      	movs	r6, #8
 8000476:	25ff      	movs	r5, #255	; 0xff
 8000478:	469a      	mov	sl, r3
 800047a:	e731      	b.n	80002e0 <__aeabi_fmul+0x38>
 800047c:	2303      	movs	r3, #3
 800047e:	260c      	movs	r6, #12
 8000480:	25ff      	movs	r5, #255	; 0xff
 8000482:	469a      	mov	sl, r3
 8000484:	e72c      	b.n	80002e0 <__aeabi_fmul+0x38>
 8000486:	4648      	mov	r0, r9
 8000488:	f001 fee8 	bl	800225c <__clzsi2>
 800048c:	464a      	mov	r2, r9
 800048e:	1f43      	subs	r3, r0, #5
 8000490:	2576      	movs	r5, #118	; 0x76
 8000492:	409a      	lsls	r2, r3
 8000494:	2300      	movs	r3, #0
 8000496:	426d      	negs	r5, r5
 8000498:	4691      	mov	r9, r2
 800049a:	2600      	movs	r6, #0
 800049c:	469a      	mov	sl, r3
 800049e:	1a2d      	subs	r5, r5, r0
 80004a0:	e71e      	b.n	80002e0 <__aeabi_fmul+0x38>
 80004a2:	0020      	movs	r0, r4
 80004a4:	f001 feda 	bl	800225c <__clzsi2>
 80004a8:	4642      	mov	r2, r8
 80004aa:	1f43      	subs	r3, r0, #5
 80004ac:	409c      	lsls	r4, r3
 80004ae:	1a2b      	subs	r3, r5, r0
 80004b0:	3b76      	subs	r3, #118	; 0x76
 80004b2:	407a      	eors	r2, r7
 80004b4:	2000      	movs	r0, #0
 80004b6:	b2d2      	uxtb	r2, r2
 80004b8:	1c5d      	adds	r5, r3, #1
 80004ba:	2e0a      	cmp	r6, #10
 80004bc:	dd00      	ble.n	80004c0 <__aeabi_fmul+0x218>
 80004be:	e726      	b.n	800030e <__aeabi_fmul+0x66>
 80004c0:	e739      	b.n	8000336 <__aeabi_fmul+0x8e>
 80004c2:	2101      	movs	r1, #1
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	2b1b      	cmp	r3, #27
 80004c8:	dd00      	ble.n	80004cc <__aeabi_fmul+0x224>
 80004ca:	e73d      	b.n	8000348 <__aeabi_fmul+0xa0>
 80004cc:	359e      	adds	r5, #158	; 0x9e
 80004ce:	0021      	movs	r1, r4
 80004d0:	40ac      	lsls	r4, r5
 80004d2:	40d9      	lsrs	r1, r3
 80004d4:	1e63      	subs	r3, r4, #1
 80004d6:	419c      	sbcs	r4, r3
 80004d8:	4321      	orrs	r1, r4
 80004da:	074b      	lsls	r3, r1, #29
 80004dc:	d004      	beq.n	80004e8 <__aeabi_fmul+0x240>
 80004de:	230f      	movs	r3, #15
 80004e0:	400b      	ands	r3, r1
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d000      	beq.n	80004e8 <__aeabi_fmul+0x240>
 80004e6:	3104      	adds	r1, #4
 80004e8:	014b      	lsls	r3, r1, #5
 80004ea:	d504      	bpl.n	80004f6 <__aeabi_fmul+0x24e>
 80004ec:	2001      	movs	r0, #1
 80004ee:	2100      	movs	r1, #0
 80004f0:	e72c      	b.n	800034c <__aeabi_fmul+0xa4>
 80004f2:	001d      	movs	r5, r3
 80004f4:	e78f      	b.n	8000416 <__aeabi_fmul+0x16e>
 80004f6:	0189      	lsls	r1, r1, #6
 80004f8:	2000      	movs	r0, #0
 80004fa:	0a49      	lsrs	r1, r1, #9
 80004fc:	e726      	b.n	800034c <__aeabi_fmul+0xa4>
 80004fe:	2302      	movs	r3, #2
 8000500:	2e0f      	cmp	r6, #15
 8000502:	d10c      	bne.n	800051e <__aeabi_fmul+0x276>
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	464b      	mov	r3, r9
 8000508:	03c9      	lsls	r1, r1, #15
 800050a:	420b      	tst	r3, r1
 800050c:	d00d      	beq.n	800052a <__aeabi_fmul+0x282>
 800050e:	420c      	tst	r4, r1
 8000510:	d10b      	bne.n	800052a <__aeabi_fmul+0x282>
 8000512:	4321      	orrs	r1, r4
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	003a      	movs	r2, r7
 8000518:	20ff      	movs	r0, #255	; 0xff
 800051a:	0a49      	lsrs	r1, r1, #9
 800051c:	e716      	b.n	800034c <__aeabi_fmul+0xa4>
 800051e:	2e0b      	cmp	r6, #11
 8000520:	d000      	beq.n	8000524 <__aeabi_fmul+0x27c>
 8000522:	e6f7      	b.n	8000314 <__aeabi_fmul+0x6c>
 8000524:	46a1      	mov	r9, r4
 8000526:	469a      	mov	sl, r3
 8000528:	e736      	b.n	8000398 <__aeabi_fmul+0xf0>
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	464b      	mov	r3, r9
 800052e:	03c9      	lsls	r1, r1, #15
 8000530:	4319      	orrs	r1, r3
 8000532:	0249      	lsls	r1, r1, #9
 8000534:	4642      	mov	r2, r8
 8000536:	20ff      	movs	r0, #255	; 0xff
 8000538:	0a49      	lsrs	r1, r1, #9
 800053a:	e707      	b.n	800034c <__aeabi_fmul+0xa4>
 800053c:	2303      	movs	r3, #3
 800053e:	e7df      	b.n	8000500 <__aeabi_fmul+0x258>
 8000540:	f7ffffff 	.word	0xf7ffffff

08000544 <__aeabi_i2f>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2800      	cmp	r0, #0
 8000548:	d013      	beq.n	8000572 <__aeabi_i2f+0x2e>
 800054a:	17c3      	asrs	r3, r0, #31
 800054c:	18c5      	adds	r5, r0, r3
 800054e:	405d      	eors	r5, r3
 8000550:	0fc4      	lsrs	r4, r0, #31
 8000552:	0028      	movs	r0, r5
 8000554:	f001 fe82 	bl	800225c <__clzsi2>
 8000558:	239e      	movs	r3, #158	; 0x9e
 800055a:	0001      	movs	r1, r0
 800055c:	1a1b      	subs	r3, r3, r0
 800055e:	2b96      	cmp	r3, #150	; 0x96
 8000560:	dc0f      	bgt.n	8000582 <__aeabi_i2f+0x3e>
 8000562:	2808      	cmp	r0, #8
 8000564:	d031      	beq.n	80005ca <__aeabi_i2f+0x86>
 8000566:	3908      	subs	r1, #8
 8000568:	408d      	lsls	r5, r1
 800056a:	026d      	lsls	r5, r5, #9
 800056c:	0a6d      	lsrs	r5, r5, #9
 800056e:	b2d8      	uxtb	r0, r3
 8000570:	e002      	b.n	8000578 <__aeabi_i2f+0x34>
 8000572:	2400      	movs	r4, #0
 8000574:	2000      	movs	r0, #0
 8000576:	2500      	movs	r5, #0
 8000578:	05c0      	lsls	r0, r0, #23
 800057a:	4328      	orrs	r0, r5
 800057c:	07e4      	lsls	r4, r4, #31
 800057e:	4320      	orrs	r0, r4
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	2b99      	cmp	r3, #153	; 0x99
 8000584:	dd0c      	ble.n	80005a0 <__aeabi_i2f+0x5c>
 8000586:	2205      	movs	r2, #5
 8000588:	1a12      	subs	r2, r2, r0
 800058a:	0028      	movs	r0, r5
 800058c:	40d0      	lsrs	r0, r2
 800058e:	0002      	movs	r2, r0
 8000590:	0008      	movs	r0, r1
 8000592:	301b      	adds	r0, #27
 8000594:	4085      	lsls	r5, r0
 8000596:	0028      	movs	r0, r5
 8000598:	1e45      	subs	r5, r0, #1
 800059a:	41a8      	sbcs	r0, r5
 800059c:	4302      	orrs	r2, r0
 800059e:	0015      	movs	r5, r2
 80005a0:	2905      	cmp	r1, #5
 80005a2:	dc16      	bgt.n	80005d2 <__aeabi_i2f+0x8e>
 80005a4:	002a      	movs	r2, r5
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <__aeabi_i2f+0xa0>)
 80005a8:	4002      	ands	r2, r0
 80005aa:	076e      	lsls	r6, r5, #29
 80005ac:	d009      	beq.n	80005c2 <__aeabi_i2f+0x7e>
 80005ae:	260f      	movs	r6, #15
 80005b0:	4035      	ands	r5, r6
 80005b2:	2d04      	cmp	r5, #4
 80005b4:	d005      	beq.n	80005c2 <__aeabi_i2f+0x7e>
 80005b6:	3204      	adds	r2, #4
 80005b8:	0155      	lsls	r5, r2, #5
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_i2f+0x7e>
 80005bc:	239f      	movs	r3, #159	; 0x9f
 80005be:	4002      	ands	r2, r0
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	0192      	lsls	r2, r2, #6
 80005c4:	0a55      	lsrs	r5, r2, #9
 80005c6:	b2d8      	uxtb	r0, r3
 80005c8:	e7d6      	b.n	8000578 <__aeabi_i2f+0x34>
 80005ca:	026d      	lsls	r5, r5, #9
 80005cc:	2096      	movs	r0, #150	; 0x96
 80005ce:	0a6d      	lsrs	r5, r5, #9
 80005d0:	e7d2      	b.n	8000578 <__aeabi_i2f+0x34>
 80005d2:	1f4a      	subs	r2, r1, #5
 80005d4:	4095      	lsls	r5, r2
 80005d6:	002a      	movs	r2, r5
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <__aeabi_i2f+0xa0>)
 80005da:	4002      	ands	r2, r0
 80005dc:	076e      	lsls	r6, r5, #29
 80005de:	d0f0      	beq.n	80005c2 <__aeabi_i2f+0x7e>
 80005e0:	e7e5      	b.n	80005ae <__aeabi_i2f+0x6a>
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	fbffffff 	.word	0xfbffffff

080005e8 <__aeabi_dadd>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	464f      	mov	r7, r9
 80005ec:	4646      	mov	r6, r8
 80005ee:	46d6      	mov	lr, sl
 80005f0:	0004      	movs	r4, r0
 80005f2:	b5c0      	push	{r6, r7, lr}
 80005f4:	001f      	movs	r7, r3
 80005f6:	030b      	lsls	r3, r1, #12
 80005f8:	0010      	movs	r0, r2
 80005fa:	004e      	lsls	r6, r1, #1
 80005fc:	0a5b      	lsrs	r3, r3, #9
 80005fe:	0fcd      	lsrs	r5, r1, #31
 8000600:	0f61      	lsrs	r1, r4, #29
 8000602:	007a      	lsls	r2, r7, #1
 8000604:	4319      	orrs	r1, r3
 8000606:	00e3      	lsls	r3, r4, #3
 8000608:	033c      	lsls	r4, r7, #12
 800060a:	0fff      	lsrs	r7, r7, #31
 800060c:	46bc      	mov	ip, r7
 800060e:	0a64      	lsrs	r4, r4, #9
 8000610:	0f47      	lsrs	r7, r0, #29
 8000612:	4327      	orrs	r7, r4
 8000614:	0d76      	lsrs	r6, r6, #21
 8000616:	0d52      	lsrs	r2, r2, #21
 8000618:	00c0      	lsls	r0, r0, #3
 800061a:	46b9      	mov	r9, r7
 800061c:	4680      	mov	r8, r0
 800061e:	1ab7      	subs	r7, r6, r2
 8000620:	4565      	cmp	r5, ip
 8000622:	d100      	bne.n	8000626 <__aeabi_dadd+0x3e>
 8000624:	e09b      	b.n	800075e <__aeabi_dadd+0x176>
 8000626:	2f00      	cmp	r7, #0
 8000628:	dc00      	bgt.n	800062c <__aeabi_dadd+0x44>
 800062a:	e084      	b.n	8000736 <__aeabi_dadd+0x14e>
 800062c:	2a00      	cmp	r2, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x4a>
 8000630:	e0be      	b.n	80007b0 <__aeabi_dadd+0x1c8>
 8000632:	4ac8      	ldr	r2, [pc, #800]	; (8000954 <__aeabi_dadd+0x36c>)
 8000634:	4296      	cmp	r6, r2
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x52>
 8000638:	e124      	b.n	8000884 <__aeabi_dadd+0x29c>
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	464c      	mov	r4, r9
 800063e:	0412      	lsls	r2, r2, #16
 8000640:	4314      	orrs	r4, r2
 8000642:	46a1      	mov	r9, r4
 8000644:	2f38      	cmp	r7, #56	; 0x38
 8000646:	dd00      	ble.n	800064a <__aeabi_dadd+0x62>
 8000648:	e167      	b.n	800091a <__aeabi_dadd+0x332>
 800064a:	2f1f      	cmp	r7, #31
 800064c:	dd00      	ble.n	8000650 <__aeabi_dadd+0x68>
 800064e:	e1d6      	b.n	80009fe <__aeabi_dadd+0x416>
 8000650:	2220      	movs	r2, #32
 8000652:	464c      	mov	r4, r9
 8000654:	1bd2      	subs	r2, r2, r7
 8000656:	4094      	lsls	r4, r2
 8000658:	46a2      	mov	sl, r4
 800065a:	4644      	mov	r4, r8
 800065c:	40fc      	lsrs	r4, r7
 800065e:	0020      	movs	r0, r4
 8000660:	4654      	mov	r4, sl
 8000662:	4304      	orrs	r4, r0
 8000664:	4640      	mov	r0, r8
 8000666:	4090      	lsls	r0, r2
 8000668:	1e42      	subs	r2, r0, #1
 800066a:	4190      	sbcs	r0, r2
 800066c:	464a      	mov	r2, r9
 800066e:	40fa      	lsrs	r2, r7
 8000670:	4304      	orrs	r4, r0
 8000672:	1a89      	subs	r1, r1, r2
 8000674:	1b1c      	subs	r4, r3, r4
 8000676:	42a3      	cmp	r3, r4
 8000678:	4192      	sbcs	r2, r2
 800067a:	4252      	negs	r2, r2
 800067c:	1a8b      	subs	r3, r1, r2
 800067e:	469a      	mov	sl, r3
 8000680:	4653      	mov	r3, sl
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	d400      	bmi.n	8000688 <__aeabi_dadd+0xa0>
 8000686:	e0d4      	b.n	8000832 <__aeabi_dadd+0x24a>
 8000688:	4653      	mov	r3, sl
 800068a:	025a      	lsls	r2, r3, #9
 800068c:	0a53      	lsrs	r3, r2, #9
 800068e:	469a      	mov	sl, r3
 8000690:	4653      	mov	r3, sl
 8000692:	2b00      	cmp	r3, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0xb0>
 8000696:	e104      	b.n	80008a2 <__aeabi_dadd+0x2ba>
 8000698:	4650      	mov	r0, sl
 800069a:	f001 fddf 	bl	800225c <__clzsi2>
 800069e:	0003      	movs	r3, r0
 80006a0:	3b08      	subs	r3, #8
 80006a2:	2220      	movs	r2, #32
 80006a4:	0020      	movs	r0, r4
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	4651      	mov	r1, sl
 80006aa:	40d0      	lsrs	r0, r2
 80006ac:	4099      	lsls	r1, r3
 80006ae:	0002      	movs	r2, r0
 80006b0:	409c      	lsls	r4, r3
 80006b2:	430a      	orrs	r2, r1
 80006b4:	42b3      	cmp	r3, r6
 80006b6:	da00      	bge.n	80006ba <__aeabi_dadd+0xd2>
 80006b8:	e102      	b.n	80008c0 <__aeabi_dadd+0x2d8>
 80006ba:	1b9b      	subs	r3, r3, r6
 80006bc:	1c59      	adds	r1, r3, #1
 80006be:	291f      	cmp	r1, #31
 80006c0:	dd00      	ble.n	80006c4 <__aeabi_dadd+0xdc>
 80006c2:	e0a7      	b.n	8000814 <__aeabi_dadd+0x22c>
 80006c4:	2320      	movs	r3, #32
 80006c6:	0010      	movs	r0, r2
 80006c8:	0026      	movs	r6, r4
 80006ca:	1a5b      	subs	r3, r3, r1
 80006cc:	409c      	lsls	r4, r3
 80006ce:	4098      	lsls	r0, r3
 80006d0:	40ce      	lsrs	r6, r1
 80006d2:	40ca      	lsrs	r2, r1
 80006d4:	1e63      	subs	r3, r4, #1
 80006d6:	419c      	sbcs	r4, r3
 80006d8:	4330      	orrs	r0, r6
 80006da:	4692      	mov	sl, r2
 80006dc:	2600      	movs	r6, #0
 80006de:	4304      	orrs	r4, r0
 80006e0:	0763      	lsls	r3, r4, #29
 80006e2:	d009      	beq.n	80006f8 <__aeabi_dadd+0x110>
 80006e4:	230f      	movs	r3, #15
 80006e6:	4023      	ands	r3, r4
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d005      	beq.n	80006f8 <__aeabi_dadd+0x110>
 80006ec:	1d23      	adds	r3, r4, #4
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	41a4      	sbcs	r4, r4
 80006f2:	4264      	negs	r4, r4
 80006f4:	44a2      	add	sl, r4
 80006f6:	001c      	movs	r4, r3
 80006f8:	4653      	mov	r3, sl
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	d400      	bmi.n	8000700 <__aeabi_dadd+0x118>
 80006fe:	e09b      	b.n	8000838 <__aeabi_dadd+0x250>
 8000700:	4b94      	ldr	r3, [pc, #592]	; (8000954 <__aeabi_dadd+0x36c>)
 8000702:	3601      	adds	r6, #1
 8000704:	429e      	cmp	r6, r3
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x122>
 8000708:	e0b8      	b.n	800087c <__aeabi_dadd+0x294>
 800070a:	4653      	mov	r3, sl
 800070c:	4992      	ldr	r1, [pc, #584]	; (8000958 <__aeabi_dadd+0x370>)
 800070e:	08e4      	lsrs	r4, r4, #3
 8000710:	400b      	ands	r3, r1
 8000712:	0019      	movs	r1, r3
 8000714:	075b      	lsls	r3, r3, #29
 8000716:	4323      	orrs	r3, r4
 8000718:	0572      	lsls	r2, r6, #21
 800071a:	024c      	lsls	r4, r1, #9
 800071c:	0b24      	lsrs	r4, r4, #12
 800071e:	0d52      	lsrs	r2, r2, #21
 8000720:	0512      	lsls	r2, r2, #20
 8000722:	07ed      	lsls	r5, r5, #31
 8000724:	4322      	orrs	r2, r4
 8000726:	432a      	orrs	r2, r5
 8000728:	0018      	movs	r0, r3
 800072a:	0011      	movs	r1, r2
 800072c:	bce0      	pop	{r5, r6, r7}
 800072e:	46ba      	mov	sl, r7
 8000730:	46b1      	mov	r9, r6
 8000732:	46a8      	mov	r8, r5
 8000734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000736:	2f00      	cmp	r7, #0
 8000738:	d048      	beq.n	80007cc <__aeabi_dadd+0x1e4>
 800073a:	1b97      	subs	r7, r2, r6
 800073c:	2e00      	cmp	r6, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_dadd+0x15a>
 8000740:	e10e      	b.n	8000960 <__aeabi_dadd+0x378>
 8000742:	000c      	movs	r4, r1
 8000744:	431c      	orrs	r4, r3
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x162>
 8000748:	e1b7      	b.n	8000aba <__aeabi_dadd+0x4d2>
 800074a:	1e7c      	subs	r4, r7, #1
 800074c:	2f01      	cmp	r7, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x16a>
 8000750:	e226      	b.n	8000ba0 <__aeabi_dadd+0x5b8>
 8000752:	4d80      	ldr	r5, [pc, #512]	; (8000954 <__aeabi_dadd+0x36c>)
 8000754:	42af      	cmp	r7, r5
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x172>
 8000758:	e1d5      	b.n	8000b06 <__aeabi_dadd+0x51e>
 800075a:	0027      	movs	r7, r4
 800075c:	e107      	b.n	800096e <__aeabi_dadd+0x386>
 800075e:	2f00      	cmp	r7, #0
 8000760:	dc00      	bgt.n	8000764 <__aeabi_dadd+0x17c>
 8000762:	e0b2      	b.n	80008ca <__aeabi_dadd+0x2e2>
 8000764:	2a00      	cmp	r2, #0
 8000766:	d047      	beq.n	80007f8 <__aeabi_dadd+0x210>
 8000768:	4a7a      	ldr	r2, [pc, #488]	; (8000954 <__aeabi_dadd+0x36c>)
 800076a:	4296      	cmp	r6, r2
 800076c:	d100      	bne.n	8000770 <__aeabi_dadd+0x188>
 800076e:	e089      	b.n	8000884 <__aeabi_dadd+0x29c>
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	464c      	mov	r4, r9
 8000774:	0412      	lsls	r2, r2, #16
 8000776:	4314      	orrs	r4, r2
 8000778:	46a1      	mov	r9, r4
 800077a:	2f38      	cmp	r7, #56	; 0x38
 800077c:	dc6b      	bgt.n	8000856 <__aeabi_dadd+0x26e>
 800077e:	2f1f      	cmp	r7, #31
 8000780:	dc00      	bgt.n	8000784 <__aeabi_dadd+0x19c>
 8000782:	e16e      	b.n	8000a62 <__aeabi_dadd+0x47a>
 8000784:	003a      	movs	r2, r7
 8000786:	4648      	mov	r0, r9
 8000788:	3a20      	subs	r2, #32
 800078a:	40d0      	lsrs	r0, r2
 800078c:	4684      	mov	ip, r0
 800078e:	2f20      	cmp	r7, #32
 8000790:	d007      	beq.n	80007a2 <__aeabi_dadd+0x1ba>
 8000792:	2240      	movs	r2, #64	; 0x40
 8000794:	4648      	mov	r0, r9
 8000796:	1bd2      	subs	r2, r2, r7
 8000798:	4090      	lsls	r0, r2
 800079a:	0002      	movs	r2, r0
 800079c:	4640      	mov	r0, r8
 800079e:	4310      	orrs	r0, r2
 80007a0:	4680      	mov	r8, r0
 80007a2:	4640      	mov	r0, r8
 80007a4:	1e42      	subs	r2, r0, #1
 80007a6:	4190      	sbcs	r0, r2
 80007a8:	4662      	mov	r2, ip
 80007aa:	0004      	movs	r4, r0
 80007ac:	4314      	orrs	r4, r2
 80007ae:	e057      	b.n	8000860 <__aeabi_dadd+0x278>
 80007b0:	464a      	mov	r2, r9
 80007b2:	4302      	orrs	r2, r0
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x1d0>
 80007b6:	e103      	b.n	80009c0 <__aeabi_dadd+0x3d8>
 80007b8:	1e7a      	subs	r2, r7, #1
 80007ba:	2f01      	cmp	r7, #1
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0x1d8>
 80007be:	e193      	b.n	8000ae8 <__aeabi_dadd+0x500>
 80007c0:	4c64      	ldr	r4, [pc, #400]	; (8000954 <__aeabi_dadd+0x36c>)
 80007c2:	42a7      	cmp	r7, r4
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x1e0>
 80007c6:	e18a      	b.n	8000ade <__aeabi_dadd+0x4f6>
 80007c8:	0017      	movs	r7, r2
 80007ca:	e73b      	b.n	8000644 <__aeabi_dadd+0x5c>
 80007cc:	4c63      	ldr	r4, [pc, #396]	; (800095c <__aeabi_dadd+0x374>)
 80007ce:	1c72      	adds	r2, r6, #1
 80007d0:	4222      	tst	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__aeabi_dadd+0x1ee>
 80007d4:	e0e0      	b.n	8000998 <__aeabi_dadd+0x3b0>
 80007d6:	000a      	movs	r2, r1
 80007d8:	431a      	orrs	r2, r3
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d000      	beq.n	80007e0 <__aeabi_dadd+0x1f8>
 80007de:	e174      	b.n	8000aca <__aeabi_dadd+0x4e2>
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x1fe>
 80007e4:	e1d0      	b.n	8000b88 <__aeabi_dadd+0x5a0>
 80007e6:	464a      	mov	r2, r9
 80007e8:	4302      	orrs	r2, r0
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x206>
 80007ec:	e1e3      	b.n	8000bb6 <__aeabi_dadd+0x5ce>
 80007ee:	074a      	lsls	r2, r1, #29
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	4313      	orrs	r3, r2
 80007f4:	08c9      	lsrs	r1, r1, #3
 80007f6:	e029      	b.n	800084c <__aeabi_dadd+0x264>
 80007f8:	464a      	mov	r2, r9
 80007fa:	4302      	orrs	r2, r0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x218>
 80007fe:	e17d      	b.n	8000afc <__aeabi_dadd+0x514>
 8000800:	1e7a      	subs	r2, r7, #1
 8000802:	2f01      	cmp	r7, #1
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x220>
 8000806:	e0e0      	b.n	80009ca <__aeabi_dadd+0x3e2>
 8000808:	4c52      	ldr	r4, [pc, #328]	; (8000954 <__aeabi_dadd+0x36c>)
 800080a:	42a7      	cmp	r7, r4
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x228>
 800080e:	e166      	b.n	8000ade <__aeabi_dadd+0x4f6>
 8000810:	0017      	movs	r7, r2
 8000812:	e7b2      	b.n	800077a <__aeabi_dadd+0x192>
 8000814:	0010      	movs	r0, r2
 8000816:	3b1f      	subs	r3, #31
 8000818:	40d8      	lsrs	r0, r3
 800081a:	2920      	cmp	r1, #32
 800081c:	d003      	beq.n	8000826 <__aeabi_dadd+0x23e>
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	409a      	lsls	r2, r3
 8000824:	4314      	orrs	r4, r2
 8000826:	1e63      	subs	r3, r4, #1
 8000828:	419c      	sbcs	r4, r3
 800082a:	2300      	movs	r3, #0
 800082c:	2600      	movs	r6, #0
 800082e:	469a      	mov	sl, r3
 8000830:	4304      	orrs	r4, r0
 8000832:	0763      	lsls	r3, r4, #29
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x250>
 8000836:	e755      	b.n	80006e4 <__aeabi_dadd+0xfc>
 8000838:	4652      	mov	r2, sl
 800083a:	08e3      	lsrs	r3, r4, #3
 800083c:	0752      	lsls	r2, r2, #29
 800083e:	4313      	orrs	r3, r2
 8000840:	4652      	mov	r2, sl
 8000842:	0037      	movs	r7, r6
 8000844:	08d1      	lsrs	r1, r2, #3
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <__aeabi_dadd+0x36c>)
 8000848:	4297      	cmp	r7, r2
 800084a:	d01f      	beq.n	800088c <__aeabi_dadd+0x2a4>
 800084c:	0309      	lsls	r1, r1, #12
 800084e:	057a      	lsls	r2, r7, #21
 8000850:	0b0c      	lsrs	r4, r1, #12
 8000852:	0d52      	lsrs	r2, r2, #21
 8000854:	e764      	b.n	8000720 <__aeabi_dadd+0x138>
 8000856:	4642      	mov	r2, r8
 8000858:	464c      	mov	r4, r9
 800085a:	4314      	orrs	r4, r2
 800085c:	1e62      	subs	r2, r4, #1
 800085e:	4194      	sbcs	r4, r2
 8000860:	18e4      	adds	r4, r4, r3
 8000862:	429c      	cmp	r4, r3
 8000864:	4192      	sbcs	r2, r2
 8000866:	4252      	negs	r2, r2
 8000868:	4692      	mov	sl, r2
 800086a:	448a      	add	sl, r1
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d5df      	bpl.n	8000832 <__aeabi_dadd+0x24a>
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <__aeabi_dadd+0x36c>)
 8000874:	3601      	adds	r6, #1
 8000876:	429e      	cmp	r6, r3
 8000878:	d000      	beq.n	800087c <__aeabi_dadd+0x294>
 800087a:	e0b3      	b.n	80009e4 <__aeabi_dadd+0x3fc>
 800087c:	0032      	movs	r2, r6
 800087e:	2400      	movs	r4, #0
 8000880:	2300      	movs	r3, #0
 8000882:	e74d      	b.n	8000720 <__aeabi_dadd+0x138>
 8000884:	074a      	lsls	r2, r1, #29
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	4313      	orrs	r3, r2
 800088a:	08c9      	lsrs	r1, r1, #3
 800088c:	001a      	movs	r2, r3
 800088e:	430a      	orrs	r2, r1
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x2ac>
 8000892:	e200      	b.n	8000c96 <__aeabi_dadd+0x6ae>
 8000894:	2480      	movs	r4, #128	; 0x80
 8000896:	0324      	lsls	r4, r4, #12
 8000898:	430c      	orrs	r4, r1
 800089a:	0324      	lsls	r4, r4, #12
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <__aeabi_dadd+0x36c>)
 800089e:	0b24      	lsrs	r4, r4, #12
 80008a0:	e73e      	b.n	8000720 <__aeabi_dadd+0x138>
 80008a2:	0020      	movs	r0, r4
 80008a4:	f001 fcda 	bl	800225c <__clzsi2>
 80008a8:	0003      	movs	r3, r0
 80008aa:	3318      	adds	r3, #24
 80008ac:	2b1f      	cmp	r3, #31
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x2ca>
 80008b0:	e6f7      	b.n	80006a2 <__aeabi_dadd+0xba>
 80008b2:	0022      	movs	r2, r4
 80008b4:	3808      	subs	r0, #8
 80008b6:	4082      	lsls	r2, r0
 80008b8:	2400      	movs	r4, #0
 80008ba:	42b3      	cmp	r3, r6
 80008bc:	db00      	blt.n	80008c0 <__aeabi_dadd+0x2d8>
 80008be:	e6fc      	b.n	80006ba <__aeabi_dadd+0xd2>
 80008c0:	1af6      	subs	r6, r6, r3
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <__aeabi_dadd+0x370>)
 80008c4:	401a      	ands	r2, r3
 80008c6:	4692      	mov	sl, r2
 80008c8:	e70a      	b.n	80006e0 <__aeabi_dadd+0xf8>
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d02b      	beq.n	8000926 <__aeabi_dadd+0x33e>
 80008ce:	1b97      	subs	r7, r2, r6
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x2ee>
 80008d4:	e0b8      	b.n	8000a48 <__aeabi_dadd+0x460>
 80008d6:	4c1f      	ldr	r4, [pc, #124]	; (8000954 <__aeabi_dadd+0x36c>)
 80008d8:	42a2      	cmp	r2, r4
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x2f6>
 80008dc:	e11c      	b.n	8000b18 <__aeabi_dadd+0x530>
 80008de:	2480      	movs	r4, #128	; 0x80
 80008e0:	0424      	lsls	r4, r4, #16
 80008e2:	4321      	orrs	r1, r4
 80008e4:	2f38      	cmp	r7, #56	; 0x38
 80008e6:	dd00      	ble.n	80008ea <__aeabi_dadd+0x302>
 80008e8:	e11e      	b.n	8000b28 <__aeabi_dadd+0x540>
 80008ea:	2f1f      	cmp	r7, #31
 80008ec:	dd00      	ble.n	80008f0 <__aeabi_dadd+0x308>
 80008ee:	e19e      	b.n	8000c2e <__aeabi_dadd+0x646>
 80008f0:	2620      	movs	r6, #32
 80008f2:	000c      	movs	r4, r1
 80008f4:	1bf6      	subs	r6, r6, r7
 80008f6:	0018      	movs	r0, r3
 80008f8:	40b3      	lsls	r3, r6
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	40f8      	lsrs	r0, r7
 80008fe:	1e5e      	subs	r6, r3, #1
 8000900:	41b3      	sbcs	r3, r6
 8000902:	40f9      	lsrs	r1, r7
 8000904:	4304      	orrs	r4, r0
 8000906:	431c      	orrs	r4, r3
 8000908:	4489      	add	r9, r1
 800090a:	4444      	add	r4, r8
 800090c:	4544      	cmp	r4, r8
 800090e:	419b      	sbcs	r3, r3
 8000910:	425b      	negs	r3, r3
 8000912:	444b      	add	r3, r9
 8000914:	469a      	mov	sl, r3
 8000916:	0016      	movs	r6, r2
 8000918:	e7a8      	b.n	800086c <__aeabi_dadd+0x284>
 800091a:	4642      	mov	r2, r8
 800091c:	464c      	mov	r4, r9
 800091e:	4314      	orrs	r4, r2
 8000920:	1e62      	subs	r2, r4, #1
 8000922:	4194      	sbcs	r4, r2
 8000924:	e6a6      	b.n	8000674 <__aeabi_dadd+0x8c>
 8000926:	4c0d      	ldr	r4, [pc, #52]	; (800095c <__aeabi_dadd+0x374>)
 8000928:	1c72      	adds	r2, r6, #1
 800092a:	4222      	tst	r2, r4
 800092c:	d000      	beq.n	8000930 <__aeabi_dadd+0x348>
 800092e:	e0a8      	b.n	8000a82 <__aeabi_dadd+0x49a>
 8000930:	000a      	movs	r2, r1
 8000932:	431a      	orrs	r2, r3
 8000934:	2e00      	cmp	r6, #0
 8000936:	d000      	beq.n	800093a <__aeabi_dadd+0x352>
 8000938:	e10a      	b.n	8000b50 <__aeabi_dadd+0x568>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x358>
 800093e:	e15e      	b.n	8000bfe <__aeabi_dadd+0x616>
 8000940:	464a      	mov	r2, r9
 8000942:	4302      	orrs	r2, r0
 8000944:	d000      	beq.n	8000948 <__aeabi_dadd+0x360>
 8000946:	e161      	b.n	8000c0c <__aeabi_dadd+0x624>
 8000948:	074a      	lsls	r2, r1, #29
 800094a:	08db      	lsrs	r3, r3, #3
 800094c:	4313      	orrs	r3, r2
 800094e:	08c9      	lsrs	r1, r1, #3
 8000950:	e77c      	b.n	800084c <__aeabi_dadd+0x264>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	000007ff 	.word	0x000007ff
 8000958:	ff7fffff 	.word	0xff7fffff
 800095c:	000007fe 	.word	0x000007fe
 8000960:	4ccf      	ldr	r4, [pc, #828]	; (8000ca0 <__aeabi_dadd+0x6b8>)
 8000962:	42a2      	cmp	r2, r4
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x380>
 8000966:	e0ce      	b.n	8000b06 <__aeabi_dadd+0x51e>
 8000968:	2480      	movs	r4, #128	; 0x80
 800096a:	0424      	lsls	r4, r4, #16
 800096c:	4321      	orrs	r1, r4
 800096e:	2f38      	cmp	r7, #56	; 0x38
 8000970:	dc5b      	bgt.n	8000a2a <__aeabi_dadd+0x442>
 8000972:	2f1f      	cmp	r7, #31
 8000974:	dd00      	ble.n	8000978 <__aeabi_dadd+0x390>
 8000976:	e0dc      	b.n	8000b32 <__aeabi_dadd+0x54a>
 8000978:	2520      	movs	r5, #32
 800097a:	000c      	movs	r4, r1
 800097c:	1bed      	subs	r5, r5, r7
 800097e:	001e      	movs	r6, r3
 8000980:	40ab      	lsls	r3, r5
 8000982:	40ac      	lsls	r4, r5
 8000984:	40fe      	lsrs	r6, r7
 8000986:	1e5d      	subs	r5, r3, #1
 8000988:	41ab      	sbcs	r3, r5
 800098a:	4334      	orrs	r4, r6
 800098c:	40f9      	lsrs	r1, r7
 800098e:	431c      	orrs	r4, r3
 8000990:	464b      	mov	r3, r9
 8000992:	1a5b      	subs	r3, r3, r1
 8000994:	4699      	mov	r9, r3
 8000996:	e04c      	b.n	8000a32 <__aeabi_dadd+0x44a>
 8000998:	464a      	mov	r2, r9
 800099a:	1a1c      	subs	r4, r3, r0
 800099c:	1a88      	subs	r0, r1, r2
 800099e:	42a3      	cmp	r3, r4
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	4692      	mov	sl, r2
 80009a6:	0002      	movs	r2, r0
 80009a8:	4650      	mov	r0, sl
 80009aa:	1a12      	subs	r2, r2, r0
 80009ac:	4692      	mov	sl, r2
 80009ae:	0212      	lsls	r2, r2, #8
 80009b0:	d478      	bmi.n	8000aa4 <__aeabi_dadd+0x4bc>
 80009b2:	4653      	mov	r3, sl
 80009b4:	4323      	orrs	r3, r4
 80009b6:	d000      	beq.n	80009ba <__aeabi_dadd+0x3d2>
 80009b8:	e66a      	b.n	8000690 <__aeabi_dadd+0xa8>
 80009ba:	2100      	movs	r1, #0
 80009bc:	2500      	movs	r5, #0
 80009be:	e745      	b.n	800084c <__aeabi_dadd+0x264>
 80009c0:	074a      	lsls	r2, r1, #29
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	08c9      	lsrs	r1, r1, #3
 80009c8:	e73d      	b.n	8000846 <__aeabi_dadd+0x25e>
 80009ca:	181c      	adds	r4, r3, r0
 80009cc:	429c      	cmp	r4, r3
 80009ce:	419b      	sbcs	r3, r3
 80009d0:	4449      	add	r1, r9
 80009d2:	468a      	mov	sl, r1
 80009d4:	425b      	negs	r3, r3
 80009d6:	449a      	add	sl, r3
 80009d8:	4653      	mov	r3, sl
 80009da:	2601      	movs	r6, #1
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	d400      	bmi.n	80009e2 <__aeabi_dadd+0x3fa>
 80009e0:	e727      	b.n	8000832 <__aeabi_dadd+0x24a>
 80009e2:	2602      	movs	r6, #2
 80009e4:	4652      	mov	r2, sl
 80009e6:	4baf      	ldr	r3, [pc, #700]	; (8000ca4 <__aeabi_dadd+0x6bc>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	401a      	ands	r2, r3
 80009ec:	0013      	movs	r3, r2
 80009ee:	4021      	ands	r1, r4
 80009f0:	0862      	lsrs	r2, r4, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	07dc      	lsls	r4, r3, #31
 80009f6:	085b      	lsrs	r3, r3, #1
 80009f8:	469a      	mov	sl, r3
 80009fa:	4314      	orrs	r4, r2
 80009fc:	e670      	b.n	80006e0 <__aeabi_dadd+0xf8>
 80009fe:	003a      	movs	r2, r7
 8000a00:	464c      	mov	r4, r9
 8000a02:	3a20      	subs	r2, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	46a4      	mov	ip, r4
 8000a08:	2f20      	cmp	r7, #32
 8000a0a:	d007      	beq.n	8000a1c <__aeabi_dadd+0x434>
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	4648      	mov	r0, r9
 8000a10:	1bd2      	subs	r2, r2, r7
 8000a12:	4090      	lsls	r0, r2
 8000a14:	0002      	movs	r2, r0
 8000a16:	4640      	mov	r0, r8
 8000a18:	4310      	orrs	r0, r2
 8000a1a:	4680      	mov	r8, r0
 8000a1c:	4640      	mov	r0, r8
 8000a1e:	1e42      	subs	r2, r0, #1
 8000a20:	4190      	sbcs	r0, r2
 8000a22:	4662      	mov	r2, ip
 8000a24:	0004      	movs	r4, r0
 8000a26:	4314      	orrs	r4, r2
 8000a28:	e624      	b.n	8000674 <__aeabi_dadd+0x8c>
 8000a2a:	4319      	orrs	r1, r3
 8000a2c:	000c      	movs	r4, r1
 8000a2e:	1e63      	subs	r3, r4, #1
 8000a30:	419c      	sbcs	r4, r3
 8000a32:	4643      	mov	r3, r8
 8000a34:	1b1c      	subs	r4, r3, r4
 8000a36:	45a0      	cmp	r8, r4
 8000a38:	419b      	sbcs	r3, r3
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	1acb      	subs	r3, r1, r3
 8000a40:	469a      	mov	sl, r3
 8000a42:	4665      	mov	r5, ip
 8000a44:	0016      	movs	r6, r2
 8000a46:	e61b      	b.n	8000680 <__aeabi_dadd+0x98>
 8000a48:	000c      	movs	r4, r1
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x468>
 8000a4e:	e0c7      	b.n	8000be0 <__aeabi_dadd+0x5f8>
 8000a50:	1e7c      	subs	r4, r7, #1
 8000a52:	2f01      	cmp	r7, #1
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x470>
 8000a56:	e0f9      	b.n	8000c4c <__aeabi_dadd+0x664>
 8000a58:	4e91      	ldr	r6, [pc, #580]	; (8000ca0 <__aeabi_dadd+0x6b8>)
 8000a5a:	42b7      	cmp	r7, r6
 8000a5c:	d05c      	beq.n	8000b18 <__aeabi_dadd+0x530>
 8000a5e:	0027      	movs	r7, r4
 8000a60:	e740      	b.n	80008e4 <__aeabi_dadd+0x2fc>
 8000a62:	2220      	movs	r2, #32
 8000a64:	464c      	mov	r4, r9
 8000a66:	4640      	mov	r0, r8
 8000a68:	1bd2      	subs	r2, r2, r7
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	40f8      	lsrs	r0, r7
 8000a6e:	4304      	orrs	r4, r0
 8000a70:	4640      	mov	r0, r8
 8000a72:	4090      	lsls	r0, r2
 8000a74:	1e42      	subs	r2, r0, #1
 8000a76:	4190      	sbcs	r0, r2
 8000a78:	464a      	mov	r2, r9
 8000a7a:	40fa      	lsrs	r2, r7
 8000a7c:	4304      	orrs	r4, r0
 8000a7e:	1889      	adds	r1, r1, r2
 8000a80:	e6ee      	b.n	8000860 <__aeabi_dadd+0x278>
 8000a82:	4c87      	ldr	r4, [pc, #540]	; (8000ca0 <__aeabi_dadd+0x6b8>)
 8000a84:	42a2      	cmp	r2, r4
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x4a2>
 8000a88:	e6f9      	b.n	800087e <__aeabi_dadd+0x296>
 8000a8a:	1818      	adds	r0, r3, r0
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	4449      	add	r1, r9
 8000a92:	425b      	negs	r3, r3
 8000a94:	18cb      	adds	r3, r1, r3
 8000a96:	07dc      	lsls	r4, r3, #31
 8000a98:	0840      	lsrs	r0, r0, #1
 8000a9a:	085b      	lsrs	r3, r3, #1
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	0016      	movs	r6, r2
 8000aa0:	4304      	orrs	r4, r0
 8000aa2:	e6c6      	b.n	8000832 <__aeabi_dadd+0x24a>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	1ad4      	subs	r4, r2, r3
 8000aa8:	45a0      	cmp	r8, r4
 8000aaa:	4180      	sbcs	r0, r0
 8000aac:	464b      	mov	r3, r9
 8000aae:	4240      	negs	r0, r0
 8000ab0:	1a59      	subs	r1, r3, r1
 8000ab2:	1a0b      	subs	r3, r1, r0
 8000ab4:	469a      	mov	sl, r3
 8000ab6:	4665      	mov	r5, ip
 8000ab8:	e5ea      	b.n	8000690 <__aeabi_dadd+0xa8>
 8000aba:	464b      	mov	r3, r9
 8000abc:	464a      	mov	r2, r9
 8000abe:	08c0      	lsrs	r0, r0, #3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4665      	mov	r5, ip
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	08d1      	lsrs	r1, r2, #3
 8000ac8:	e6bd      	b.n	8000846 <__aeabi_dadd+0x25e>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x4e8>
 8000ace:	e08e      	b.n	8000bee <__aeabi_dadd+0x606>
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	4303      	orrs	r3, r0
 8000ad4:	d117      	bne.n	8000b06 <__aeabi_dadd+0x51e>
 8000ad6:	2180      	movs	r1, #128	; 0x80
 8000ad8:	2500      	movs	r5, #0
 8000ada:	0309      	lsls	r1, r1, #12
 8000adc:	e6da      	b.n	8000894 <__aeabi_dadd+0x2ac>
 8000ade:	074a      	lsls	r2, r1, #29
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	08c9      	lsrs	r1, r1, #3
 8000ae6:	e6d1      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000ae8:	1a1c      	subs	r4, r3, r0
 8000aea:	464a      	mov	r2, r9
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	419b      	sbcs	r3, r3
 8000af0:	1a89      	subs	r1, r1, r2
 8000af2:	425b      	negs	r3, r3
 8000af4:	1acb      	subs	r3, r1, r3
 8000af6:	469a      	mov	sl, r3
 8000af8:	2601      	movs	r6, #1
 8000afa:	e5c1      	b.n	8000680 <__aeabi_dadd+0x98>
 8000afc:	074a      	lsls	r2, r1, #29
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	e69f      	b.n	8000846 <__aeabi_dadd+0x25e>
 8000b06:	4643      	mov	r3, r8
 8000b08:	08d8      	lsrs	r0, r3, #3
 8000b0a:	464b      	mov	r3, r9
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	075b      	lsls	r3, r3, #29
 8000b10:	4665      	mov	r5, ip
 8000b12:	4303      	orrs	r3, r0
 8000b14:	08d1      	lsrs	r1, r2, #3
 8000b16:	e6b9      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000b18:	4643      	mov	r3, r8
 8000b1a:	08d8      	lsrs	r0, r3, #3
 8000b1c:	464b      	mov	r3, r9
 8000b1e:	464a      	mov	r2, r9
 8000b20:	075b      	lsls	r3, r3, #29
 8000b22:	4303      	orrs	r3, r0
 8000b24:	08d1      	lsrs	r1, r2, #3
 8000b26:	e6b1      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000b28:	4319      	orrs	r1, r3
 8000b2a:	000c      	movs	r4, r1
 8000b2c:	1e63      	subs	r3, r4, #1
 8000b2e:	419c      	sbcs	r4, r3
 8000b30:	e6eb      	b.n	800090a <__aeabi_dadd+0x322>
 8000b32:	003c      	movs	r4, r7
 8000b34:	000d      	movs	r5, r1
 8000b36:	3c20      	subs	r4, #32
 8000b38:	40e5      	lsrs	r5, r4
 8000b3a:	2f20      	cmp	r7, #32
 8000b3c:	d003      	beq.n	8000b46 <__aeabi_dadd+0x55e>
 8000b3e:	2440      	movs	r4, #64	; 0x40
 8000b40:	1be4      	subs	r4, r4, r7
 8000b42:	40a1      	lsls	r1, r4
 8000b44:	430b      	orrs	r3, r1
 8000b46:	001c      	movs	r4, r3
 8000b48:	1e63      	subs	r3, r4, #1
 8000b4a:	419c      	sbcs	r4, r3
 8000b4c:	432c      	orrs	r4, r5
 8000b4e:	e770      	b.n	8000a32 <__aeabi_dadd+0x44a>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	d0e1      	beq.n	8000b18 <__aeabi_dadd+0x530>
 8000b54:	464a      	mov	r2, r9
 8000b56:	4302      	orrs	r2, r0
 8000b58:	d0c1      	beq.n	8000ade <__aeabi_dadd+0x4f6>
 8000b5a:	074a      	lsls	r2, r1, #29
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	08c9      	lsrs	r1, r1, #3
 8000b64:	0312      	lsls	r2, r2, #12
 8000b66:	4211      	tst	r1, r2
 8000b68:	d008      	beq.n	8000b7c <__aeabi_dadd+0x594>
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	08c4      	lsrs	r4, r0, #3
 8000b6e:	4214      	tst	r4, r2
 8000b70:	d104      	bne.n	8000b7c <__aeabi_dadd+0x594>
 8000b72:	4643      	mov	r3, r8
 8000b74:	0021      	movs	r1, r4
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	0742      	lsls	r2, r0, #29
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	0f5a      	lsrs	r2, r3, #29
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	0752      	lsls	r2, r2, #29
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	e681      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000b88:	464b      	mov	r3, r9
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x5a8>
 8000b8e:	e714      	b.n	80009ba <__aeabi_dadd+0x3d2>
 8000b90:	464b      	mov	r3, r9
 8000b92:	464a      	mov	r2, r9
 8000b94:	08c0      	lsrs	r0, r0, #3
 8000b96:	075b      	lsls	r3, r3, #29
 8000b98:	4665      	mov	r5, ip
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	08d1      	lsrs	r1, r2, #3
 8000b9e:	e655      	b.n	800084c <__aeabi_dadd+0x264>
 8000ba0:	1ac4      	subs	r4, r0, r3
 8000ba2:	45a0      	cmp	r8, r4
 8000ba4:	4180      	sbcs	r0, r0
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	4240      	negs	r0, r0
 8000baa:	1a59      	subs	r1, r3, r1
 8000bac:	1a0b      	subs	r3, r1, r0
 8000bae:	469a      	mov	sl, r3
 8000bb0:	4665      	mov	r5, ip
 8000bb2:	2601      	movs	r6, #1
 8000bb4:	e564      	b.n	8000680 <__aeabi_dadd+0x98>
 8000bb6:	1a1c      	subs	r4, r3, r0
 8000bb8:	464a      	mov	r2, r9
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	4180      	sbcs	r0, r0
 8000bbe:	1a8a      	subs	r2, r1, r2
 8000bc0:	4240      	negs	r0, r0
 8000bc2:	1a12      	subs	r2, r2, r0
 8000bc4:	4692      	mov	sl, r2
 8000bc6:	0212      	lsls	r2, r2, #8
 8000bc8:	d549      	bpl.n	8000c5e <__aeabi_dadd+0x676>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	1ad4      	subs	r4, r2, r3
 8000bce:	45a0      	cmp	r8, r4
 8000bd0:	4180      	sbcs	r0, r0
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	1a59      	subs	r1, r3, r1
 8000bd8:	1a0b      	subs	r3, r1, r0
 8000bda:	469a      	mov	sl, r3
 8000bdc:	4665      	mov	r5, ip
 8000bde:	e57f      	b.n	80006e0 <__aeabi_dadd+0xf8>
 8000be0:	464b      	mov	r3, r9
 8000be2:	464a      	mov	r2, r9
 8000be4:	08c0      	lsrs	r0, r0, #3
 8000be6:	075b      	lsls	r3, r3, #29
 8000be8:	4303      	orrs	r3, r0
 8000bea:	08d1      	lsrs	r1, r2, #3
 8000bec:	e62b      	b.n	8000846 <__aeabi_dadd+0x25e>
 8000bee:	464a      	mov	r2, r9
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4302      	orrs	r2, r0
 8000bf4:	d138      	bne.n	8000c68 <__aeabi_dadd+0x680>
 8000bf6:	074a      	lsls	r2, r1, #29
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	08c9      	lsrs	r1, r1, #3
 8000bfc:	e646      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000bfe:	464b      	mov	r3, r9
 8000c00:	464a      	mov	r2, r9
 8000c02:	08c0      	lsrs	r0, r0, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4303      	orrs	r3, r0
 8000c08:	08d1      	lsrs	r1, r2, #3
 8000c0a:	e61f      	b.n	800084c <__aeabi_dadd+0x264>
 8000c0c:	181c      	adds	r4, r3, r0
 8000c0e:	429c      	cmp	r4, r3
 8000c10:	419b      	sbcs	r3, r3
 8000c12:	4449      	add	r1, r9
 8000c14:	468a      	mov	sl, r1
 8000c16:	425b      	negs	r3, r3
 8000c18:	449a      	add	sl, r3
 8000c1a:	4653      	mov	r3, sl
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	d400      	bmi.n	8000c22 <__aeabi_dadd+0x63a>
 8000c20:	e607      	b.n	8000832 <__aeabi_dadd+0x24a>
 8000c22:	4652      	mov	r2, sl
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <__aeabi_dadd+0x6bc>)
 8000c26:	2601      	movs	r6, #1
 8000c28:	401a      	ands	r2, r3
 8000c2a:	4692      	mov	sl, r2
 8000c2c:	e601      	b.n	8000832 <__aeabi_dadd+0x24a>
 8000c2e:	003c      	movs	r4, r7
 8000c30:	000e      	movs	r6, r1
 8000c32:	3c20      	subs	r4, #32
 8000c34:	40e6      	lsrs	r6, r4
 8000c36:	2f20      	cmp	r7, #32
 8000c38:	d003      	beq.n	8000c42 <__aeabi_dadd+0x65a>
 8000c3a:	2440      	movs	r4, #64	; 0x40
 8000c3c:	1be4      	subs	r4, r4, r7
 8000c3e:	40a1      	lsls	r1, r4
 8000c40:	430b      	orrs	r3, r1
 8000c42:	001c      	movs	r4, r3
 8000c44:	1e63      	subs	r3, r4, #1
 8000c46:	419c      	sbcs	r4, r3
 8000c48:	4334      	orrs	r4, r6
 8000c4a:	e65e      	b.n	800090a <__aeabi_dadd+0x322>
 8000c4c:	4443      	add	r3, r8
 8000c4e:	4283      	cmp	r3, r0
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	4449      	add	r1, r9
 8000c54:	468a      	mov	sl, r1
 8000c56:	4240      	negs	r0, r0
 8000c58:	001c      	movs	r4, r3
 8000c5a:	4482      	add	sl, r0
 8000c5c:	e6bc      	b.n	80009d8 <__aeabi_dadd+0x3f0>
 8000c5e:	4653      	mov	r3, sl
 8000c60:	4323      	orrs	r3, r4
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x67e>
 8000c64:	e6a9      	b.n	80009ba <__aeabi_dadd+0x3d2>
 8000c66:	e5e4      	b.n	8000832 <__aeabi_dadd+0x24a>
 8000c68:	074a      	lsls	r2, r1, #29
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	08c9      	lsrs	r1, r1, #3
 8000c70:	0312      	lsls	r2, r2, #12
 8000c72:	4211      	tst	r1, r2
 8000c74:	d009      	beq.n	8000c8a <__aeabi_dadd+0x6a2>
 8000c76:	4648      	mov	r0, r9
 8000c78:	08c4      	lsrs	r4, r0, #3
 8000c7a:	4214      	tst	r4, r2
 8000c7c:	d105      	bne.n	8000c8a <__aeabi_dadd+0x6a2>
 8000c7e:	4643      	mov	r3, r8
 8000c80:	4665      	mov	r5, ip
 8000c82:	0021      	movs	r1, r4
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	0742      	lsls	r2, r0, #29
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	0f5a      	lsrs	r2, r3, #29
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	0752      	lsls	r2, r2, #29
 8000c92:	4313      	orrs	r3, r2
 8000c94:	e5fa      	b.n	800088c <__aeabi_dadd+0x2a4>
 8000c96:	2300      	movs	r3, #0
 8000c98:	4a01      	ldr	r2, [pc, #4]	; (8000ca0 <__aeabi_dadd+0x6b8>)
 8000c9a:	001c      	movs	r4, r3
 8000c9c:	e540      	b.n	8000720 <__aeabi_dadd+0x138>
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	000007ff 	.word	0x000007ff
 8000ca4:	ff7fffff 	.word	0xff7fffff

08000ca8 <__aeabi_ddiv>:
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	4657      	mov	r7, sl
 8000cac:	464e      	mov	r6, r9
 8000cae:	4645      	mov	r5, r8
 8000cb0:	46de      	mov	lr, fp
 8000cb2:	b5e0      	push	{r5, r6, r7, lr}
 8000cb4:	030c      	lsls	r4, r1, #12
 8000cb6:	001f      	movs	r7, r3
 8000cb8:	004b      	lsls	r3, r1, #1
 8000cba:	4681      	mov	r9, r0
 8000cbc:	4692      	mov	sl, r2
 8000cbe:	0005      	movs	r5, r0
 8000cc0:	b085      	sub	sp, #20
 8000cc2:	0b24      	lsrs	r4, r4, #12
 8000cc4:	0d5b      	lsrs	r3, r3, #21
 8000cc6:	0fce      	lsrs	r6, r1, #31
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d100      	bne.n	8000cce <__aeabi_ddiv+0x26>
 8000ccc:	e152      	b.n	8000f74 <__aeabi_ddiv+0x2cc>
 8000cce:	4ad2      	ldr	r2, [pc, #840]	; (8001018 <__aeabi_ddiv+0x370>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_ddiv+0x2e>
 8000cd4:	e16e      	b.n	8000fb4 <__aeabi_ddiv+0x30c>
 8000cd6:	0f42      	lsrs	r2, r0, #29
 8000cd8:	00e4      	lsls	r4, r4, #3
 8000cda:	4314      	orrs	r4, r2
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	0412      	lsls	r2, r2, #16
 8000ce0:	4322      	orrs	r2, r4
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4acd      	ldr	r2, [pc, #820]	; (800101c <__aeabi_ddiv+0x374>)
 8000ce6:	00c5      	lsls	r5, r0, #3
 8000ce8:	4693      	mov	fp, r2
 8000cea:	449b      	add	fp, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	4699      	mov	r9, r3
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	033c      	lsls	r4, r7, #12
 8000cf4:	007b      	lsls	r3, r7, #1
 8000cf6:	4650      	mov	r0, sl
 8000cf8:	0b24      	lsrs	r4, r4, #12
 8000cfa:	0d5b      	lsrs	r3, r3, #21
 8000cfc:	0fff      	lsrs	r7, r7, #31
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_ddiv+0x5c>
 8000d02:	e11a      	b.n	8000f3a <__aeabi_ddiv+0x292>
 8000d04:	4ac4      	ldr	r2, [pc, #784]	; (8001018 <__aeabi_ddiv+0x370>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d100      	bne.n	8000d0c <__aeabi_ddiv+0x64>
 8000d0a:	e15e      	b.n	8000fca <__aeabi_ddiv+0x322>
 8000d0c:	0f42      	lsrs	r2, r0, #29
 8000d0e:	00e4      	lsls	r4, r4, #3
 8000d10:	4322      	orrs	r2, r4
 8000d12:	2480      	movs	r4, #128	; 0x80
 8000d14:	0424      	lsls	r4, r4, #16
 8000d16:	4314      	orrs	r4, r2
 8000d18:	4ac0      	ldr	r2, [pc, #768]	; (800101c <__aeabi_ddiv+0x374>)
 8000d1a:	00c1      	lsls	r1, r0, #3
 8000d1c:	4694      	mov	ip, r2
 8000d1e:	465a      	mov	r2, fp
 8000d20:	4463      	add	r3, ip
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	469b      	mov	fp, r3
 8000d26:	2000      	movs	r0, #0
 8000d28:	0033      	movs	r3, r6
 8000d2a:	407b      	eors	r3, r7
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	464b      	mov	r3, r9
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d827      	bhi.n	8000d84 <__aeabi_ddiv+0xdc>
 8000d34:	4aba      	ldr	r2, [pc, #744]	; (8001020 <__aeabi_ddiv+0x378>)
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	58d3      	ldr	r3, [r2, r3]
 8000d3a:	469f      	mov	pc, r3
 8000d3c:	46b2      	mov	sl, r6
 8000d3e:	9b00      	ldr	r3, [sp, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d016      	beq.n	8000d72 <__aeabi_ddiv+0xca>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d100      	bne.n	8000d4a <__aeabi_ddiv+0xa2>
 8000d48:	e287      	b.n	800125a <__aeabi_ddiv+0x5b2>
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_ddiv+0xa8>
 8000d4e:	e0d5      	b.n	8000efc <__aeabi_ddiv+0x254>
 8000d50:	2300      	movs	r3, #0
 8000d52:	2200      	movs	r2, #0
 8000d54:	2500      	movs	r5, #0
 8000d56:	051b      	lsls	r3, r3, #20
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	4652      	mov	r2, sl
 8000d5c:	07d2      	lsls	r2, r2, #31
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	0028      	movs	r0, r5
 8000d62:	0019      	movs	r1, r3
 8000d64:	b005      	add	sp, #20
 8000d66:	bcf0      	pop	{r4, r5, r6, r7}
 8000d68:	46bb      	mov	fp, r7
 8000d6a:	46b2      	mov	sl, r6
 8000d6c:	46a9      	mov	r9, r5
 8000d6e:	46a0      	mov	r8, r4
 8000d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d72:	2200      	movs	r2, #0
 8000d74:	2500      	movs	r5, #0
 8000d76:	4ba8      	ldr	r3, [pc, #672]	; (8001018 <__aeabi_ddiv+0x370>)
 8000d78:	e7ed      	b.n	8000d56 <__aeabi_ddiv+0xae>
 8000d7a:	46ba      	mov	sl, r7
 8000d7c:	46a0      	mov	r8, r4
 8000d7e:	000d      	movs	r5, r1
 8000d80:	9000      	str	r0, [sp, #0]
 8000d82:	e7dc      	b.n	8000d3e <__aeabi_ddiv+0x96>
 8000d84:	4544      	cmp	r4, r8
 8000d86:	d200      	bcs.n	8000d8a <__aeabi_ddiv+0xe2>
 8000d88:	e1c4      	b.n	8001114 <__aeabi_ddiv+0x46c>
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_ddiv+0xe6>
 8000d8c:	e1bf      	b.n	800110e <__aeabi_ddiv+0x466>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	425b      	negs	r3, r3
 8000d92:	469c      	mov	ip, r3
 8000d94:	002e      	movs	r6, r5
 8000d96:	4640      	mov	r0, r8
 8000d98:	2500      	movs	r5, #0
 8000d9a:	44e3      	add	fp, ip
 8000d9c:	0223      	lsls	r3, r4, #8
 8000d9e:	0e0c      	lsrs	r4, r1, #24
 8000da0:	431c      	orrs	r4, r3
 8000da2:	0c1b      	lsrs	r3, r3, #16
 8000da4:	4699      	mov	r9, r3
 8000da6:	0423      	lsls	r3, r4, #16
 8000da8:	020a      	lsls	r2, r1, #8
 8000daa:	0c1f      	lsrs	r7, r3, #16
 8000dac:	4649      	mov	r1, r9
 8000dae:	9200      	str	r2, [sp, #0]
 8000db0:	9701      	str	r7, [sp, #4]
 8000db2:	f7ff fa35 	bl	8000220 <__aeabi_uidivmod>
 8000db6:	0002      	movs	r2, r0
 8000db8:	437a      	muls	r2, r7
 8000dba:	040b      	lsls	r3, r1, #16
 8000dbc:	0c31      	lsrs	r1, r6, #16
 8000dbe:	4680      	mov	r8, r0
 8000dc0:	4319      	orrs	r1, r3
 8000dc2:	428a      	cmp	r2, r1
 8000dc4:	d907      	bls.n	8000dd6 <__aeabi_ddiv+0x12e>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	425b      	negs	r3, r3
 8000dca:	469c      	mov	ip, r3
 8000dcc:	1909      	adds	r1, r1, r4
 8000dce:	44e0      	add	r8, ip
 8000dd0:	428c      	cmp	r4, r1
 8000dd2:	d800      	bhi.n	8000dd6 <__aeabi_ddiv+0x12e>
 8000dd4:	e201      	b.n	80011da <__aeabi_ddiv+0x532>
 8000dd6:	1a88      	subs	r0, r1, r2
 8000dd8:	4649      	mov	r1, r9
 8000dda:	f7ff fa21 	bl	8000220 <__aeabi_uidivmod>
 8000dde:	9a01      	ldr	r2, [sp, #4]
 8000de0:	0436      	lsls	r6, r6, #16
 8000de2:	4342      	muls	r2, r0
 8000de4:	0409      	lsls	r1, r1, #16
 8000de6:	0c36      	lsrs	r6, r6, #16
 8000de8:	0003      	movs	r3, r0
 8000dea:	430e      	orrs	r6, r1
 8000dec:	42b2      	cmp	r2, r6
 8000dee:	d904      	bls.n	8000dfa <__aeabi_ddiv+0x152>
 8000df0:	1936      	adds	r6, r6, r4
 8000df2:	3b01      	subs	r3, #1
 8000df4:	42b4      	cmp	r4, r6
 8000df6:	d800      	bhi.n	8000dfa <__aeabi_ddiv+0x152>
 8000df8:	e1e9      	b.n	80011ce <__aeabi_ddiv+0x526>
 8000dfa:	1ab0      	subs	r0, r6, r2
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	9e00      	ldr	r6, [sp, #0]
 8000e00:	0412      	lsls	r2, r2, #16
 8000e02:	431a      	orrs	r2, r3
 8000e04:	0c33      	lsrs	r3, r6, #16
 8000e06:	001f      	movs	r7, r3
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	0413      	lsls	r3, r2, #16
 8000e10:	0432      	lsls	r2, r6, #16
 8000e12:	0c16      	lsrs	r6, r2, #16
 8000e14:	0032      	movs	r2, r6
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	435a      	muls	r2, r3
 8000e1a:	9603      	str	r6, [sp, #12]
 8000e1c:	437b      	muls	r3, r7
 8000e1e:	434e      	muls	r6, r1
 8000e20:	4379      	muls	r1, r7
 8000e22:	0c17      	lsrs	r7, r2, #16
 8000e24:	46bc      	mov	ip, r7
 8000e26:	199b      	adds	r3, r3, r6
 8000e28:	4463      	add	r3, ip
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	d903      	bls.n	8000e36 <__aeabi_ddiv+0x18e>
 8000e2e:	2680      	movs	r6, #128	; 0x80
 8000e30:	0276      	lsls	r6, r6, #9
 8000e32:	46b4      	mov	ip, r6
 8000e34:	4461      	add	r1, ip
 8000e36:	0c1e      	lsrs	r6, r3, #16
 8000e38:	1871      	adds	r1, r6, r1
 8000e3a:	0416      	lsls	r6, r2, #16
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c36      	lsrs	r6, r6, #16
 8000e40:	199e      	adds	r6, r3, r6
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d302      	bcc.n	8000e4c <__aeabi_ddiv+0x1a4>
 8000e46:	d112      	bne.n	8000e6e <__aeabi_ddiv+0x1c6>
 8000e48:	42b5      	cmp	r5, r6
 8000e4a:	d210      	bcs.n	8000e6e <__aeabi_ddiv+0x1c6>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	1e5a      	subs	r2, r3, #1
 8000e50:	9b00      	ldr	r3, [sp, #0]
 8000e52:	469c      	mov	ip, r3
 8000e54:	4465      	add	r5, ip
 8000e56:	001f      	movs	r7, r3
 8000e58:	429d      	cmp	r5, r3
 8000e5a:	419b      	sbcs	r3, r3
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	191b      	adds	r3, r3, r4
 8000e60:	18c0      	adds	r0, r0, r3
 8000e62:	4284      	cmp	r4, r0
 8000e64:	d200      	bcs.n	8000e68 <__aeabi_ddiv+0x1c0>
 8000e66:	e19e      	b.n	80011a6 <__aeabi_ddiv+0x4fe>
 8000e68:	d100      	bne.n	8000e6c <__aeabi_ddiv+0x1c4>
 8000e6a:	e199      	b.n	80011a0 <__aeabi_ddiv+0x4f8>
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	1bae      	subs	r6, r5, r6
 8000e70:	42b5      	cmp	r5, r6
 8000e72:	41ad      	sbcs	r5, r5
 8000e74:	1a40      	subs	r0, r0, r1
 8000e76:	426d      	negs	r5, r5
 8000e78:	1b40      	subs	r0, r0, r5
 8000e7a:	4284      	cmp	r4, r0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x1d8>
 8000e7e:	e1d2      	b.n	8001226 <__aeabi_ddiv+0x57e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	f7ff f9cd 	bl	8000220 <__aeabi_uidivmod>
 8000e86:	9a01      	ldr	r2, [sp, #4]
 8000e88:	040b      	lsls	r3, r1, #16
 8000e8a:	4342      	muls	r2, r0
 8000e8c:	0c31      	lsrs	r1, r6, #16
 8000e8e:	0005      	movs	r5, r0
 8000e90:	4319      	orrs	r1, r3
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d900      	bls.n	8000e98 <__aeabi_ddiv+0x1f0>
 8000e96:	e16c      	b.n	8001172 <__aeabi_ddiv+0x4ca>
 8000e98:	1a88      	subs	r0, r1, r2
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	f7ff f9c0 	bl	8000220 <__aeabi_uidivmod>
 8000ea0:	9a01      	ldr	r2, [sp, #4]
 8000ea2:	0436      	lsls	r6, r6, #16
 8000ea4:	4342      	muls	r2, r0
 8000ea6:	0409      	lsls	r1, r1, #16
 8000ea8:	0c36      	lsrs	r6, r6, #16
 8000eaa:	0003      	movs	r3, r0
 8000eac:	430e      	orrs	r6, r1
 8000eae:	42b2      	cmp	r2, r6
 8000eb0:	d900      	bls.n	8000eb4 <__aeabi_ddiv+0x20c>
 8000eb2:	e153      	b.n	800115c <__aeabi_ddiv+0x4b4>
 8000eb4:	9803      	ldr	r0, [sp, #12]
 8000eb6:	1ab6      	subs	r6, r6, r2
 8000eb8:	0002      	movs	r2, r0
 8000eba:	042d      	lsls	r5, r5, #16
 8000ebc:	431d      	orrs	r5, r3
 8000ebe:	9f02      	ldr	r7, [sp, #8]
 8000ec0:	042b      	lsls	r3, r5, #16
 8000ec2:	0c1b      	lsrs	r3, r3, #16
 8000ec4:	435a      	muls	r2, r3
 8000ec6:	437b      	muls	r3, r7
 8000ec8:	469c      	mov	ip, r3
 8000eca:	0c29      	lsrs	r1, r5, #16
 8000ecc:	4348      	muls	r0, r1
 8000ece:	0c13      	lsrs	r3, r2, #16
 8000ed0:	4484      	add	ip, r0
 8000ed2:	4463      	add	r3, ip
 8000ed4:	4379      	muls	r1, r7
 8000ed6:	4298      	cmp	r0, r3
 8000ed8:	d903      	bls.n	8000ee2 <__aeabi_ddiv+0x23a>
 8000eda:	2080      	movs	r0, #128	; 0x80
 8000edc:	0240      	lsls	r0, r0, #9
 8000ede:	4684      	mov	ip, r0
 8000ee0:	4461      	add	r1, ip
 8000ee2:	0c18      	lsrs	r0, r3, #16
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	041b      	lsls	r3, r3, #16
 8000ee8:	0c12      	lsrs	r2, r2, #16
 8000eea:	1840      	adds	r0, r0, r1
 8000eec:	189b      	adds	r3, r3, r2
 8000eee:	4286      	cmp	r6, r0
 8000ef0:	d200      	bcs.n	8000ef4 <__aeabi_ddiv+0x24c>
 8000ef2:	e100      	b.n	80010f6 <__aeabi_ddiv+0x44e>
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_ddiv+0x250>
 8000ef6:	e0fb      	b.n	80010f0 <__aeabi_ddiv+0x448>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	431d      	orrs	r5, r3
 8000efc:	4b49      	ldr	r3, [pc, #292]	; (8001024 <__aeabi_ddiv+0x37c>)
 8000efe:	445b      	add	r3, fp
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_ddiv+0x25e>
 8000f04:	e0aa      	b.n	800105c <__aeabi_ddiv+0x3b4>
 8000f06:	076a      	lsls	r2, r5, #29
 8000f08:	d000      	beq.n	8000f0c <__aeabi_ddiv+0x264>
 8000f0a:	e13d      	b.n	8001188 <__aeabi_ddiv+0x4e0>
 8000f0c:	08e9      	lsrs	r1, r5, #3
 8000f0e:	4642      	mov	r2, r8
 8000f10:	01d2      	lsls	r2, r2, #7
 8000f12:	d506      	bpl.n	8000f22 <__aeabi_ddiv+0x27a>
 8000f14:	4642      	mov	r2, r8
 8000f16:	4b44      	ldr	r3, [pc, #272]	; (8001028 <__aeabi_ddiv+0x380>)
 8000f18:	401a      	ands	r2, r3
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	4690      	mov	r8, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	445b      	add	r3, fp
 8000f22:	4a42      	ldr	r2, [pc, #264]	; (800102c <__aeabi_ddiv+0x384>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_ddiv+0x282>
 8000f28:	e723      	b.n	8000d72 <__aeabi_ddiv+0xca>
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	055b      	lsls	r3, r3, #21
 8000f2e:	0755      	lsls	r5, r2, #29
 8000f30:	0252      	lsls	r2, r2, #9
 8000f32:	430d      	orrs	r5, r1
 8000f34:	0b12      	lsrs	r2, r2, #12
 8000f36:	0d5b      	lsrs	r3, r3, #21
 8000f38:	e70d      	b.n	8000d56 <__aeabi_ddiv+0xae>
 8000f3a:	4651      	mov	r1, sl
 8000f3c:	4321      	orrs	r1, r4
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_ddiv+0x29a>
 8000f40:	e07c      	b.n	800103c <__aeabi_ddiv+0x394>
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x2a0>
 8000f46:	e0fb      	b.n	8001140 <__aeabi_ddiv+0x498>
 8000f48:	0020      	movs	r0, r4
 8000f4a:	f001 f987 	bl	800225c <__clzsi2>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	3a0b      	subs	r2, #11
 8000f52:	231d      	movs	r3, #29
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	4652      	mov	r2, sl
 8000f58:	0001      	movs	r1, r0
 8000f5a:	40da      	lsrs	r2, r3
 8000f5c:	4653      	mov	r3, sl
 8000f5e:	3908      	subs	r1, #8
 8000f60:	408b      	lsls	r3, r1
 8000f62:	408c      	lsls	r4, r1
 8000f64:	0019      	movs	r1, r3
 8000f66:	4314      	orrs	r4, r2
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <__aeabi_ddiv+0x388>)
 8000f6a:	4458      	add	r0, fp
 8000f6c:	469b      	mov	fp, r3
 8000f6e:	4483      	add	fp, r0
 8000f70:	2000      	movs	r0, #0
 8000f72:	e6d9      	b.n	8000d28 <__aeabi_ddiv+0x80>
 8000f74:	0003      	movs	r3, r0
 8000f76:	4323      	orrs	r3, r4
 8000f78:	4698      	mov	r8, r3
 8000f7a:	d044      	beq.n	8001006 <__aeabi_ddiv+0x35e>
 8000f7c:	2c00      	cmp	r4, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x2da>
 8000f80:	e0cf      	b.n	8001122 <__aeabi_ddiv+0x47a>
 8000f82:	0020      	movs	r0, r4
 8000f84:	f001 f96a 	bl	800225c <__clzsi2>
 8000f88:	0001      	movs	r1, r0
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	390b      	subs	r1, #11
 8000f8e:	231d      	movs	r3, #29
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	4649      	mov	r1, r9
 8000f94:	0010      	movs	r0, r2
 8000f96:	40d9      	lsrs	r1, r3
 8000f98:	3808      	subs	r0, #8
 8000f9a:	4084      	lsls	r4, r0
 8000f9c:	000b      	movs	r3, r1
 8000f9e:	464d      	mov	r5, r9
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	4698      	mov	r8, r3
 8000fa4:	4085      	lsls	r5, r0
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <__aeabi_ddiv+0x38c>)
 8000fa8:	1a9b      	subs	r3, r3, r2
 8000faa:	469b      	mov	fp, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	4699      	mov	r9, r3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	e69e      	b.n	8000cf2 <__aeabi_ddiv+0x4a>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	4322      	orrs	r2, r4
 8000fb8:	4690      	mov	r8, r2
 8000fba:	d11d      	bne.n	8000ff8 <__aeabi_ddiv+0x350>
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	469b      	mov	fp, r3
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	2500      	movs	r5, #0
 8000fc4:	4691      	mov	r9, r2
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	e693      	b.n	8000cf2 <__aeabi_ddiv+0x4a>
 8000fca:	4651      	mov	r1, sl
 8000fcc:	4321      	orrs	r1, r4
 8000fce:	d109      	bne.n	8000fe4 <__aeabi_ddiv+0x33c>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <__aeabi_ddiv+0x390>)
 8000fd8:	4691      	mov	r9, r2
 8000fda:	469c      	mov	ip, r3
 8000fdc:	2400      	movs	r4, #0
 8000fde:	2002      	movs	r0, #2
 8000fe0:	44e3      	add	fp, ip
 8000fe2:	e6a1      	b.n	8000d28 <__aeabi_ddiv+0x80>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	464a      	mov	r2, r9
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <__aeabi_ddiv+0x390>)
 8000fec:	4691      	mov	r9, r2
 8000fee:	469c      	mov	ip, r3
 8000ff0:	4651      	mov	r1, sl
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	44e3      	add	fp, ip
 8000ff6:	e697      	b.n	8000d28 <__aeabi_ddiv+0x80>
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	469b      	mov	fp, r3
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	46a0      	mov	r8, r4
 8001000:	4691      	mov	r9, r2
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	e675      	b.n	8000cf2 <__aeabi_ddiv+0x4a>
 8001006:	2304      	movs	r3, #4
 8001008:	4699      	mov	r9, r3
 800100a:	2300      	movs	r3, #0
 800100c:	469b      	mov	fp, r3
 800100e:	3301      	adds	r3, #1
 8001010:	2500      	movs	r5, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	e66d      	b.n	8000cf2 <__aeabi_ddiv+0x4a>
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	000007ff 	.word	0x000007ff
 800101c:	fffffc01 	.word	0xfffffc01
 8001020:	08006a84 	.word	0x08006a84
 8001024:	000003ff 	.word	0x000003ff
 8001028:	feffffff 	.word	0xfeffffff
 800102c:	000007fe 	.word	0x000007fe
 8001030:	000003f3 	.word	0x000003f3
 8001034:	fffffc0d 	.word	0xfffffc0d
 8001038:	fffff801 	.word	0xfffff801
 800103c:	464a      	mov	r2, r9
 800103e:	2301      	movs	r3, #1
 8001040:	431a      	orrs	r2, r3
 8001042:	4691      	mov	r9, r2
 8001044:	2400      	movs	r4, #0
 8001046:	2001      	movs	r0, #1
 8001048:	e66e      	b.n	8000d28 <__aeabi_ddiv+0x80>
 800104a:	2300      	movs	r3, #0
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	469a      	mov	sl, r3
 8001050:	2500      	movs	r5, #0
 8001052:	4b88      	ldr	r3, [pc, #544]	; (8001274 <__aeabi_ddiv+0x5cc>)
 8001054:	0312      	lsls	r2, r2, #12
 8001056:	e67e      	b.n	8000d56 <__aeabi_ddiv+0xae>
 8001058:	2501      	movs	r5, #1
 800105a:	426d      	negs	r5, r5
 800105c:	2201      	movs	r2, #1
 800105e:	1ad2      	subs	r2, r2, r3
 8001060:	2a38      	cmp	r2, #56	; 0x38
 8001062:	dd00      	ble.n	8001066 <__aeabi_ddiv+0x3be>
 8001064:	e674      	b.n	8000d50 <__aeabi_ddiv+0xa8>
 8001066:	2a1f      	cmp	r2, #31
 8001068:	dc00      	bgt.n	800106c <__aeabi_ddiv+0x3c4>
 800106a:	e0bd      	b.n	80011e8 <__aeabi_ddiv+0x540>
 800106c:	211f      	movs	r1, #31
 800106e:	4249      	negs	r1, r1
 8001070:	1acb      	subs	r3, r1, r3
 8001072:	4641      	mov	r1, r8
 8001074:	40d9      	lsrs	r1, r3
 8001076:	000b      	movs	r3, r1
 8001078:	2a20      	cmp	r2, #32
 800107a:	d004      	beq.n	8001086 <__aeabi_ddiv+0x3de>
 800107c:	4641      	mov	r1, r8
 800107e:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <__aeabi_ddiv+0x5d0>)
 8001080:	445a      	add	r2, fp
 8001082:	4091      	lsls	r1, r2
 8001084:	430d      	orrs	r5, r1
 8001086:	0029      	movs	r1, r5
 8001088:	1e4a      	subs	r2, r1, #1
 800108a:	4191      	sbcs	r1, r2
 800108c:	4319      	orrs	r1, r3
 800108e:	2307      	movs	r3, #7
 8001090:	001d      	movs	r5, r3
 8001092:	2200      	movs	r2, #0
 8001094:	400d      	ands	r5, r1
 8001096:	420b      	tst	r3, r1
 8001098:	d100      	bne.n	800109c <__aeabi_ddiv+0x3f4>
 800109a:	e0d0      	b.n	800123e <__aeabi_ddiv+0x596>
 800109c:	220f      	movs	r2, #15
 800109e:	2300      	movs	r3, #0
 80010a0:	400a      	ands	r2, r1
 80010a2:	2a04      	cmp	r2, #4
 80010a4:	d100      	bne.n	80010a8 <__aeabi_ddiv+0x400>
 80010a6:	e0c7      	b.n	8001238 <__aeabi_ddiv+0x590>
 80010a8:	1d0a      	adds	r2, r1, #4
 80010aa:	428a      	cmp	r2, r1
 80010ac:	4189      	sbcs	r1, r1
 80010ae:	4249      	negs	r1, r1
 80010b0:	185b      	adds	r3, r3, r1
 80010b2:	0011      	movs	r1, r2
 80010b4:	021a      	lsls	r2, r3, #8
 80010b6:	d400      	bmi.n	80010ba <__aeabi_ddiv+0x412>
 80010b8:	e0be      	b.n	8001238 <__aeabi_ddiv+0x590>
 80010ba:	2301      	movs	r3, #1
 80010bc:	2200      	movs	r2, #0
 80010be:	2500      	movs	r5, #0
 80010c0:	e649      	b.n	8000d56 <__aeabi_ddiv+0xae>
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	4643      	mov	r3, r8
 80010c6:	0312      	lsls	r2, r2, #12
 80010c8:	4213      	tst	r3, r2
 80010ca:	d008      	beq.n	80010de <__aeabi_ddiv+0x436>
 80010cc:	4214      	tst	r4, r2
 80010ce:	d106      	bne.n	80010de <__aeabi_ddiv+0x436>
 80010d0:	4322      	orrs	r2, r4
 80010d2:	0312      	lsls	r2, r2, #12
 80010d4:	46ba      	mov	sl, r7
 80010d6:	000d      	movs	r5, r1
 80010d8:	4b66      	ldr	r3, [pc, #408]	; (8001274 <__aeabi_ddiv+0x5cc>)
 80010da:	0b12      	lsrs	r2, r2, #12
 80010dc:	e63b      	b.n	8000d56 <__aeabi_ddiv+0xae>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	4643      	mov	r3, r8
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0312      	lsls	r2, r2, #12
 80010e8:	46b2      	mov	sl, r6
 80010ea:	4b62      	ldr	r3, [pc, #392]	; (8001274 <__aeabi_ddiv+0x5cc>)
 80010ec:	0b12      	lsrs	r2, r2, #12
 80010ee:	e632      	b.n	8000d56 <__aeabi_ddiv+0xae>
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x44e>
 80010f4:	e702      	b.n	8000efc <__aeabi_ddiv+0x254>
 80010f6:	19a6      	adds	r6, r4, r6
 80010f8:	1e6a      	subs	r2, r5, #1
 80010fa:	42a6      	cmp	r6, r4
 80010fc:	d200      	bcs.n	8001100 <__aeabi_ddiv+0x458>
 80010fe:	e089      	b.n	8001214 <__aeabi_ddiv+0x56c>
 8001100:	4286      	cmp	r6, r0
 8001102:	d200      	bcs.n	8001106 <__aeabi_ddiv+0x45e>
 8001104:	e09f      	b.n	8001246 <__aeabi_ddiv+0x59e>
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x462>
 8001108:	e0af      	b.n	800126a <__aeabi_ddiv+0x5c2>
 800110a:	0015      	movs	r5, r2
 800110c:	e6f4      	b.n	8000ef8 <__aeabi_ddiv+0x250>
 800110e:	42a9      	cmp	r1, r5
 8001110:	d900      	bls.n	8001114 <__aeabi_ddiv+0x46c>
 8001112:	e63c      	b.n	8000d8e <__aeabi_ddiv+0xe6>
 8001114:	4643      	mov	r3, r8
 8001116:	07de      	lsls	r6, r3, #31
 8001118:	0858      	lsrs	r0, r3, #1
 800111a:	086b      	lsrs	r3, r5, #1
 800111c:	431e      	orrs	r6, r3
 800111e:	07ed      	lsls	r5, r5, #31
 8001120:	e63c      	b.n	8000d9c <__aeabi_ddiv+0xf4>
 8001122:	f001 f89b 	bl	800225c <__clzsi2>
 8001126:	0001      	movs	r1, r0
 8001128:	0002      	movs	r2, r0
 800112a:	3115      	adds	r1, #21
 800112c:	3220      	adds	r2, #32
 800112e:	291c      	cmp	r1, #28
 8001130:	dc00      	bgt.n	8001134 <__aeabi_ddiv+0x48c>
 8001132:	e72c      	b.n	8000f8e <__aeabi_ddiv+0x2e6>
 8001134:	464b      	mov	r3, r9
 8001136:	3808      	subs	r0, #8
 8001138:	4083      	lsls	r3, r0
 800113a:	2500      	movs	r5, #0
 800113c:	4698      	mov	r8, r3
 800113e:	e732      	b.n	8000fa6 <__aeabi_ddiv+0x2fe>
 8001140:	f001 f88c 	bl	800225c <__clzsi2>
 8001144:	0003      	movs	r3, r0
 8001146:	001a      	movs	r2, r3
 8001148:	3215      	adds	r2, #21
 800114a:	3020      	adds	r0, #32
 800114c:	2a1c      	cmp	r2, #28
 800114e:	dc00      	bgt.n	8001152 <__aeabi_ddiv+0x4aa>
 8001150:	e6ff      	b.n	8000f52 <__aeabi_ddiv+0x2aa>
 8001152:	4654      	mov	r4, sl
 8001154:	3b08      	subs	r3, #8
 8001156:	2100      	movs	r1, #0
 8001158:	409c      	lsls	r4, r3
 800115a:	e705      	b.n	8000f68 <__aeabi_ddiv+0x2c0>
 800115c:	1936      	adds	r6, r6, r4
 800115e:	3b01      	subs	r3, #1
 8001160:	42b4      	cmp	r4, r6
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x4be>
 8001164:	e6a6      	b.n	8000eb4 <__aeabi_ddiv+0x20c>
 8001166:	42b2      	cmp	r2, r6
 8001168:	d800      	bhi.n	800116c <__aeabi_ddiv+0x4c4>
 800116a:	e6a3      	b.n	8000eb4 <__aeabi_ddiv+0x20c>
 800116c:	1e83      	subs	r3, r0, #2
 800116e:	1936      	adds	r6, r6, r4
 8001170:	e6a0      	b.n	8000eb4 <__aeabi_ddiv+0x20c>
 8001172:	1909      	adds	r1, r1, r4
 8001174:	3d01      	subs	r5, #1
 8001176:	428c      	cmp	r4, r1
 8001178:	d900      	bls.n	800117c <__aeabi_ddiv+0x4d4>
 800117a:	e68d      	b.n	8000e98 <__aeabi_ddiv+0x1f0>
 800117c:	428a      	cmp	r2, r1
 800117e:	d800      	bhi.n	8001182 <__aeabi_ddiv+0x4da>
 8001180:	e68a      	b.n	8000e98 <__aeabi_ddiv+0x1f0>
 8001182:	1e85      	subs	r5, r0, #2
 8001184:	1909      	adds	r1, r1, r4
 8001186:	e687      	b.n	8000e98 <__aeabi_ddiv+0x1f0>
 8001188:	220f      	movs	r2, #15
 800118a:	402a      	ands	r2, r5
 800118c:	2a04      	cmp	r2, #4
 800118e:	d100      	bne.n	8001192 <__aeabi_ddiv+0x4ea>
 8001190:	e6bc      	b.n	8000f0c <__aeabi_ddiv+0x264>
 8001192:	1d29      	adds	r1, r5, #4
 8001194:	42a9      	cmp	r1, r5
 8001196:	41ad      	sbcs	r5, r5
 8001198:	426d      	negs	r5, r5
 800119a:	08c9      	lsrs	r1, r1, #3
 800119c:	44a8      	add	r8, r5
 800119e:	e6b6      	b.n	8000f0e <__aeabi_ddiv+0x266>
 80011a0:	42af      	cmp	r7, r5
 80011a2:	d900      	bls.n	80011a6 <__aeabi_ddiv+0x4fe>
 80011a4:	e662      	b.n	8000e6c <__aeabi_ddiv+0x1c4>
 80011a6:	4281      	cmp	r1, r0
 80011a8:	d804      	bhi.n	80011b4 <__aeabi_ddiv+0x50c>
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0x506>
 80011ac:	e65e      	b.n	8000e6c <__aeabi_ddiv+0x1c4>
 80011ae:	42ae      	cmp	r6, r5
 80011b0:	d800      	bhi.n	80011b4 <__aeabi_ddiv+0x50c>
 80011b2:	e65b      	b.n	8000e6c <__aeabi_ddiv+0x1c4>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	44e0      	add	r8, ip
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	429d      	cmp	r5, r3
 80011c4:	419b      	sbcs	r3, r3
 80011c6:	425b      	negs	r3, r3
 80011c8:	191b      	adds	r3, r3, r4
 80011ca:	18c0      	adds	r0, r0, r3
 80011cc:	e64f      	b.n	8000e6e <__aeabi_ddiv+0x1c6>
 80011ce:	42b2      	cmp	r2, r6
 80011d0:	d800      	bhi.n	80011d4 <__aeabi_ddiv+0x52c>
 80011d2:	e612      	b.n	8000dfa <__aeabi_ddiv+0x152>
 80011d4:	1e83      	subs	r3, r0, #2
 80011d6:	1936      	adds	r6, r6, r4
 80011d8:	e60f      	b.n	8000dfa <__aeabi_ddiv+0x152>
 80011da:	428a      	cmp	r2, r1
 80011dc:	d800      	bhi.n	80011e0 <__aeabi_ddiv+0x538>
 80011de:	e5fa      	b.n	8000dd6 <__aeabi_ddiv+0x12e>
 80011e0:	1e83      	subs	r3, r0, #2
 80011e2:	4698      	mov	r8, r3
 80011e4:	1909      	adds	r1, r1, r4
 80011e6:	e5f6      	b.n	8000dd6 <__aeabi_ddiv+0x12e>
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <__aeabi_ddiv+0x5d4>)
 80011ea:	0028      	movs	r0, r5
 80011ec:	445b      	add	r3, fp
 80011ee:	4641      	mov	r1, r8
 80011f0:	409d      	lsls	r5, r3
 80011f2:	4099      	lsls	r1, r3
 80011f4:	40d0      	lsrs	r0, r2
 80011f6:	1e6b      	subs	r3, r5, #1
 80011f8:	419d      	sbcs	r5, r3
 80011fa:	4643      	mov	r3, r8
 80011fc:	4301      	orrs	r1, r0
 80011fe:	4329      	orrs	r1, r5
 8001200:	40d3      	lsrs	r3, r2
 8001202:	074a      	lsls	r2, r1, #29
 8001204:	d100      	bne.n	8001208 <__aeabi_ddiv+0x560>
 8001206:	e755      	b.n	80010b4 <__aeabi_ddiv+0x40c>
 8001208:	220f      	movs	r2, #15
 800120a:	400a      	ands	r2, r1
 800120c:	2a04      	cmp	r2, #4
 800120e:	d000      	beq.n	8001212 <__aeabi_ddiv+0x56a>
 8001210:	e74a      	b.n	80010a8 <__aeabi_ddiv+0x400>
 8001212:	e74f      	b.n	80010b4 <__aeabi_ddiv+0x40c>
 8001214:	0015      	movs	r5, r2
 8001216:	4286      	cmp	r6, r0
 8001218:	d000      	beq.n	800121c <__aeabi_ddiv+0x574>
 800121a:	e66d      	b.n	8000ef8 <__aeabi_ddiv+0x250>
 800121c:	9a00      	ldr	r2, [sp, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d000      	beq.n	8001224 <__aeabi_ddiv+0x57c>
 8001222:	e669      	b.n	8000ef8 <__aeabi_ddiv+0x250>
 8001224:	e66a      	b.n	8000efc <__aeabi_ddiv+0x254>
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <__aeabi_ddiv+0x5d8>)
 8001228:	445b      	add	r3, fp
 800122a:	2b00      	cmp	r3, #0
 800122c:	dc00      	bgt.n	8001230 <__aeabi_ddiv+0x588>
 800122e:	e713      	b.n	8001058 <__aeabi_ddiv+0x3b0>
 8001230:	2501      	movs	r5, #1
 8001232:	2100      	movs	r1, #0
 8001234:	44a8      	add	r8, r5
 8001236:	e66a      	b.n	8000f0e <__aeabi_ddiv+0x266>
 8001238:	075d      	lsls	r5, r3, #29
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	0b1a      	lsrs	r2, r3, #12
 800123e:	08c9      	lsrs	r1, r1, #3
 8001240:	2300      	movs	r3, #0
 8001242:	430d      	orrs	r5, r1
 8001244:	e587      	b.n	8000d56 <__aeabi_ddiv+0xae>
 8001246:	9900      	ldr	r1, [sp, #0]
 8001248:	3d02      	subs	r5, #2
 800124a:	004a      	lsls	r2, r1, #1
 800124c:	428a      	cmp	r2, r1
 800124e:	41bf      	sbcs	r7, r7
 8001250:	427f      	negs	r7, r7
 8001252:	193f      	adds	r7, r7, r4
 8001254:	19f6      	adds	r6, r6, r7
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	e7dd      	b.n	8001216 <__aeabi_ddiv+0x56e>
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	4643      	mov	r3, r8
 800125e:	0312      	lsls	r2, r2, #12
 8001260:	431a      	orrs	r2, r3
 8001262:	0312      	lsls	r2, r2, #12
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <__aeabi_ddiv+0x5cc>)
 8001266:	0b12      	lsrs	r2, r2, #12
 8001268:	e575      	b.n	8000d56 <__aeabi_ddiv+0xae>
 800126a:	9900      	ldr	r1, [sp, #0]
 800126c:	4299      	cmp	r1, r3
 800126e:	d3ea      	bcc.n	8001246 <__aeabi_ddiv+0x59e>
 8001270:	0015      	movs	r5, r2
 8001272:	e7d3      	b.n	800121c <__aeabi_ddiv+0x574>
 8001274:	000007ff 	.word	0x000007ff
 8001278:	0000043e 	.word	0x0000043e
 800127c:	0000041e 	.word	0x0000041e
 8001280:	000003ff 	.word	0x000003ff

08001284 <__eqdf2>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	464e      	mov	r6, r9
 8001288:	4645      	mov	r5, r8
 800128a:	46de      	mov	lr, fp
 800128c:	4657      	mov	r7, sl
 800128e:	4690      	mov	r8, r2
 8001290:	b5e0      	push	{r5, r6, r7, lr}
 8001292:	0017      	movs	r7, r2
 8001294:	031a      	lsls	r2, r3, #12
 8001296:	0b12      	lsrs	r2, r2, #12
 8001298:	0005      	movs	r5, r0
 800129a:	4684      	mov	ip, r0
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <__eqdf2+0x80>)
 800129e:	030e      	lsls	r6, r1, #12
 80012a0:	004c      	lsls	r4, r1, #1
 80012a2:	4691      	mov	r9, r2
 80012a4:	005a      	lsls	r2, r3, #1
 80012a6:	0fdb      	lsrs	r3, r3, #31
 80012a8:	469b      	mov	fp, r3
 80012aa:	0b36      	lsrs	r6, r6, #12
 80012ac:	0d64      	lsrs	r4, r4, #21
 80012ae:	0fc9      	lsrs	r1, r1, #31
 80012b0:	0d52      	lsrs	r2, r2, #21
 80012b2:	4284      	cmp	r4, r0
 80012b4:	d019      	beq.n	80012ea <__eqdf2+0x66>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	d010      	beq.n	80012dc <__eqdf2+0x58>
 80012ba:	2001      	movs	r0, #1
 80012bc:	4294      	cmp	r4, r2
 80012be:	d10e      	bne.n	80012de <__eqdf2+0x5a>
 80012c0:	454e      	cmp	r6, r9
 80012c2:	d10c      	bne.n	80012de <__eqdf2+0x5a>
 80012c4:	2001      	movs	r0, #1
 80012c6:	45c4      	cmp	ip, r8
 80012c8:	d109      	bne.n	80012de <__eqdf2+0x5a>
 80012ca:	4559      	cmp	r1, fp
 80012cc:	d017      	beq.n	80012fe <__eqdf2+0x7a>
 80012ce:	2c00      	cmp	r4, #0
 80012d0:	d105      	bne.n	80012de <__eqdf2+0x5a>
 80012d2:	0030      	movs	r0, r6
 80012d4:	4328      	orrs	r0, r5
 80012d6:	1e43      	subs	r3, r0, #1
 80012d8:	4198      	sbcs	r0, r3
 80012da:	e000      	b.n	80012de <__eqdf2+0x5a>
 80012dc:	2001      	movs	r0, #1
 80012de:	bcf0      	pop	{r4, r5, r6, r7}
 80012e0:	46bb      	mov	fp, r7
 80012e2:	46b2      	mov	sl, r6
 80012e4:	46a9      	mov	r9, r5
 80012e6:	46a0      	mov	r8, r4
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ea:	0033      	movs	r3, r6
 80012ec:	2001      	movs	r0, #1
 80012ee:	432b      	orrs	r3, r5
 80012f0:	d1f5      	bne.n	80012de <__eqdf2+0x5a>
 80012f2:	42a2      	cmp	r2, r4
 80012f4:	d1f3      	bne.n	80012de <__eqdf2+0x5a>
 80012f6:	464b      	mov	r3, r9
 80012f8:	433b      	orrs	r3, r7
 80012fa:	d1f0      	bne.n	80012de <__eqdf2+0x5a>
 80012fc:	e7e2      	b.n	80012c4 <__eqdf2+0x40>
 80012fe:	2000      	movs	r0, #0
 8001300:	e7ed      	b.n	80012de <__eqdf2+0x5a>
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	000007ff 	.word	0x000007ff

08001308 <__gedf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	4647      	mov	r7, r8
 800130c:	46ce      	mov	lr, r9
 800130e:	0004      	movs	r4, r0
 8001310:	0018      	movs	r0, r3
 8001312:	0016      	movs	r6, r2
 8001314:	031b      	lsls	r3, r3, #12
 8001316:	0b1b      	lsrs	r3, r3, #12
 8001318:	4d2d      	ldr	r5, [pc, #180]	; (80013d0 <__gedf2+0xc8>)
 800131a:	004a      	lsls	r2, r1, #1
 800131c:	4699      	mov	r9, r3
 800131e:	b580      	push	{r7, lr}
 8001320:	0043      	lsls	r3, r0, #1
 8001322:	030f      	lsls	r7, r1, #12
 8001324:	46a4      	mov	ip, r4
 8001326:	46b0      	mov	r8, r6
 8001328:	0b3f      	lsrs	r7, r7, #12
 800132a:	0d52      	lsrs	r2, r2, #21
 800132c:	0fc9      	lsrs	r1, r1, #31
 800132e:	0d5b      	lsrs	r3, r3, #21
 8001330:	0fc0      	lsrs	r0, r0, #31
 8001332:	42aa      	cmp	r2, r5
 8001334:	d021      	beq.n	800137a <__gedf2+0x72>
 8001336:	42ab      	cmp	r3, r5
 8001338:	d013      	beq.n	8001362 <__gedf2+0x5a>
 800133a:	2a00      	cmp	r2, #0
 800133c:	d122      	bne.n	8001384 <__gedf2+0x7c>
 800133e:	433c      	orrs	r4, r7
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <__gedf2+0x42>
 8001344:	464d      	mov	r5, r9
 8001346:	432e      	orrs	r6, r5
 8001348:	d022      	beq.n	8001390 <__gedf2+0x88>
 800134a:	2c00      	cmp	r4, #0
 800134c:	d010      	beq.n	8001370 <__gedf2+0x68>
 800134e:	4281      	cmp	r1, r0
 8001350:	d022      	beq.n	8001398 <__gedf2+0x90>
 8001352:	2002      	movs	r0, #2
 8001354:	3901      	subs	r1, #1
 8001356:	4008      	ands	r0, r1
 8001358:	3801      	subs	r0, #1
 800135a:	bcc0      	pop	{r6, r7}
 800135c:	46b9      	mov	r9, r7
 800135e:	46b0      	mov	r8, r6
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	464d      	mov	r5, r9
 8001364:	432e      	orrs	r6, r5
 8001366:	d129      	bne.n	80013bc <__gedf2+0xb4>
 8001368:	2a00      	cmp	r2, #0
 800136a:	d1f0      	bne.n	800134e <__gedf2+0x46>
 800136c:	433c      	orrs	r4, r7
 800136e:	d1ee      	bne.n	800134e <__gedf2+0x46>
 8001370:	2800      	cmp	r0, #0
 8001372:	d1f2      	bne.n	800135a <__gedf2+0x52>
 8001374:	2001      	movs	r0, #1
 8001376:	4240      	negs	r0, r0
 8001378:	e7ef      	b.n	800135a <__gedf2+0x52>
 800137a:	003d      	movs	r5, r7
 800137c:	4325      	orrs	r5, r4
 800137e:	d11d      	bne.n	80013bc <__gedf2+0xb4>
 8001380:	4293      	cmp	r3, r2
 8001382:	d0ee      	beq.n	8001362 <__gedf2+0x5a>
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e2      	bne.n	800134e <__gedf2+0x46>
 8001388:	464c      	mov	r4, r9
 800138a:	4326      	orrs	r6, r4
 800138c:	d1df      	bne.n	800134e <__gedf2+0x46>
 800138e:	e7e0      	b.n	8001352 <__gedf2+0x4a>
 8001390:	2000      	movs	r0, #0
 8001392:	2c00      	cmp	r4, #0
 8001394:	d0e1      	beq.n	800135a <__gedf2+0x52>
 8001396:	e7dc      	b.n	8001352 <__gedf2+0x4a>
 8001398:	429a      	cmp	r2, r3
 800139a:	dc0a      	bgt.n	80013b2 <__gedf2+0xaa>
 800139c:	dbe8      	blt.n	8001370 <__gedf2+0x68>
 800139e:	454f      	cmp	r7, r9
 80013a0:	d8d7      	bhi.n	8001352 <__gedf2+0x4a>
 80013a2:	d00e      	beq.n	80013c2 <__gedf2+0xba>
 80013a4:	2000      	movs	r0, #0
 80013a6:	454f      	cmp	r7, r9
 80013a8:	d2d7      	bcs.n	800135a <__gedf2+0x52>
 80013aa:	2900      	cmp	r1, #0
 80013ac:	d0e2      	beq.n	8001374 <__gedf2+0x6c>
 80013ae:	0008      	movs	r0, r1
 80013b0:	e7d3      	b.n	800135a <__gedf2+0x52>
 80013b2:	4243      	negs	r3, r0
 80013b4:	4158      	adcs	r0, r3
 80013b6:	0040      	lsls	r0, r0, #1
 80013b8:	3801      	subs	r0, #1
 80013ba:	e7ce      	b.n	800135a <__gedf2+0x52>
 80013bc:	2002      	movs	r0, #2
 80013be:	4240      	negs	r0, r0
 80013c0:	e7cb      	b.n	800135a <__gedf2+0x52>
 80013c2:	45c4      	cmp	ip, r8
 80013c4:	d8c5      	bhi.n	8001352 <__gedf2+0x4a>
 80013c6:	2000      	movs	r0, #0
 80013c8:	45c4      	cmp	ip, r8
 80013ca:	d2c6      	bcs.n	800135a <__gedf2+0x52>
 80013cc:	e7ed      	b.n	80013aa <__gedf2+0xa2>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	000007ff 	.word	0x000007ff

080013d4 <__ledf2>:
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	4647      	mov	r7, r8
 80013d8:	46ce      	mov	lr, r9
 80013da:	0004      	movs	r4, r0
 80013dc:	0018      	movs	r0, r3
 80013de:	0016      	movs	r6, r2
 80013e0:	031b      	lsls	r3, r3, #12
 80013e2:	0b1b      	lsrs	r3, r3, #12
 80013e4:	4d2c      	ldr	r5, [pc, #176]	; (8001498 <__ledf2+0xc4>)
 80013e6:	004a      	lsls	r2, r1, #1
 80013e8:	4699      	mov	r9, r3
 80013ea:	b580      	push	{r7, lr}
 80013ec:	0043      	lsls	r3, r0, #1
 80013ee:	030f      	lsls	r7, r1, #12
 80013f0:	46a4      	mov	ip, r4
 80013f2:	46b0      	mov	r8, r6
 80013f4:	0b3f      	lsrs	r7, r7, #12
 80013f6:	0d52      	lsrs	r2, r2, #21
 80013f8:	0fc9      	lsrs	r1, r1, #31
 80013fa:	0d5b      	lsrs	r3, r3, #21
 80013fc:	0fc0      	lsrs	r0, r0, #31
 80013fe:	42aa      	cmp	r2, r5
 8001400:	d00d      	beq.n	800141e <__ledf2+0x4a>
 8001402:	42ab      	cmp	r3, r5
 8001404:	d010      	beq.n	8001428 <__ledf2+0x54>
 8001406:	2a00      	cmp	r2, #0
 8001408:	d127      	bne.n	800145a <__ledf2+0x86>
 800140a:	433c      	orrs	r4, r7
 800140c:	2b00      	cmp	r3, #0
 800140e:	d111      	bne.n	8001434 <__ledf2+0x60>
 8001410:	464d      	mov	r5, r9
 8001412:	432e      	orrs	r6, r5
 8001414:	d10e      	bne.n	8001434 <__ledf2+0x60>
 8001416:	2000      	movs	r0, #0
 8001418:	2c00      	cmp	r4, #0
 800141a:	d015      	beq.n	8001448 <__ledf2+0x74>
 800141c:	e00e      	b.n	800143c <__ledf2+0x68>
 800141e:	003d      	movs	r5, r7
 8001420:	4325      	orrs	r5, r4
 8001422:	d110      	bne.n	8001446 <__ledf2+0x72>
 8001424:	4293      	cmp	r3, r2
 8001426:	d118      	bne.n	800145a <__ledf2+0x86>
 8001428:	464d      	mov	r5, r9
 800142a:	432e      	orrs	r6, r5
 800142c:	d10b      	bne.n	8001446 <__ledf2+0x72>
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <__ledf2+0x64>
 8001432:	433c      	orrs	r4, r7
 8001434:	2c00      	cmp	r4, #0
 8001436:	d00b      	beq.n	8001450 <__ledf2+0x7c>
 8001438:	4281      	cmp	r1, r0
 800143a:	d014      	beq.n	8001466 <__ledf2+0x92>
 800143c:	2002      	movs	r0, #2
 800143e:	3901      	subs	r1, #1
 8001440:	4008      	ands	r0, r1
 8001442:	3801      	subs	r0, #1
 8001444:	e000      	b.n	8001448 <__ledf2+0x74>
 8001446:	2002      	movs	r0, #2
 8001448:	bcc0      	pop	{r6, r7}
 800144a:	46b9      	mov	r9, r7
 800144c:	46b0      	mov	r8, r6
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	2800      	cmp	r0, #0
 8001452:	d1f9      	bne.n	8001448 <__ledf2+0x74>
 8001454:	2001      	movs	r0, #1
 8001456:	4240      	negs	r0, r0
 8001458:	e7f6      	b.n	8001448 <__ledf2+0x74>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1ec      	bne.n	8001438 <__ledf2+0x64>
 800145e:	464c      	mov	r4, r9
 8001460:	4326      	orrs	r6, r4
 8001462:	d1e9      	bne.n	8001438 <__ledf2+0x64>
 8001464:	e7ea      	b.n	800143c <__ledf2+0x68>
 8001466:	429a      	cmp	r2, r3
 8001468:	dd04      	ble.n	8001474 <__ledf2+0xa0>
 800146a:	4243      	negs	r3, r0
 800146c:	4158      	adcs	r0, r3
 800146e:	0040      	lsls	r0, r0, #1
 8001470:	3801      	subs	r0, #1
 8001472:	e7e9      	b.n	8001448 <__ledf2+0x74>
 8001474:	429a      	cmp	r2, r3
 8001476:	dbeb      	blt.n	8001450 <__ledf2+0x7c>
 8001478:	454f      	cmp	r7, r9
 800147a:	d8df      	bhi.n	800143c <__ledf2+0x68>
 800147c:	d006      	beq.n	800148c <__ledf2+0xb8>
 800147e:	2000      	movs	r0, #0
 8001480:	454f      	cmp	r7, r9
 8001482:	d2e1      	bcs.n	8001448 <__ledf2+0x74>
 8001484:	2900      	cmp	r1, #0
 8001486:	d0e5      	beq.n	8001454 <__ledf2+0x80>
 8001488:	0008      	movs	r0, r1
 800148a:	e7dd      	b.n	8001448 <__ledf2+0x74>
 800148c:	45c4      	cmp	ip, r8
 800148e:	d8d5      	bhi.n	800143c <__ledf2+0x68>
 8001490:	2000      	movs	r0, #0
 8001492:	45c4      	cmp	ip, r8
 8001494:	d2d8      	bcs.n	8001448 <__ledf2+0x74>
 8001496:	e7f5      	b.n	8001484 <__ledf2+0xb0>
 8001498:	000007ff 	.word	0x000007ff

0800149c <__aeabi_dmul>:
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	4645      	mov	r5, r8
 80014a0:	46de      	mov	lr, fp
 80014a2:	4657      	mov	r7, sl
 80014a4:	464e      	mov	r6, r9
 80014a6:	b5e0      	push	{r5, r6, r7, lr}
 80014a8:	001f      	movs	r7, r3
 80014aa:	030b      	lsls	r3, r1, #12
 80014ac:	0b1b      	lsrs	r3, r3, #12
 80014ae:	469b      	mov	fp, r3
 80014b0:	004d      	lsls	r5, r1, #1
 80014b2:	0fcb      	lsrs	r3, r1, #31
 80014b4:	0004      	movs	r4, r0
 80014b6:	4691      	mov	r9, r2
 80014b8:	4698      	mov	r8, r3
 80014ba:	b087      	sub	sp, #28
 80014bc:	0d6d      	lsrs	r5, r5, #21
 80014be:	d100      	bne.n	80014c2 <__aeabi_dmul+0x26>
 80014c0:	e1cd      	b.n	800185e <__aeabi_dmul+0x3c2>
 80014c2:	4bce      	ldr	r3, [pc, #824]	; (80017fc <__aeabi_dmul+0x360>)
 80014c4:	429d      	cmp	r5, r3
 80014c6:	d100      	bne.n	80014ca <__aeabi_dmul+0x2e>
 80014c8:	e1e9      	b.n	800189e <__aeabi_dmul+0x402>
 80014ca:	465a      	mov	r2, fp
 80014cc:	0f43      	lsrs	r3, r0, #29
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	0412      	lsls	r2, r2, #16
 80014d6:	431a      	orrs	r2, r3
 80014d8:	00c3      	lsls	r3, r0, #3
 80014da:	469a      	mov	sl, r3
 80014dc:	4bc8      	ldr	r3, [pc, #800]	; (8001800 <__aeabi_dmul+0x364>)
 80014de:	4693      	mov	fp, r2
 80014e0:	469c      	mov	ip, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	2600      	movs	r6, #0
 80014e6:	4465      	add	r5, ip
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	033c      	lsls	r4, r7, #12
 80014ec:	007b      	lsls	r3, r7, #1
 80014ee:	4648      	mov	r0, r9
 80014f0:	0b24      	lsrs	r4, r4, #12
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	0fff      	lsrs	r7, r7, #31
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dmul+0x60>
 80014fa:	e189      	b.n	8001810 <__aeabi_dmul+0x374>
 80014fc:	4abf      	ldr	r2, [pc, #764]	; (80017fc <__aeabi_dmul+0x360>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <__aeabi_dmul+0x9a>
 8001502:	0f42      	lsrs	r2, r0, #29
 8001504:	00e4      	lsls	r4, r4, #3
 8001506:	4322      	orrs	r2, r4
 8001508:	2480      	movs	r4, #128	; 0x80
 800150a:	0424      	lsls	r4, r4, #16
 800150c:	4314      	orrs	r4, r2
 800150e:	4abc      	ldr	r2, [pc, #752]	; (8001800 <__aeabi_dmul+0x364>)
 8001510:	2100      	movs	r1, #0
 8001512:	4694      	mov	ip, r2
 8001514:	4642      	mov	r2, r8
 8001516:	4463      	add	r3, ip
 8001518:	195b      	adds	r3, r3, r5
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	9b01      	ldr	r3, [sp, #4]
 800151e:	407a      	eors	r2, r7
 8001520:	3301      	adds	r3, #1
 8001522:	00c0      	lsls	r0, r0, #3
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	9302      	str	r3, [sp, #8]
 8001528:	2e0a      	cmp	r6, #10
 800152a:	dd1c      	ble.n	8001566 <__aeabi_dmul+0xca>
 800152c:	003a      	movs	r2, r7
 800152e:	2e0b      	cmp	r6, #11
 8001530:	d05e      	beq.n	80015f0 <__aeabi_dmul+0x154>
 8001532:	4647      	mov	r7, r8
 8001534:	e056      	b.n	80015e4 <__aeabi_dmul+0x148>
 8001536:	4649      	mov	r1, r9
 8001538:	4bb0      	ldr	r3, [pc, #704]	; (80017fc <__aeabi_dmul+0x360>)
 800153a:	4321      	orrs	r1, r4
 800153c:	18eb      	adds	r3, r5, r3
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	2900      	cmp	r1, #0
 8001542:	d12a      	bne.n	800159a <__aeabi_dmul+0xfe>
 8001544:	2080      	movs	r0, #128	; 0x80
 8001546:	2202      	movs	r2, #2
 8001548:	0100      	lsls	r0, r0, #4
 800154a:	002b      	movs	r3, r5
 800154c:	4684      	mov	ip, r0
 800154e:	4316      	orrs	r6, r2
 8001550:	4642      	mov	r2, r8
 8001552:	4463      	add	r3, ip
 8001554:	407a      	eors	r2, r7
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2e0a      	cmp	r6, #10
 800155c:	dd00      	ble.n	8001560 <__aeabi_dmul+0xc4>
 800155e:	e231      	b.n	80019c4 <__aeabi_dmul+0x528>
 8001560:	2000      	movs	r0, #0
 8001562:	2400      	movs	r4, #0
 8001564:	2102      	movs	r1, #2
 8001566:	2e02      	cmp	r6, #2
 8001568:	dc26      	bgt.n	80015b8 <__aeabi_dmul+0x11c>
 800156a:	3e01      	subs	r6, #1
 800156c:	2e01      	cmp	r6, #1
 800156e:	d852      	bhi.n	8001616 <__aeabi_dmul+0x17a>
 8001570:	2902      	cmp	r1, #2
 8001572:	d04c      	beq.n	800160e <__aeabi_dmul+0x172>
 8001574:	2901      	cmp	r1, #1
 8001576:	d000      	beq.n	800157a <__aeabi_dmul+0xde>
 8001578:	e118      	b.n	80017ac <__aeabi_dmul+0x310>
 800157a:	2300      	movs	r3, #0
 800157c:	2400      	movs	r4, #0
 800157e:	2500      	movs	r5, #0
 8001580:	051b      	lsls	r3, r3, #20
 8001582:	4323      	orrs	r3, r4
 8001584:	07d2      	lsls	r2, r2, #31
 8001586:	4313      	orrs	r3, r2
 8001588:	0028      	movs	r0, r5
 800158a:	0019      	movs	r1, r3
 800158c:	b007      	add	sp, #28
 800158e:	bcf0      	pop	{r4, r5, r6, r7}
 8001590:	46bb      	mov	fp, r7
 8001592:	46b2      	mov	sl, r6
 8001594:	46a9      	mov	r9, r5
 8001596:	46a0      	mov	r8, r4
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	2203      	movs	r2, #3
 800159e:	0109      	lsls	r1, r1, #4
 80015a0:	002b      	movs	r3, r5
 80015a2:	468c      	mov	ip, r1
 80015a4:	4316      	orrs	r6, r2
 80015a6:	4642      	mov	r2, r8
 80015a8:	4463      	add	r3, ip
 80015aa:	407a      	eors	r2, r7
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2e0a      	cmp	r6, #10
 80015b2:	dd00      	ble.n	80015b6 <__aeabi_dmul+0x11a>
 80015b4:	e228      	b.n	8001a08 <__aeabi_dmul+0x56c>
 80015b6:	2103      	movs	r1, #3
 80015b8:	2501      	movs	r5, #1
 80015ba:	40b5      	lsls	r5, r6
 80015bc:	46ac      	mov	ip, r5
 80015be:	26a6      	movs	r6, #166	; 0xa6
 80015c0:	4663      	mov	r3, ip
 80015c2:	00f6      	lsls	r6, r6, #3
 80015c4:	4035      	ands	r5, r6
 80015c6:	4233      	tst	r3, r6
 80015c8:	d10b      	bne.n	80015e2 <__aeabi_dmul+0x146>
 80015ca:	2690      	movs	r6, #144	; 0x90
 80015cc:	00b6      	lsls	r6, r6, #2
 80015ce:	4233      	tst	r3, r6
 80015d0:	d118      	bne.n	8001604 <__aeabi_dmul+0x168>
 80015d2:	3eb9      	subs	r6, #185	; 0xb9
 80015d4:	3eff      	subs	r6, #255	; 0xff
 80015d6:	421e      	tst	r6, r3
 80015d8:	d01d      	beq.n	8001616 <__aeabi_dmul+0x17a>
 80015da:	46a3      	mov	fp, r4
 80015dc:	4682      	mov	sl, r0
 80015de:	9100      	str	r1, [sp, #0]
 80015e0:	e000      	b.n	80015e4 <__aeabi_dmul+0x148>
 80015e2:	0017      	movs	r7, r2
 80015e4:	9900      	ldr	r1, [sp, #0]
 80015e6:	003a      	movs	r2, r7
 80015e8:	2902      	cmp	r1, #2
 80015ea:	d010      	beq.n	800160e <__aeabi_dmul+0x172>
 80015ec:	465c      	mov	r4, fp
 80015ee:	4650      	mov	r0, sl
 80015f0:	2903      	cmp	r1, #3
 80015f2:	d1bf      	bne.n	8001574 <__aeabi_dmul+0xd8>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	031b      	lsls	r3, r3, #12
 80015f8:	431c      	orrs	r4, r3
 80015fa:	0324      	lsls	r4, r4, #12
 80015fc:	0005      	movs	r5, r0
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <__aeabi_dmul+0x360>)
 8001600:	0b24      	lsrs	r4, r4, #12
 8001602:	e7bd      	b.n	8001580 <__aeabi_dmul+0xe4>
 8001604:	2480      	movs	r4, #128	; 0x80
 8001606:	2200      	movs	r2, #0
 8001608:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <__aeabi_dmul+0x360>)
 800160a:	0324      	lsls	r4, r4, #12
 800160c:	e7b8      	b.n	8001580 <__aeabi_dmul+0xe4>
 800160e:	2400      	movs	r4, #0
 8001610:	2500      	movs	r5, #0
 8001612:	4b7a      	ldr	r3, [pc, #488]	; (80017fc <__aeabi_dmul+0x360>)
 8001614:	e7b4      	b.n	8001580 <__aeabi_dmul+0xe4>
 8001616:	4653      	mov	r3, sl
 8001618:	041e      	lsls	r6, r3, #16
 800161a:	0c36      	lsrs	r6, r6, #16
 800161c:	0c1f      	lsrs	r7, r3, #16
 800161e:	0033      	movs	r3, r6
 8001620:	0c01      	lsrs	r1, r0, #16
 8001622:	0400      	lsls	r0, r0, #16
 8001624:	0c00      	lsrs	r0, r0, #16
 8001626:	4343      	muls	r3, r0
 8001628:	4698      	mov	r8, r3
 800162a:	0003      	movs	r3, r0
 800162c:	437b      	muls	r3, r7
 800162e:	4699      	mov	r9, r3
 8001630:	0033      	movs	r3, r6
 8001632:	434b      	muls	r3, r1
 8001634:	469c      	mov	ip, r3
 8001636:	4643      	mov	r3, r8
 8001638:	000d      	movs	r5, r1
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	469a      	mov	sl, r3
 800163e:	437d      	muls	r5, r7
 8001640:	44cc      	add	ip, r9
 8001642:	44d4      	add	ip, sl
 8001644:	9500      	str	r5, [sp, #0]
 8001646:	45e1      	cmp	r9, ip
 8001648:	d904      	bls.n	8001654 <__aeabi_dmul+0x1b8>
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4699      	mov	r9, r3
 8001650:	444d      	add	r5, r9
 8001652:	9500      	str	r5, [sp, #0]
 8001654:	4663      	mov	r3, ip
 8001656:	0c1b      	lsrs	r3, r3, #16
 8001658:	001d      	movs	r5, r3
 800165a:	4663      	mov	r3, ip
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	469c      	mov	ip, r3
 8001660:	4643      	mov	r3, r8
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	4698      	mov	r8, r3
 8001668:	4663      	mov	r3, ip
 800166a:	4443      	add	r3, r8
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	0c23      	lsrs	r3, r4, #16
 8001670:	4698      	mov	r8, r3
 8001672:	0033      	movs	r3, r6
 8001674:	0424      	lsls	r4, r4, #16
 8001676:	0c24      	lsrs	r4, r4, #16
 8001678:	4363      	muls	r3, r4
 800167a:	469c      	mov	ip, r3
 800167c:	0023      	movs	r3, r4
 800167e:	437b      	muls	r3, r7
 8001680:	4699      	mov	r9, r3
 8001682:	4643      	mov	r3, r8
 8001684:	435e      	muls	r6, r3
 8001686:	435f      	muls	r7, r3
 8001688:	444e      	add	r6, r9
 800168a:	4663      	mov	r3, ip
 800168c:	46b2      	mov	sl, r6
 800168e:	0c1e      	lsrs	r6, r3, #16
 8001690:	4456      	add	r6, sl
 8001692:	45b1      	cmp	r9, r6
 8001694:	d903      	bls.n	800169e <__aeabi_dmul+0x202>
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4699      	mov	r9, r3
 800169c:	444f      	add	r7, r9
 800169e:	0c33      	lsrs	r3, r6, #16
 80016a0:	4699      	mov	r9, r3
 80016a2:	003b      	movs	r3, r7
 80016a4:	444b      	add	r3, r9
 80016a6:	9305      	str	r3, [sp, #20]
 80016a8:	4663      	mov	r3, ip
 80016aa:	46ac      	mov	ip, r5
 80016ac:	041f      	lsls	r7, r3, #16
 80016ae:	0c3f      	lsrs	r7, r7, #16
 80016b0:	0436      	lsls	r6, r6, #16
 80016b2:	19f6      	adds	r6, r6, r7
 80016b4:	44b4      	add	ip, r6
 80016b6:	4663      	mov	r3, ip
 80016b8:	9304      	str	r3, [sp, #16]
 80016ba:	465b      	mov	r3, fp
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	469c      	mov	ip, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	041f      	lsls	r7, r3, #16
 80016c4:	0c3f      	lsrs	r7, r7, #16
 80016c6:	003b      	movs	r3, r7
 80016c8:	4343      	muls	r3, r0
 80016ca:	4699      	mov	r9, r3
 80016cc:	4663      	mov	r3, ip
 80016ce:	4343      	muls	r3, r0
 80016d0:	469a      	mov	sl, r3
 80016d2:	464b      	mov	r3, r9
 80016d4:	4660      	mov	r0, ip
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	469b      	mov	fp, r3
 80016da:	4348      	muls	r0, r1
 80016dc:	4379      	muls	r1, r7
 80016de:	4451      	add	r1, sl
 80016e0:	4459      	add	r1, fp
 80016e2:	458a      	cmp	sl, r1
 80016e4:	d903      	bls.n	80016ee <__aeabi_dmul+0x252>
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	469a      	mov	sl, r3
 80016ec:	4450      	add	r0, sl
 80016ee:	0c0b      	lsrs	r3, r1, #16
 80016f0:	469a      	mov	sl, r3
 80016f2:	464b      	mov	r3, r9
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	0c1b      	lsrs	r3, r3, #16
 80016f8:	4699      	mov	r9, r3
 80016fa:	003b      	movs	r3, r7
 80016fc:	4363      	muls	r3, r4
 80016fe:	0409      	lsls	r1, r1, #16
 8001700:	4645      	mov	r5, r8
 8001702:	4449      	add	r1, r9
 8001704:	4699      	mov	r9, r3
 8001706:	4663      	mov	r3, ip
 8001708:	435c      	muls	r4, r3
 800170a:	436b      	muls	r3, r5
 800170c:	469c      	mov	ip, r3
 800170e:	464b      	mov	r3, r9
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	4698      	mov	r8, r3
 8001714:	436f      	muls	r7, r5
 8001716:	193f      	adds	r7, r7, r4
 8001718:	4447      	add	r7, r8
 800171a:	4450      	add	r0, sl
 800171c:	42bc      	cmp	r4, r7
 800171e:	d903      	bls.n	8001728 <__aeabi_dmul+0x28c>
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	4698      	mov	r8, r3
 8001726:	44c4      	add	ip, r8
 8001728:	9b04      	ldr	r3, [sp, #16]
 800172a:	9d00      	ldr	r5, [sp, #0]
 800172c:	4698      	mov	r8, r3
 800172e:	4445      	add	r5, r8
 8001730:	42b5      	cmp	r5, r6
 8001732:	41b6      	sbcs	r6, r6
 8001734:	4273      	negs	r3, r6
 8001736:	4698      	mov	r8, r3
 8001738:	464b      	mov	r3, r9
 800173a:	041e      	lsls	r6, r3, #16
 800173c:	9b05      	ldr	r3, [sp, #20]
 800173e:	043c      	lsls	r4, r7, #16
 8001740:	4699      	mov	r9, r3
 8001742:	0c36      	lsrs	r6, r6, #16
 8001744:	19a4      	adds	r4, r4, r6
 8001746:	444c      	add	r4, r9
 8001748:	46a1      	mov	r9, r4
 800174a:	4683      	mov	fp, r0
 800174c:	186e      	adds	r6, r5, r1
 800174e:	44c1      	add	r9, r8
 8001750:	428e      	cmp	r6, r1
 8001752:	4189      	sbcs	r1, r1
 8001754:	44cb      	add	fp, r9
 8001756:	465d      	mov	r5, fp
 8001758:	4249      	negs	r1, r1
 800175a:	186d      	adds	r5, r5, r1
 800175c:	429c      	cmp	r4, r3
 800175e:	41a4      	sbcs	r4, r4
 8001760:	45c1      	cmp	r9, r8
 8001762:	419b      	sbcs	r3, r3
 8001764:	4583      	cmp	fp, r0
 8001766:	4180      	sbcs	r0, r0
 8001768:	428d      	cmp	r5, r1
 800176a:	4189      	sbcs	r1, r1
 800176c:	425b      	negs	r3, r3
 800176e:	4264      	negs	r4, r4
 8001770:	431c      	orrs	r4, r3
 8001772:	4240      	negs	r0, r0
 8001774:	9b03      	ldr	r3, [sp, #12]
 8001776:	4249      	negs	r1, r1
 8001778:	4301      	orrs	r1, r0
 800177a:	0270      	lsls	r0, r6, #9
 800177c:	0c3f      	lsrs	r7, r7, #16
 800177e:	4318      	orrs	r0, r3
 8001780:	19e4      	adds	r4, r4, r7
 8001782:	1e47      	subs	r7, r0, #1
 8001784:	41b8      	sbcs	r0, r7
 8001786:	1864      	adds	r4, r4, r1
 8001788:	4464      	add	r4, ip
 800178a:	0df6      	lsrs	r6, r6, #23
 800178c:	0261      	lsls	r1, r4, #9
 800178e:	4330      	orrs	r0, r6
 8001790:	0dec      	lsrs	r4, r5, #23
 8001792:	026e      	lsls	r6, r5, #9
 8001794:	430c      	orrs	r4, r1
 8001796:	4330      	orrs	r0, r6
 8001798:	01c9      	lsls	r1, r1, #7
 800179a:	d400      	bmi.n	800179e <__aeabi_dmul+0x302>
 800179c:	e0f1      	b.n	8001982 <__aeabi_dmul+0x4e6>
 800179e:	2101      	movs	r1, #1
 80017a0:	0843      	lsrs	r3, r0, #1
 80017a2:	4001      	ands	r1, r0
 80017a4:	430b      	orrs	r3, r1
 80017a6:	07e0      	lsls	r0, r4, #31
 80017a8:	4318      	orrs	r0, r3
 80017aa:	0864      	lsrs	r4, r4, #1
 80017ac:	4915      	ldr	r1, [pc, #84]	; (8001804 <__aeabi_dmul+0x368>)
 80017ae:	9b02      	ldr	r3, [sp, #8]
 80017b0:	468c      	mov	ip, r1
 80017b2:	4463      	add	r3, ip
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dc00      	bgt.n	80017ba <__aeabi_dmul+0x31e>
 80017b8:	e097      	b.n	80018ea <__aeabi_dmul+0x44e>
 80017ba:	0741      	lsls	r1, r0, #29
 80017bc:	d009      	beq.n	80017d2 <__aeabi_dmul+0x336>
 80017be:	210f      	movs	r1, #15
 80017c0:	4001      	ands	r1, r0
 80017c2:	2904      	cmp	r1, #4
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x336>
 80017c6:	1d01      	adds	r1, r0, #4
 80017c8:	4281      	cmp	r1, r0
 80017ca:	4180      	sbcs	r0, r0
 80017cc:	4240      	negs	r0, r0
 80017ce:	1824      	adds	r4, r4, r0
 80017d0:	0008      	movs	r0, r1
 80017d2:	01e1      	lsls	r1, r4, #7
 80017d4:	d506      	bpl.n	80017e4 <__aeabi_dmul+0x348>
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	00c9      	lsls	r1, r1, #3
 80017da:	468c      	mov	ip, r1
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <__aeabi_dmul+0x36c>)
 80017de:	401c      	ands	r4, r3
 80017e0:	9b02      	ldr	r3, [sp, #8]
 80017e2:	4463      	add	r3, ip
 80017e4:	4909      	ldr	r1, [pc, #36]	; (800180c <__aeabi_dmul+0x370>)
 80017e6:	428b      	cmp	r3, r1
 80017e8:	dd00      	ble.n	80017ec <__aeabi_dmul+0x350>
 80017ea:	e710      	b.n	800160e <__aeabi_dmul+0x172>
 80017ec:	0761      	lsls	r1, r4, #29
 80017ee:	08c5      	lsrs	r5, r0, #3
 80017f0:	0264      	lsls	r4, r4, #9
 80017f2:	055b      	lsls	r3, r3, #21
 80017f4:	430d      	orrs	r5, r1
 80017f6:	0b24      	lsrs	r4, r4, #12
 80017f8:	0d5b      	lsrs	r3, r3, #21
 80017fa:	e6c1      	b.n	8001580 <__aeabi_dmul+0xe4>
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	fffffc01 	.word	0xfffffc01
 8001804:	000003ff 	.word	0x000003ff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	464b      	mov	r3, r9
 8001812:	4323      	orrs	r3, r4
 8001814:	d059      	beq.n	80018ca <__aeabi_dmul+0x42e>
 8001816:	2c00      	cmp	r4, #0
 8001818:	d100      	bne.n	800181c <__aeabi_dmul+0x380>
 800181a:	e0a3      	b.n	8001964 <__aeabi_dmul+0x4c8>
 800181c:	0020      	movs	r0, r4
 800181e:	f000 fd1d 	bl	800225c <__clzsi2>
 8001822:	0001      	movs	r1, r0
 8001824:	0003      	movs	r3, r0
 8001826:	390b      	subs	r1, #11
 8001828:	221d      	movs	r2, #29
 800182a:	1a52      	subs	r2, r2, r1
 800182c:	4649      	mov	r1, r9
 800182e:	0018      	movs	r0, r3
 8001830:	40d1      	lsrs	r1, r2
 8001832:	464a      	mov	r2, r9
 8001834:	3808      	subs	r0, #8
 8001836:	4082      	lsls	r2, r0
 8001838:	4084      	lsls	r4, r0
 800183a:	0010      	movs	r0, r2
 800183c:	430c      	orrs	r4, r1
 800183e:	4a74      	ldr	r2, [pc, #464]	; (8001a10 <__aeabi_dmul+0x574>)
 8001840:	1aeb      	subs	r3, r5, r3
 8001842:	4694      	mov	ip, r2
 8001844:	4642      	mov	r2, r8
 8001846:	4463      	add	r3, ip
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	9b01      	ldr	r3, [sp, #4]
 800184c:	407a      	eors	r2, r7
 800184e:	3301      	adds	r3, #1
 8001850:	2100      	movs	r1, #0
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2e0a      	cmp	r6, #10
 8001858:	dd00      	ble.n	800185c <__aeabi_dmul+0x3c0>
 800185a:	e667      	b.n	800152c <__aeabi_dmul+0x90>
 800185c:	e683      	b.n	8001566 <__aeabi_dmul+0xca>
 800185e:	465b      	mov	r3, fp
 8001860:	4303      	orrs	r3, r0
 8001862:	469a      	mov	sl, r3
 8001864:	d02a      	beq.n	80018bc <__aeabi_dmul+0x420>
 8001866:	465b      	mov	r3, fp
 8001868:	2b00      	cmp	r3, #0
 800186a:	d06d      	beq.n	8001948 <__aeabi_dmul+0x4ac>
 800186c:	4658      	mov	r0, fp
 800186e:	f000 fcf5 	bl	800225c <__clzsi2>
 8001872:	0001      	movs	r1, r0
 8001874:	0003      	movs	r3, r0
 8001876:	390b      	subs	r1, #11
 8001878:	221d      	movs	r2, #29
 800187a:	1a52      	subs	r2, r2, r1
 800187c:	0021      	movs	r1, r4
 800187e:	0018      	movs	r0, r3
 8001880:	465d      	mov	r5, fp
 8001882:	40d1      	lsrs	r1, r2
 8001884:	3808      	subs	r0, #8
 8001886:	4085      	lsls	r5, r0
 8001888:	000a      	movs	r2, r1
 800188a:	4084      	lsls	r4, r0
 800188c:	432a      	orrs	r2, r5
 800188e:	4693      	mov	fp, r2
 8001890:	46a2      	mov	sl, r4
 8001892:	4d5f      	ldr	r5, [pc, #380]	; (8001a10 <__aeabi_dmul+0x574>)
 8001894:	2600      	movs	r6, #0
 8001896:	1aed      	subs	r5, r5, r3
 8001898:	2300      	movs	r3, #0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	e625      	b.n	80014ea <__aeabi_dmul+0x4e>
 800189e:	465b      	mov	r3, fp
 80018a0:	4303      	orrs	r3, r0
 80018a2:	469a      	mov	sl, r3
 80018a4:	d105      	bne.n	80018b2 <__aeabi_dmul+0x416>
 80018a6:	2300      	movs	r3, #0
 80018a8:	469b      	mov	fp, r3
 80018aa:	3302      	adds	r3, #2
 80018ac:	2608      	movs	r6, #8
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	e61b      	b.n	80014ea <__aeabi_dmul+0x4e>
 80018b2:	2303      	movs	r3, #3
 80018b4:	4682      	mov	sl, r0
 80018b6:	260c      	movs	r6, #12
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	e616      	b.n	80014ea <__aeabi_dmul+0x4e>
 80018bc:	2300      	movs	r3, #0
 80018be:	469b      	mov	fp, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	2604      	movs	r6, #4
 80018c4:	2500      	movs	r5, #0
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	e60f      	b.n	80014ea <__aeabi_dmul+0x4e>
 80018ca:	4642      	mov	r2, r8
 80018cc:	3301      	adds	r3, #1
 80018ce:	9501      	str	r5, [sp, #4]
 80018d0:	431e      	orrs	r6, r3
 80018d2:	9b01      	ldr	r3, [sp, #4]
 80018d4:	407a      	eors	r2, r7
 80018d6:	3301      	adds	r3, #1
 80018d8:	2400      	movs	r4, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2e0a      	cmp	r6, #10
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dmul+0x44c>
 80018e6:	e621      	b.n	800152c <__aeabi_dmul+0x90>
 80018e8:	e63d      	b.n	8001566 <__aeabi_dmul+0xca>
 80018ea:	2101      	movs	r1, #1
 80018ec:	1ac9      	subs	r1, r1, r3
 80018ee:	2938      	cmp	r1, #56	; 0x38
 80018f0:	dd00      	ble.n	80018f4 <__aeabi_dmul+0x458>
 80018f2:	e642      	b.n	800157a <__aeabi_dmul+0xde>
 80018f4:	291f      	cmp	r1, #31
 80018f6:	dd47      	ble.n	8001988 <__aeabi_dmul+0x4ec>
 80018f8:	261f      	movs	r6, #31
 80018fa:	0025      	movs	r5, r4
 80018fc:	4276      	negs	r6, r6
 80018fe:	1af3      	subs	r3, r6, r3
 8001900:	40dd      	lsrs	r5, r3
 8001902:	002b      	movs	r3, r5
 8001904:	2920      	cmp	r1, #32
 8001906:	d005      	beq.n	8001914 <__aeabi_dmul+0x478>
 8001908:	4942      	ldr	r1, [pc, #264]	; (8001a14 <__aeabi_dmul+0x578>)
 800190a:	9d02      	ldr	r5, [sp, #8]
 800190c:	468c      	mov	ip, r1
 800190e:	4465      	add	r5, ip
 8001910:	40ac      	lsls	r4, r5
 8001912:	4320      	orrs	r0, r4
 8001914:	1e41      	subs	r1, r0, #1
 8001916:	4188      	sbcs	r0, r1
 8001918:	4318      	orrs	r0, r3
 800191a:	2307      	movs	r3, #7
 800191c:	001d      	movs	r5, r3
 800191e:	2400      	movs	r4, #0
 8001920:	4005      	ands	r5, r0
 8001922:	4203      	tst	r3, r0
 8001924:	d04a      	beq.n	80019bc <__aeabi_dmul+0x520>
 8001926:	230f      	movs	r3, #15
 8001928:	2400      	movs	r4, #0
 800192a:	4003      	ands	r3, r0
 800192c:	2b04      	cmp	r3, #4
 800192e:	d042      	beq.n	80019b6 <__aeabi_dmul+0x51a>
 8001930:	1d03      	adds	r3, r0, #4
 8001932:	4283      	cmp	r3, r0
 8001934:	4180      	sbcs	r0, r0
 8001936:	4240      	negs	r0, r0
 8001938:	1824      	adds	r4, r4, r0
 800193a:	0018      	movs	r0, r3
 800193c:	0223      	lsls	r3, r4, #8
 800193e:	d53a      	bpl.n	80019b6 <__aeabi_dmul+0x51a>
 8001940:	2301      	movs	r3, #1
 8001942:	2400      	movs	r4, #0
 8001944:	2500      	movs	r5, #0
 8001946:	e61b      	b.n	8001580 <__aeabi_dmul+0xe4>
 8001948:	f000 fc88 	bl	800225c <__clzsi2>
 800194c:	0001      	movs	r1, r0
 800194e:	0003      	movs	r3, r0
 8001950:	3115      	adds	r1, #21
 8001952:	3320      	adds	r3, #32
 8001954:	291c      	cmp	r1, #28
 8001956:	dd8f      	ble.n	8001878 <__aeabi_dmul+0x3dc>
 8001958:	3808      	subs	r0, #8
 800195a:	2200      	movs	r2, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	4692      	mov	sl, r2
 8001960:	46a3      	mov	fp, r4
 8001962:	e796      	b.n	8001892 <__aeabi_dmul+0x3f6>
 8001964:	f000 fc7a 	bl	800225c <__clzsi2>
 8001968:	0001      	movs	r1, r0
 800196a:	0003      	movs	r3, r0
 800196c:	3115      	adds	r1, #21
 800196e:	3320      	adds	r3, #32
 8001970:	291c      	cmp	r1, #28
 8001972:	dc00      	bgt.n	8001976 <__aeabi_dmul+0x4da>
 8001974:	e758      	b.n	8001828 <__aeabi_dmul+0x38c>
 8001976:	0002      	movs	r2, r0
 8001978:	464c      	mov	r4, r9
 800197a:	3a08      	subs	r2, #8
 800197c:	2000      	movs	r0, #0
 800197e:	4094      	lsls	r4, r2
 8001980:	e75d      	b.n	800183e <__aeabi_dmul+0x3a2>
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	e711      	b.n	80017ac <__aeabi_dmul+0x310>
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <__aeabi_dmul+0x57c>)
 800198a:	0026      	movs	r6, r4
 800198c:	469c      	mov	ip, r3
 800198e:	0003      	movs	r3, r0
 8001990:	9d02      	ldr	r5, [sp, #8]
 8001992:	40cb      	lsrs	r3, r1
 8001994:	4465      	add	r5, ip
 8001996:	40ae      	lsls	r6, r5
 8001998:	431e      	orrs	r6, r3
 800199a:	0003      	movs	r3, r0
 800199c:	40ab      	lsls	r3, r5
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	4183      	sbcs	r3, r0
 80019a2:	0030      	movs	r0, r6
 80019a4:	4318      	orrs	r0, r3
 80019a6:	40cc      	lsrs	r4, r1
 80019a8:	0743      	lsls	r3, r0, #29
 80019aa:	d0c7      	beq.n	800193c <__aeabi_dmul+0x4a0>
 80019ac:	230f      	movs	r3, #15
 80019ae:	4003      	ands	r3, r0
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d1bd      	bne.n	8001930 <__aeabi_dmul+0x494>
 80019b4:	e7c2      	b.n	800193c <__aeabi_dmul+0x4a0>
 80019b6:	0765      	lsls	r5, r4, #29
 80019b8:	0264      	lsls	r4, r4, #9
 80019ba:	0b24      	lsrs	r4, r4, #12
 80019bc:	08c0      	lsrs	r0, r0, #3
 80019be:	2300      	movs	r3, #0
 80019c0:	4305      	orrs	r5, r0
 80019c2:	e5dd      	b.n	8001580 <__aeabi_dmul+0xe4>
 80019c4:	2500      	movs	r5, #0
 80019c6:	2302      	movs	r3, #2
 80019c8:	2e0f      	cmp	r6, #15
 80019ca:	d10c      	bne.n	80019e6 <__aeabi_dmul+0x54a>
 80019cc:	2480      	movs	r4, #128	; 0x80
 80019ce:	465b      	mov	r3, fp
 80019d0:	0324      	lsls	r4, r4, #12
 80019d2:	4223      	tst	r3, r4
 80019d4:	d00e      	beq.n	80019f4 <__aeabi_dmul+0x558>
 80019d6:	4221      	tst	r1, r4
 80019d8:	d10c      	bne.n	80019f4 <__aeabi_dmul+0x558>
 80019da:	430c      	orrs	r4, r1
 80019dc:	0324      	lsls	r4, r4, #12
 80019de:	003a      	movs	r2, r7
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <__aeabi_dmul+0x580>)
 80019e2:	0b24      	lsrs	r4, r4, #12
 80019e4:	e5cc      	b.n	8001580 <__aeabi_dmul+0xe4>
 80019e6:	2e0b      	cmp	r6, #11
 80019e8:	d000      	beq.n	80019ec <__aeabi_dmul+0x550>
 80019ea:	e5a2      	b.n	8001532 <__aeabi_dmul+0x96>
 80019ec:	468b      	mov	fp, r1
 80019ee:	46aa      	mov	sl, r5
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	e5f7      	b.n	80015e4 <__aeabi_dmul+0x148>
 80019f4:	2480      	movs	r4, #128	; 0x80
 80019f6:	465b      	mov	r3, fp
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	431c      	orrs	r4, r3
 80019fc:	0324      	lsls	r4, r4, #12
 80019fe:	4642      	mov	r2, r8
 8001a00:	4655      	mov	r5, sl
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <__aeabi_dmul+0x580>)
 8001a04:	0b24      	lsrs	r4, r4, #12
 8001a06:	e5bb      	b.n	8001580 <__aeabi_dmul+0xe4>
 8001a08:	464d      	mov	r5, r9
 8001a0a:	0021      	movs	r1, r4
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e7db      	b.n	80019c8 <__aeabi_dmul+0x52c>
 8001a10:	fffffc0d 	.word	0xfffffc0d
 8001a14:	0000043e 	.word	0x0000043e
 8001a18:	0000041e 	.word	0x0000041e
 8001a1c:	000007ff 	.word	0x000007ff

08001a20 <__aeabi_dsub>:
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	4657      	mov	r7, sl
 8001a24:	464e      	mov	r6, r9
 8001a26:	4645      	mov	r5, r8
 8001a28:	46de      	mov	lr, fp
 8001a2a:	b5e0      	push	{r5, r6, r7, lr}
 8001a2c:	000d      	movs	r5, r1
 8001a2e:	0004      	movs	r4, r0
 8001a30:	0019      	movs	r1, r3
 8001a32:	0010      	movs	r0, r2
 8001a34:	032b      	lsls	r3, r5, #12
 8001a36:	0a5b      	lsrs	r3, r3, #9
 8001a38:	0f62      	lsrs	r2, r4, #29
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	00e3      	lsls	r3, r4, #3
 8001a3e:	030c      	lsls	r4, r1, #12
 8001a40:	0a64      	lsrs	r4, r4, #9
 8001a42:	0f47      	lsrs	r7, r0, #29
 8001a44:	4327      	orrs	r7, r4
 8001a46:	4cd0      	ldr	r4, [pc, #832]	; (8001d88 <__aeabi_dsub+0x368>)
 8001a48:	006e      	lsls	r6, r5, #1
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	004a      	lsls	r2, r1, #1
 8001a50:	00c0      	lsls	r0, r0, #3
 8001a52:	4698      	mov	r8, r3
 8001a54:	46a2      	mov	sl, r4
 8001a56:	0d76      	lsrs	r6, r6, #21
 8001a58:	0fed      	lsrs	r5, r5, #31
 8001a5a:	0d52      	lsrs	r2, r2, #21
 8001a5c:	0fc9      	lsrs	r1, r1, #31
 8001a5e:	9001      	str	r0, [sp, #4]
 8001a60:	42a2      	cmp	r2, r4
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x46>
 8001a64:	e0b9      	b.n	8001bda <__aeabi_dsub+0x1ba>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4061      	eors	r1, r4
 8001a6a:	468b      	mov	fp, r1
 8001a6c:	428d      	cmp	r5, r1
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x52>
 8001a70:	e08d      	b.n	8001b8e <__aeabi_dsub+0x16e>
 8001a72:	1ab4      	subs	r4, r6, r2
 8001a74:	46a4      	mov	ip, r4
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	dc00      	bgt.n	8001a7c <__aeabi_dsub+0x5c>
 8001a7a:	e0b7      	b.n	8001bec <__aeabi_dsub+0x1cc>
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	d100      	bne.n	8001a82 <__aeabi_dsub+0x62>
 8001a80:	e0cb      	b.n	8001c1a <__aeabi_dsub+0x1fa>
 8001a82:	4ac1      	ldr	r2, [pc, #772]	; (8001d88 <__aeabi_dsub+0x368>)
 8001a84:	4296      	cmp	r6, r2
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x6a>
 8001a88:	e186      	b.n	8001d98 <__aeabi_dsub+0x378>
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	4317      	orrs	r7, r2
 8001a90:	4662      	mov	r2, ip
 8001a92:	2a38      	cmp	r2, #56	; 0x38
 8001a94:	dd00      	ble.n	8001a98 <__aeabi_dsub+0x78>
 8001a96:	e1a4      	b.n	8001de2 <__aeabi_dsub+0x3c2>
 8001a98:	2a1f      	cmp	r2, #31
 8001a9a:	dd00      	ble.n	8001a9e <__aeabi_dsub+0x7e>
 8001a9c:	e21d      	b.n	8001eda <__aeabi_dsub+0x4ba>
 8001a9e:	4661      	mov	r1, ip
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	003c      	movs	r4, r7
 8001aa4:	1a52      	subs	r2, r2, r1
 8001aa6:	0001      	movs	r1, r0
 8001aa8:	4090      	lsls	r0, r2
 8001aaa:	4094      	lsls	r4, r2
 8001aac:	1e42      	subs	r2, r0, #1
 8001aae:	4190      	sbcs	r0, r2
 8001ab0:	4662      	mov	r2, ip
 8001ab2:	46a0      	mov	r8, r4
 8001ab4:	4664      	mov	r4, ip
 8001ab6:	40d7      	lsrs	r7, r2
 8001ab8:	464a      	mov	r2, r9
 8001aba:	40e1      	lsrs	r1, r4
 8001abc:	4644      	mov	r4, r8
 8001abe:	1bd2      	subs	r2, r2, r7
 8001ac0:	4691      	mov	r9, r2
 8001ac2:	430c      	orrs	r4, r1
 8001ac4:	4304      	orrs	r4, r0
 8001ac6:	1b1c      	subs	r4, r3, r4
 8001ac8:	42a3      	cmp	r3, r4
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	464b      	mov	r3, r9
 8001ace:	4252      	negs	r2, r2
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	469a      	mov	sl, r3
 8001ad4:	4653      	mov	r3, sl
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	d400      	bmi.n	8001adc <__aeabi_dsub+0xbc>
 8001ada:	e12b      	b.n	8001d34 <__aeabi_dsub+0x314>
 8001adc:	4653      	mov	r3, sl
 8001ade:	025a      	lsls	r2, r3, #9
 8001ae0:	0a53      	lsrs	r3, r2, #9
 8001ae2:	469a      	mov	sl, r3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0xcc>
 8001aea:	e166      	b.n	8001dba <__aeabi_dsub+0x39a>
 8001aec:	4650      	mov	r0, sl
 8001aee:	f000 fbb5 	bl	800225c <__clzsi2>
 8001af2:	0003      	movs	r3, r0
 8001af4:	3b08      	subs	r3, #8
 8001af6:	2220      	movs	r2, #32
 8001af8:	0020      	movs	r0, r4
 8001afa:	1ad2      	subs	r2, r2, r3
 8001afc:	4651      	mov	r1, sl
 8001afe:	40d0      	lsrs	r0, r2
 8001b00:	4099      	lsls	r1, r3
 8001b02:	0002      	movs	r2, r0
 8001b04:	409c      	lsls	r4, r3
 8001b06:	430a      	orrs	r2, r1
 8001b08:	429e      	cmp	r6, r3
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dsub+0xee>
 8001b0c:	e164      	b.n	8001dd8 <__aeabi_dsub+0x3b8>
 8001b0e:	1b9b      	subs	r3, r3, r6
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	291f      	cmp	r1, #31
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0xf8>
 8001b16:	e0fe      	b.n	8001d16 <__aeabi_dsub+0x2f6>
 8001b18:	2320      	movs	r3, #32
 8001b1a:	0010      	movs	r0, r2
 8001b1c:	0026      	movs	r6, r4
 8001b1e:	1a5b      	subs	r3, r3, r1
 8001b20:	409c      	lsls	r4, r3
 8001b22:	4098      	lsls	r0, r3
 8001b24:	40ce      	lsrs	r6, r1
 8001b26:	40ca      	lsrs	r2, r1
 8001b28:	1e63      	subs	r3, r4, #1
 8001b2a:	419c      	sbcs	r4, r3
 8001b2c:	4330      	orrs	r0, r6
 8001b2e:	4692      	mov	sl, r2
 8001b30:	2600      	movs	r6, #0
 8001b32:	4304      	orrs	r4, r0
 8001b34:	0763      	lsls	r3, r4, #29
 8001b36:	d009      	beq.n	8001b4c <__aeabi_dsub+0x12c>
 8001b38:	230f      	movs	r3, #15
 8001b3a:	4023      	ands	r3, r4
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dsub+0x12c>
 8001b40:	1d23      	adds	r3, r4, #4
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	41a4      	sbcs	r4, r4
 8001b46:	4264      	negs	r4, r4
 8001b48:	44a2      	add	sl, r4
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	4653      	mov	r3, sl
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	d400      	bmi.n	8001b54 <__aeabi_dsub+0x134>
 8001b52:	e0f2      	b.n	8001d3a <__aeabi_dsub+0x31a>
 8001b54:	4b8c      	ldr	r3, [pc, #560]	; (8001d88 <__aeabi_dsub+0x368>)
 8001b56:	3601      	adds	r6, #1
 8001b58:	429e      	cmp	r6, r3
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dsub+0x13e>
 8001b5c:	e10f      	b.n	8001d7e <__aeabi_dsub+0x35e>
 8001b5e:	4653      	mov	r3, sl
 8001b60:	498a      	ldr	r1, [pc, #552]	; (8001d8c <__aeabi_dsub+0x36c>)
 8001b62:	08e4      	lsrs	r4, r4, #3
 8001b64:	400b      	ands	r3, r1
 8001b66:	0019      	movs	r1, r3
 8001b68:	075b      	lsls	r3, r3, #29
 8001b6a:	4323      	orrs	r3, r4
 8001b6c:	0572      	lsls	r2, r6, #21
 8001b6e:	024c      	lsls	r4, r1, #9
 8001b70:	0b24      	lsrs	r4, r4, #12
 8001b72:	0d52      	lsrs	r2, r2, #21
 8001b74:	0512      	lsls	r2, r2, #20
 8001b76:	4322      	orrs	r2, r4
 8001b78:	07ed      	lsls	r5, r5, #31
 8001b7a:	432a      	orrs	r2, r5
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	0011      	movs	r1, r2
 8001b80:	b003      	add	sp, #12
 8001b82:	bcf0      	pop	{r4, r5, r6, r7}
 8001b84:	46bb      	mov	fp, r7
 8001b86:	46b2      	mov	sl, r6
 8001b88:	46a9      	mov	r9, r5
 8001b8a:	46a0      	mov	r8, r4
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	1ab4      	subs	r4, r6, r2
 8001b90:	46a4      	mov	ip, r4
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	dd59      	ble.n	8001c4a <__aeabi_dsub+0x22a>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x17c>
 8001b9a:	e0b0      	b.n	8001cfe <__aeabi_dsub+0x2de>
 8001b9c:	4556      	cmp	r6, sl
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x182>
 8001ba0:	e0fa      	b.n	8001d98 <__aeabi_dsub+0x378>
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	4317      	orrs	r7, r2
 8001ba8:	4662      	mov	r2, ip
 8001baa:	2a38      	cmp	r2, #56	; 0x38
 8001bac:	dd00      	ble.n	8001bb0 <__aeabi_dsub+0x190>
 8001bae:	e0d4      	b.n	8001d5a <__aeabi_dsub+0x33a>
 8001bb0:	2a1f      	cmp	r2, #31
 8001bb2:	dc00      	bgt.n	8001bb6 <__aeabi_dsub+0x196>
 8001bb4:	e1c0      	b.n	8001f38 <__aeabi_dsub+0x518>
 8001bb6:	0039      	movs	r1, r7
 8001bb8:	3a20      	subs	r2, #32
 8001bba:	40d1      	lsrs	r1, r2
 8001bbc:	4662      	mov	r2, ip
 8001bbe:	2a20      	cmp	r2, #32
 8001bc0:	d006      	beq.n	8001bd0 <__aeabi_dsub+0x1b0>
 8001bc2:	4664      	mov	r4, ip
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	1b12      	subs	r2, r2, r4
 8001bc8:	003c      	movs	r4, r7
 8001bca:	4094      	lsls	r4, r2
 8001bcc:	4304      	orrs	r4, r0
 8001bce:	9401      	str	r4, [sp, #4]
 8001bd0:	9c01      	ldr	r4, [sp, #4]
 8001bd2:	1e62      	subs	r2, r4, #1
 8001bd4:	4194      	sbcs	r4, r2
 8001bd6:	430c      	orrs	r4, r1
 8001bd8:	e0c3      	b.n	8001d62 <__aeabi_dsub+0x342>
 8001bda:	003c      	movs	r4, r7
 8001bdc:	4304      	orrs	r4, r0
 8001bde:	d02b      	beq.n	8001c38 <__aeabi_dsub+0x218>
 8001be0:	468b      	mov	fp, r1
 8001be2:	428d      	cmp	r5, r1
 8001be4:	d02e      	beq.n	8001c44 <__aeabi_dsub+0x224>
 8001be6:	4c6a      	ldr	r4, [pc, #424]	; (8001d90 <__aeabi_dsub+0x370>)
 8001be8:	46a4      	mov	ip, r4
 8001bea:	44b4      	add	ip, r6
 8001bec:	4664      	mov	r4, ip
 8001bee:	2c00      	cmp	r4, #0
 8001bf0:	d05f      	beq.n	8001cb2 <__aeabi_dsub+0x292>
 8001bf2:	1b94      	subs	r4, r2, r6
 8001bf4:	46a4      	mov	ip, r4
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x1dc>
 8001bfa:	e120      	b.n	8001e3e <__aeabi_dsub+0x41e>
 8001bfc:	464c      	mov	r4, r9
 8001bfe:	431c      	orrs	r4, r3
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x1e4>
 8001c02:	e1c7      	b.n	8001f94 <__aeabi_dsub+0x574>
 8001c04:	4661      	mov	r1, ip
 8001c06:	1e4c      	subs	r4, r1, #1
 8001c08:	2901      	cmp	r1, #1
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dsub+0x1ee>
 8001c0c:	e223      	b.n	8002056 <__aeabi_dsub+0x636>
 8001c0e:	4d5e      	ldr	r5, [pc, #376]	; (8001d88 <__aeabi_dsub+0x368>)
 8001c10:	45ac      	cmp	ip, r5
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x1f6>
 8001c14:	e1d8      	b.n	8001fc8 <__aeabi_dsub+0x5a8>
 8001c16:	46a4      	mov	ip, r4
 8001c18:	e11a      	b.n	8001e50 <__aeabi_dsub+0x430>
 8001c1a:	003a      	movs	r2, r7
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x202>
 8001c20:	e0e4      	b.n	8001dec <__aeabi_dsub+0x3cc>
 8001c22:	0022      	movs	r2, r4
 8001c24:	3a01      	subs	r2, #1
 8001c26:	2c01      	cmp	r4, #1
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x20c>
 8001c2a:	e1c3      	b.n	8001fb4 <__aeabi_dsub+0x594>
 8001c2c:	4956      	ldr	r1, [pc, #344]	; (8001d88 <__aeabi_dsub+0x368>)
 8001c2e:	428c      	cmp	r4, r1
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x214>
 8001c32:	e0b1      	b.n	8001d98 <__aeabi_dsub+0x378>
 8001c34:	4694      	mov	ip, r2
 8001c36:	e72b      	b.n	8001a90 <__aeabi_dsub+0x70>
 8001c38:	2401      	movs	r4, #1
 8001c3a:	4061      	eors	r1, r4
 8001c3c:	468b      	mov	fp, r1
 8001c3e:	428d      	cmp	r5, r1
 8001c40:	d000      	beq.n	8001c44 <__aeabi_dsub+0x224>
 8001c42:	e716      	b.n	8001a72 <__aeabi_dsub+0x52>
 8001c44:	4952      	ldr	r1, [pc, #328]	; (8001d90 <__aeabi_dsub+0x370>)
 8001c46:	468c      	mov	ip, r1
 8001c48:	44b4      	add	ip, r6
 8001c4a:	4664      	mov	r4, ip
 8001c4c:	2c00      	cmp	r4, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x232>
 8001c50:	e0d3      	b.n	8001dfa <__aeabi_dsub+0x3da>
 8001c52:	1b91      	subs	r1, r2, r6
 8001c54:	468c      	mov	ip, r1
 8001c56:	2e00      	cmp	r6, #0
 8001c58:	d100      	bne.n	8001c5c <__aeabi_dsub+0x23c>
 8001c5a:	e15e      	b.n	8001f1a <__aeabi_dsub+0x4fa>
 8001c5c:	494a      	ldr	r1, [pc, #296]	; (8001d88 <__aeabi_dsub+0x368>)
 8001c5e:	428a      	cmp	r2, r1
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x244>
 8001c62:	e1be      	b.n	8001fe2 <__aeabi_dsub+0x5c2>
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	464c      	mov	r4, r9
 8001c68:	0409      	lsls	r1, r1, #16
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	46a1      	mov	r9, r4
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2938      	cmp	r1, #56	; 0x38
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dsub+0x256>
 8001c74:	e1ba      	b.n	8001fec <__aeabi_dsub+0x5cc>
 8001c76:	291f      	cmp	r1, #31
 8001c78:	dd00      	ble.n	8001c7c <__aeabi_dsub+0x25c>
 8001c7a:	e227      	b.n	80020cc <__aeabi_dsub+0x6ac>
 8001c7c:	2420      	movs	r4, #32
 8001c7e:	1a64      	subs	r4, r4, r1
 8001c80:	4649      	mov	r1, r9
 8001c82:	40a1      	lsls	r1, r4
 8001c84:	001e      	movs	r6, r3
 8001c86:	4688      	mov	r8, r1
 8001c88:	4661      	mov	r1, ip
 8001c8a:	40a3      	lsls	r3, r4
 8001c8c:	40ce      	lsrs	r6, r1
 8001c8e:	4641      	mov	r1, r8
 8001c90:	1e5c      	subs	r4, r3, #1
 8001c92:	41a3      	sbcs	r3, r4
 8001c94:	4331      	orrs	r1, r6
 8001c96:	4319      	orrs	r1, r3
 8001c98:	000c      	movs	r4, r1
 8001c9a:	4663      	mov	r3, ip
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	40d9      	lsrs	r1, r3
 8001ca0:	187f      	adds	r7, r7, r1
 8001ca2:	1824      	adds	r4, r4, r0
 8001ca4:	4284      	cmp	r4, r0
 8001ca6:	419b      	sbcs	r3, r3
 8001ca8:	425b      	negs	r3, r3
 8001caa:	469a      	mov	sl, r3
 8001cac:	0016      	movs	r6, r2
 8001cae:	44ba      	add	sl, r7
 8001cb0:	e05d      	b.n	8001d6e <__aeabi_dsub+0x34e>
 8001cb2:	4c38      	ldr	r4, [pc, #224]	; (8001d94 <__aeabi_dsub+0x374>)
 8001cb4:	1c72      	adds	r2, r6, #1
 8001cb6:	4222      	tst	r2, r4
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x29c>
 8001cba:	e0df      	b.n	8001e7c <__aeabi_dsub+0x45c>
 8001cbc:	464a      	mov	r2, r9
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	2e00      	cmp	r6, #0
 8001cc2:	d000      	beq.n	8001cc6 <__aeabi_dsub+0x2a6>
 8001cc4:	e15c      	b.n	8001f80 <__aeabi_dsub+0x560>
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d100      	bne.n	8001ccc <__aeabi_dsub+0x2ac>
 8001cca:	e1cf      	b.n	800206c <__aeabi_dsub+0x64c>
 8001ccc:	003a      	movs	r2, r7
 8001cce:	4302      	orrs	r2, r0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x2b4>
 8001cd2:	e17f      	b.n	8001fd4 <__aeabi_dsub+0x5b4>
 8001cd4:	1a1c      	subs	r4, r3, r0
 8001cd6:	464a      	mov	r2, r9
 8001cd8:	42a3      	cmp	r3, r4
 8001cda:	4189      	sbcs	r1, r1
 8001cdc:	1bd2      	subs	r2, r2, r7
 8001cde:	4249      	negs	r1, r1
 8001ce0:	1a52      	subs	r2, r2, r1
 8001ce2:	4692      	mov	sl, r2
 8001ce4:	0212      	lsls	r2, r2, #8
 8001ce6:	d400      	bmi.n	8001cea <__aeabi_dsub+0x2ca>
 8001ce8:	e20a      	b.n	8002100 <__aeabi_dsub+0x6e0>
 8001cea:	1ac4      	subs	r4, r0, r3
 8001cec:	42a0      	cmp	r0, r4
 8001cee:	4180      	sbcs	r0, r0
 8001cf0:	464b      	mov	r3, r9
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1aff      	subs	r7, r7, r3
 8001cf6:	1a3b      	subs	r3, r7, r0
 8001cf8:	469a      	mov	sl, r3
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	e71a      	b.n	8001b34 <__aeabi_dsub+0x114>
 8001cfe:	003a      	movs	r2, r7
 8001d00:	4302      	orrs	r2, r0
 8001d02:	d073      	beq.n	8001dec <__aeabi_dsub+0x3cc>
 8001d04:	0022      	movs	r2, r4
 8001d06:	3a01      	subs	r2, #1
 8001d08:	2c01      	cmp	r4, #1
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x2ee>
 8001d0c:	e0cb      	b.n	8001ea6 <__aeabi_dsub+0x486>
 8001d0e:	4554      	cmp	r4, sl
 8001d10:	d042      	beq.n	8001d98 <__aeabi_dsub+0x378>
 8001d12:	4694      	mov	ip, r2
 8001d14:	e748      	b.n	8001ba8 <__aeabi_dsub+0x188>
 8001d16:	0010      	movs	r0, r2
 8001d18:	3b1f      	subs	r3, #31
 8001d1a:	40d8      	lsrs	r0, r3
 8001d1c:	2920      	cmp	r1, #32
 8001d1e:	d003      	beq.n	8001d28 <__aeabi_dsub+0x308>
 8001d20:	2340      	movs	r3, #64	; 0x40
 8001d22:	1a5b      	subs	r3, r3, r1
 8001d24:	409a      	lsls	r2, r3
 8001d26:	4314      	orrs	r4, r2
 8001d28:	1e63      	subs	r3, r4, #1
 8001d2a:	419c      	sbcs	r4, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2600      	movs	r6, #0
 8001d30:	469a      	mov	sl, r3
 8001d32:	4304      	orrs	r4, r0
 8001d34:	0763      	lsls	r3, r4, #29
 8001d36:	d000      	beq.n	8001d3a <__aeabi_dsub+0x31a>
 8001d38:	e6fe      	b.n	8001b38 <__aeabi_dsub+0x118>
 8001d3a:	4652      	mov	r2, sl
 8001d3c:	08e3      	lsrs	r3, r4, #3
 8001d3e:	0752      	lsls	r2, r2, #29
 8001d40:	4313      	orrs	r3, r2
 8001d42:	4652      	mov	r2, sl
 8001d44:	46b4      	mov	ip, r6
 8001d46:	08d2      	lsrs	r2, r2, #3
 8001d48:	490f      	ldr	r1, [pc, #60]	; (8001d88 <__aeabi_dsub+0x368>)
 8001d4a:	458c      	cmp	ip, r1
 8001d4c:	d02a      	beq.n	8001da4 <__aeabi_dsub+0x384>
 8001d4e:	0312      	lsls	r2, r2, #12
 8001d50:	0b14      	lsrs	r4, r2, #12
 8001d52:	4662      	mov	r2, ip
 8001d54:	0552      	lsls	r2, r2, #21
 8001d56:	0d52      	lsrs	r2, r2, #21
 8001d58:	e70c      	b.n	8001b74 <__aeabi_dsub+0x154>
 8001d5a:	003c      	movs	r4, r7
 8001d5c:	4304      	orrs	r4, r0
 8001d5e:	1e62      	subs	r2, r4, #1
 8001d60:	4194      	sbcs	r4, r2
 8001d62:	18e4      	adds	r4, r4, r3
 8001d64:	429c      	cmp	r4, r3
 8001d66:	4192      	sbcs	r2, r2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	444a      	add	r2, r9
 8001d6c:	4692      	mov	sl, r2
 8001d6e:	4653      	mov	r3, sl
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d5df      	bpl.n	8001d34 <__aeabi_dsub+0x314>
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__aeabi_dsub+0x368>)
 8001d76:	3601      	adds	r6, #1
 8001d78:	429e      	cmp	r6, r3
 8001d7a:	d000      	beq.n	8001d7e <__aeabi_dsub+0x35e>
 8001d7c:	e0a0      	b.n	8001ec0 <__aeabi_dsub+0x4a0>
 8001d7e:	0032      	movs	r2, r6
 8001d80:	2400      	movs	r4, #0
 8001d82:	2300      	movs	r3, #0
 8001d84:	e6f6      	b.n	8001b74 <__aeabi_dsub+0x154>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	ff7fffff 	.word	0xff7fffff
 8001d90:	fffff801 	.word	0xfffff801
 8001d94:	000007fe 	.word	0x000007fe
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	464a      	mov	r2, r9
 8001d9c:	0752      	lsls	r2, r2, #29
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	464a      	mov	r2, r9
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	0019      	movs	r1, r3
 8001da6:	4311      	orrs	r1, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x38c>
 8001daa:	e1b5      	b.n	8002118 <__aeabi_dsub+0x6f8>
 8001dac:	2480      	movs	r4, #128	; 0x80
 8001dae:	0324      	lsls	r4, r4, #12
 8001db0:	4314      	orrs	r4, r2
 8001db2:	0324      	lsls	r4, r4, #12
 8001db4:	4ad5      	ldr	r2, [pc, #852]	; (800210c <__aeabi_dsub+0x6ec>)
 8001db6:	0b24      	lsrs	r4, r4, #12
 8001db8:	e6dc      	b.n	8001b74 <__aeabi_dsub+0x154>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f000 fa4e 	bl	800225c <__clzsi2>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	2b1f      	cmp	r3, #31
 8001dc6:	dc00      	bgt.n	8001dca <__aeabi_dsub+0x3aa>
 8001dc8:	e695      	b.n	8001af6 <__aeabi_dsub+0xd6>
 8001dca:	0022      	movs	r2, r4
 8001dcc:	3808      	subs	r0, #8
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	429e      	cmp	r6, r3
 8001dd4:	dc00      	bgt.n	8001dd8 <__aeabi_dsub+0x3b8>
 8001dd6:	e69a      	b.n	8001b0e <__aeabi_dsub+0xee>
 8001dd8:	1af6      	subs	r6, r6, r3
 8001dda:	4bcd      	ldr	r3, [pc, #820]	; (8002110 <__aeabi_dsub+0x6f0>)
 8001ddc:	401a      	ands	r2, r3
 8001dde:	4692      	mov	sl, r2
 8001de0:	e6a8      	b.n	8001b34 <__aeabi_dsub+0x114>
 8001de2:	003c      	movs	r4, r7
 8001de4:	4304      	orrs	r4, r0
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	e66c      	b.n	8001ac6 <__aeabi_dsub+0xa6>
 8001dec:	464a      	mov	r2, r9
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	0752      	lsls	r2, r2, #29
 8001df2:	4313      	orrs	r3, r2
 8001df4:	464a      	mov	r2, r9
 8001df6:	08d2      	lsrs	r2, r2, #3
 8001df8:	e7a6      	b.n	8001d48 <__aeabi_dsub+0x328>
 8001dfa:	4cc6      	ldr	r4, [pc, #792]	; (8002114 <__aeabi_dsub+0x6f4>)
 8001dfc:	1c72      	adds	r2, r6, #1
 8001dfe:	4222      	tst	r2, r4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dsub+0x3e4>
 8001e02:	e0ac      	b.n	8001f5e <__aeabi_dsub+0x53e>
 8001e04:	464a      	mov	r2, r9
 8001e06:	431a      	orrs	r2, r3
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_dsub+0x3ee>
 8001e0c:	e105      	b.n	800201a <__aeabi_dsub+0x5fa>
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x3f4>
 8001e12:	e156      	b.n	80020c2 <__aeabi_dsub+0x6a2>
 8001e14:	003a      	movs	r2, r7
 8001e16:	4302      	orrs	r2, r0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x3fc>
 8001e1a:	e0db      	b.n	8001fd4 <__aeabi_dsub+0x5b4>
 8001e1c:	181c      	adds	r4, r3, r0
 8001e1e:	429c      	cmp	r4, r3
 8001e20:	419b      	sbcs	r3, r3
 8001e22:	444f      	add	r7, r9
 8001e24:	46ba      	mov	sl, r7
 8001e26:	425b      	negs	r3, r3
 8001e28:	449a      	add	sl, r3
 8001e2a:	4653      	mov	r3, sl
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	d400      	bmi.n	8001e32 <__aeabi_dsub+0x412>
 8001e30:	e780      	b.n	8001d34 <__aeabi_dsub+0x314>
 8001e32:	4652      	mov	r2, sl
 8001e34:	4bb6      	ldr	r3, [pc, #728]	; (8002110 <__aeabi_dsub+0x6f0>)
 8001e36:	2601      	movs	r6, #1
 8001e38:	401a      	ands	r2, r3
 8001e3a:	4692      	mov	sl, r2
 8001e3c:	e77a      	b.n	8001d34 <__aeabi_dsub+0x314>
 8001e3e:	4cb3      	ldr	r4, [pc, #716]	; (800210c <__aeabi_dsub+0x6ec>)
 8001e40:	42a2      	cmp	r2, r4
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x426>
 8001e44:	e0c0      	b.n	8001fc8 <__aeabi_dsub+0x5a8>
 8001e46:	2480      	movs	r4, #128	; 0x80
 8001e48:	464d      	mov	r5, r9
 8001e4a:	0424      	lsls	r4, r4, #16
 8001e4c:	4325      	orrs	r5, r4
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	4664      	mov	r4, ip
 8001e52:	2c38      	cmp	r4, #56	; 0x38
 8001e54:	dc53      	bgt.n	8001efe <__aeabi_dsub+0x4de>
 8001e56:	4661      	mov	r1, ip
 8001e58:	2c1f      	cmp	r4, #31
 8001e5a:	dd00      	ble.n	8001e5e <__aeabi_dsub+0x43e>
 8001e5c:	e0cd      	b.n	8001ffa <__aeabi_dsub+0x5da>
 8001e5e:	2520      	movs	r5, #32
 8001e60:	001e      	movs	r6, r3
 8001e62:	1b2d      	subs	r5, r5, r4
 8001e64:	464c      	mov	r4, r9
 8001e66:	40ab      	lsls	r3, r5
 8001e68:	40ac      	lsls	r4, r5
 8001e6a:	40ce      	lsrs	r6, r1
 8001e6c:	1e5d      	subs	r5, r3, #1
 8001e6e:	41ab      	sbcs	r3, r5
 8001e70:	4334      	orrs	r4, r6
 8001e72:	4323      	orrs	r3, r4
 8001e74:	464c      	mov	r4, r9
 8001e76:	40cc      	lsrs	r4, r1
 8001e78:	1b3f      	subs	r7, r7, r4
 8001e7a:	e045      	b.n	8001f08 <__aeabi_dsub+0x4e8>
 8001e7c:	464a      	mov	r2, r9
 8001e7e:	1a1c      	subs	r4, r3, r0
 8001e80:	1bd1      	subs	r1, r2, r7
 8001e82:	42a3      	cmp	r3, r4
 8001e84:	4192      	sbcs	r2, r2
 8001e86:	4252      	negs	r2, r2
 8001e88:	4692      	mov	sl, r2
 8001e8a:	000a      	movs	r2, r1
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	1a52      	subs	r2, r2, r1
 8001e90:	4692      	mov	sl, r2
 8001e92:	0212      	lsls	r2, r2, #8
 8001e94:	d500      	bpl.n	8001e98 <__aeabi_dsub+0x478>
 8001e96:	e083      	b.n	8001fa0 <__aeabi_dsub+0x580>
 8001e98:	4653      	mov	r3, sl
 8001e9a:	4323      	orrs	r3, r4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_dsub+0x480>
 8001e9e:	e621      	b.n	8001ae4 <__aeabi_dsub+0xc4>
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e753      	b.n	8001d4e <__aeabi_dsub+0x32e>
 8001ea6:	181c      	adds	r4, r3, r0
 8001ea8:	429c      	cmp	r4, r3
 8001eaa:	419b      	sbcs	r3, r3
 8001eac:	444f      	add	r7, r9
 8001eae:	46ba      	mov	sl, r7
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	449a      	add	sl, r3
 8001eb4:	4653      	mov	r3, sl
 8001eb6:	2601      	movs	r6, #1
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	d400      	bmi.n	8001ebe <__aeabi_dsub+0x49e>
 8001ebc:	e73a      	b.n	8001d34 <__aeabi_dsub+0x314>
 8001ebe:	2602      	movs	r6, #2
 8001ec0:	4652      	mov	r2, sl
 8001ec2:	4b93      	ldr	r3, [pc, #588]	; (8002110 <__aeabi_dsub+0x6f0>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	4021      	ands	r1, r4
 8001ecc:	0862      	lsrs	r2, r4, #1
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	07dc      	lsls	r4, r3, #31
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	469a      	mov	sl, r3
 8001ed6:	4314      	orrs	r4, r2
 8001ed8:	e62c      	b.n	8001b34 <__aeabi_dsub+0x114>
 8001eda:	0039      	movs	r1, r7
 8001edc:	3a20      	subs	r2, #32
 8001ede:	40d1      	lsrs	r1, r2
 8001ee0:	4662      	mov	r2, ip
 8001ee2:	2a20      	cmp	r2, #32
 8001ee4:	d006      	beq.n	8001ef4 <__aeabi_dsub+0x4d4>
 8001ee6:	4664      	mov	r4, ip
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	1b12      	subs	r2, r2, r4
 8001eec:	003c      	movs	r4, r7
 8001eee:	4094      	lsls	r4, r2
 8001ef0:	4304      	orrs	r4, r0
 8001ef2:	9401      	str	r4, [sp, #4]
 8001ef4:	9c01      	ldr	r4, [sp, #4]
 8001ef6:	1e62      	subs	r2, r4, #1
 8001ef8:	4194      	sbcs	r4, r2
 8001efa:	430c      	orrs	r4, r1
 8001efc:	e5e3      	b.n	8001ac6 <__aeabi_dsub+0xa6>
 8001efe:	4649      	mov	r1, r9
 8001f00:	4319      	orrs	r1, r3
 8001f02:	000b      	movs	r3, r1
 8001f04:	1e5c      	subs	r4, r3, #1
 8001f06:	41a3      	sbcs	r3, r4
 8001f08:	1ac4      	subs	r4, r0, r3
 8001f0a:	42a0      	cmp	r0, r4
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	1afb      	subs	r3, r7, r3
 8001f12:	469a      	mov	sl, r3
 8001f14:	465d      	mov	r5, fp
 8001f16:	0016      	movs	r6, r2
 8001f18:	e5dc      	b.n	8001ad4 <__aeabi_dsub+0xb4>
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	4319      	orrs	r1, r3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x502>
 8001f20:	e0ae      	b.n	8002080 <__aeabi_dsub+0x660>
 8001f22:	4661      	mov	r1, ip
 8001f24:	4664      	mov	r4, ip
 8001f26:	3901      	subs	r1, #1
 8001f28:	2c01      	cmp	r4, #1
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dsub+0x50e>
 8001f2c:	e0e0      	b.n	80020f0 <__aeabi_dsub+0x6d0>
 8001f2e:	4c77      	ldr	r4, [pc, #476]	; (800210c <__aeabi_dsub+0x6ec>)
 8001f30:	45a4      	cmp	ip, r4
 8001f32:	d056      	beq.n	8001fe2 <__aeabi_dsub+0x5c2>
 8001f34:	468c      	mov	ip, r1
 8001f36:	e69a      	b.n	8001c6e <__aeabi_dsub+0x24e>
 8001f38:	4661      	mov	r1, ip
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	003c      	movs	r4, r7
 8001f3e:	1a52      	subs	r2, r2, r1
 8001f40:	4094      	lsls	r4, r2
 8001f42:	0001      	movs	r1, r0
 8001f44:	4090      	lsls	r0, r2
 8001f46:	46a0      	mov	r8, r4
 8001f48:	4664      	mov	r4, ip
 8001f4a:	1e42      	subs	r2, r0, #1
 8001f4c:	4190      	sbcs	r0, r2
 8001f4e:	4662      	mov	r2, ip
 8001f50:	40e1      	lsrs	r1, r4
 8001f52:	4644      	mov	r4, r8
 8001f54:	40d7      	lsrs	r7, r2
 8001f56:	430c      	orrs	r4, r1
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	44b9      	add	r9, r7
 8001f5c:	e701      	b.n	8001d62 <__aeabi_dsub+0x342>
 8001f5e:	496b      	ldr	r1, [pc, #428]	; (800210c <__aeabi_dsub+0x6ec>)
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x546>
 8001f64:	e70c      	b.n	8001d80 <__aeabi_dsub+0x360>
 8001f66:	1818      	adds	r0, r3, r0
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	419b      	sbcs	r3, r3
 8001f6c:	444f      	add	r7, r9
 8001f6e:	425b      	negs	r3, r3
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	07dc      	lsls	r4, r3, #31
 8001f74:	0840      	lsrs	r0, r0, #1
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	469a      	mov	sl, r3
 8001f7a:	0016      	movs	r6, r2
 8001f7c:	4304      	orrs	r4, r0
 8001f7e:	e6d9      	b.n	8001d34 <__aeabi_dsub+0x314>
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d000      	beq.n	8001f86 <__aeabi_dsub+0x566>
 8001f84:	e081      	b.n	800208a <__aeabi_dsub+0x66a>
 8001f86:	003b      	movs	r3, r7
 8001f88:	4303      	orrs	r3, r0
 8001f8a:	d11d      	bne.n	8001fc8 <__aeabi_dsub+0x5a8>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	2500      	movs	r5, #0
 8001f90:	0312      	lsls	r2, r2, #12
 8001f92:	e70b      	b.n	8001dac <__aeabi_dsub+0x38c>
 8001f94:	08c0      	lsrs	r0, r0, #3
 8001f96:	077b      	lsls	r3, r7, #29
 8001f98:	465d      	mov	r5, fp
 8001f9a:	4303      	orrs	r3, r0
 8001f9c:	08fa      	lsrs	r2, r7, #3
 8001f9e:	e6d3      	b.n	8001d48 <__aeabi_dsub+0x328>
 8001fa0:	1ac4      	subs	r4, r0, r3
 8001fa2:	42a0      	cmp	r0, r4
 8001fa4:	4180      	sbcs	r0, r0
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	4240      	negs	r0, r0
 8001faa:	1aff      	subs	r7, r7, r3
 8001fac:	1a3b      	subs	r3, r7, r0
 8001fae:	469a      	mov	sl, r3
 8001fb0:	465d      	mov	r5, fp
 8001fb2:	e597      	b.n	8001ae4 <__aeabi_dsub+0xc4>
 8001fb4:	1a1c      	subs	r4, r3, r0
 8001fb6:	464a      	mov	r2, r9
 8001fb8:	42a3      	cmp	r3, r4
 8001fba:	419b      	sbcs	r3, r3
 8001fbc:	1bd7      	subs	r7, r2, r7
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	1afb      	subs	r3, r7, r3
 8001fc2:	469a      	mov	sl, r3
 8001fc4:	2601      	movs	r6, #1
 8001fc6:	e585      	b.n	8001ad4 <__aeabi_dsub+0xb4>
 8001fc8:	08c0      	lsrs	r0, r0, #3
 8001fca:	077b      	lsls	r3, r7, #29
 8001fcc:	465d      	mov	r5, fp
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	08fa      	lsrs	r2, r7, #3
 8001fd2:	e6e7      	b.n	8001da4 <__aeabi_dsub+0x384>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	464a      	mov	r2, r9
 8001fde:	08d2      	lsrs	r2, r2, #3
 8001fe0:	e6b5      	b.n	8001d4e <__aeabi_dsub+0x32e>
 8001fe2:	08c0      	lsrs	r0, r0, #3
 8001fe4:	077b      	lsls	r3, r7, #29
 8001fe6:	4303      	orrs	r3, r0
 8001fe8:	08fa      	lsrs	r2, r7, #3
 8001fea:	e6db      	b.n	8001da4 <__aeabi_dsub+0x384>
 8001fec:	4649      	mov	r1, r9
 8001fee:	4319      	orrs	r1, r3
 8001ff0:	000b      	movs	r3, r1
 8001ff2:	1e59      	subs	r1, r3, #1
 8001ff4:	418b      	sbcs	r3, r1
 8001ff6:	001c      	movs	r4, r3
 8001ff8:	e653      	b.n	8001ca2 <__aeabi_dsub+0x282>
 8001ffa:	464d      	mov	r5, r9
 8001ffc:	3c20      	subs	r4, #32
 8001ffe:	40e5      	lsrs	r5, r4
 8002000:	2920      	cmp	r1, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dsub+0x5f0>
 8002004:	2440      	movs	r4, #64	; 0x40
 8002006:	1a64      	subs	r4, r4, r1
 8002008:	4649      	mov	r1, r9
 800200a:	40a1      	lsls	r1, r4
 800200c:	430b      	orrs	r3, r1
 800200e:	4698      	mov	r8, r3
 8002010:	4643      	mov	r3, r8
 8002012:	1e5c      	subs	r4, r3, #1
 8002014:	41a3      	sbcs	r3, r4
 8002016:	432b      	orrs	r3, r5
 8002018:	e776      	b.n	8001f08 <__aeabi_dsub+0x4e8>
 800201a:	2a00      	cmp	r2, #0
 800201c:	d0e1      	beq.n	8001fe2 <__aeabi_dsub+0x5c2>
 800201e:	003a      	movs	r2, r7
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	4302      	orrs	r2, r0
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x608>
 8002026:	e6b8      	b.n	8001d9a <__aeabi_dsub+0x37a>
 8002028:	464a      	mov	r2, r9
 800202a:	0752      	lsls	r2, r2, #29
 800202c:	2480      	movs	r4, #128	; 0x80
 800202e:	4313      	orrs	r3, r2
 8002030:	464a      	mov	r2, r9
 8002032:	0324      	lsls	r4, r4, #12
 8002034:	08d2      	lsrs	r2, r2, #3
 8002036:	4222      	tst	r2, r4
 8002038:	d007      	beq.n	800204a <__aeabi_dsub+0x62a>
 800203a:	08fe      	lsrs	r6, r7, #3
 800203c:	4226      	tst	r6, r4
 800203e:	d104      	bne.n	800204a <__aeabi_dsub+0x62a>
 8002040:	465d      	mov	r5, fp
 8002042:	0032      	movs	r2, r6
 8002044:	08c3      	lsrs	r3, r0, #3
 8002046:	077f      	lsls	r7, r7, #29
 8002048:	433b      	orrs	r3, r7
 800204a:	0f59      	lsrs	r1, r3, #29
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	0749      	lsls	r1, r1, #29
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	430b      	orrs	r3, r1
 8002054:	e6a6      	b.n	8001da4 <__aeabi_dsub+0x384>
 8002056:	1ac4      	subs	r4, r0, r3
 8002058:	42a0      	cmp	r0, r4
 800205a:	4180      	sbcs	r0, r0
 800205c:	464b      	mov	r3, r9
 800205e:	4240      	negs	r0, r0
 8002060:	1aff      	subs	r7, r7, r3
 8002062:	1a3b      	subs	r3, r7, r0
 8002064:	469a      	mov	sl, r3
 8002066:	465d      	mov	r5, fp
 8002068:	2601      	movs	r6, #1
 800206a:	e533      	b.n	8001ad4 <__aeabi_dsub+0xb4>
 800206c:	003b      	movs	r3, r7
 800206e:	4303      	orrs	r3, r0
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x654>
 8002072:	e715      	b.n	8001ea0 <__aeabi_dsub+0x480>
 8002074:	08c0      	lsrs	r0, r0, #3
 8002076:	077b      	lsls	r3, r7, #29
 8002078:	465d      	mov	r5, fp
 800207a:	4303      	orrs	r3, r0
 800207c:	08fa      	lsrs	r2, r7, #3
 800207e:	e666      	b.n	8001d4e <__aeabi_dsub+0x32e>
 8002080:	08c0      	lsrs	r0, r0, #3
 8002082:	077b      	lsls	r3, r7, #29
 8002084:	4303      	orrs	r3, r0
 8002086:	08fa      	lsrs	r2, r7, #3
 8002088:	e65e      	b.n	8001d48 <__aeabi_dsub+0x328>
 800208a:	003a      	movs	r2, r7
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	4302      	orrs	r2, r0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x674>
 8002092:	e682      	b.n	8001d9a <__aeabi_dsub+0x37a>
 8002094:	464a      	mov	r2, r9
 8002096:	0752      	lsls	r2, r2, #29
 8002098:	2480      	movs	r4, #128	; 0x80
 800209a:	4313      	orrs	r3, r2
 800209c:	464a      	mov	r2, r9
 800209e:	0324      	lsls	r4, r4, #12
 80020a0:	08d2      	lsrs	r2, r2, #3
 80020a2:	4222      	tst	r2, r4
 80020a4:	d007      	beq.n	80020b6 <__aeabi_dsub+0x696>
 80020a6:	08fe      	lsrs	r6, r7, #3
 80020a8:	4226      	tst	r6, r4
 80020aa:	d104      	bne.n	80020b6 <__aeabi_dsub+0x696>
 80020ac:	465d      	mov	r5, fp
 80020ae:	0032      	movs	r2, r6
 80020b0:	08c3      	lsrs	r3, r0, #3
 80020b2:	077f      	lsls	r7, r7, #29
 80020b4:	433b      	orrs	r3, r7
 80020b6:	0f59      	lsrs	r1, r3, #29
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	0749      	lsls	r1, r1, #29
 80020be:	430b      	orrs	r3, r1
 80020c0:	e670      	b.n	8001da4 <__aeabi_dsub+0x384>
 80020c2:	08c0      	lsrs	r0, r0, #3
 80020c4:	077b      	lsls	r3, r7, #29
 80020c6:	4303      	orrs	r3, r0
 80020c8:	08fa      	lsrs	r2, r7, #3
 80020ca:	e640      	b.n	8001d4e <__aeabi_dsub+0x32e>
 80020cc:	464c      	mov	r4, r9
 80020ce:	3920      	subs	r1, #32
 80020d0:	40cc      	lsrs	r4, r1
 80020d2:	4661      	mov	r1, ip
 80020d4:	2920      	cmp	r1, #32
 80020d6:	d006      	beq.n	80020e6 <__aeabi_dsub+0x6c6>
 80020d8:	4666      	mov	r6, ip
 80020da:	2140      	movs	r1, #64	; 0x40
 80020dc:	1b89      	subs	r1, r1, r6
 80020de:	464e      	mov	r6, r9
 80020e0:	408e      	lsls	r6, r1
 80020e2:	4333      	orrs	r3, r6
 80020e4:	4698      	mov	r8, r3
 80020e6:	4643      	mov	r3, r8
 80020e8:	1e59      	subs	r1, r3, #1
 80020ea:	418b      	sbcs	r3, r1
 80020ec:	431c      	orrs	r4, r3
 80020ee:	e5d8      	b.n	8001ca2 <__aeabi_dsub+0x282>
 80020f0:	181c      	adds	r4, r3, r0
 80020f2:	4284      	cmp	r4, r0
 80020f4:	4180      	sbcs	r0, r0
 80020f6:	444f      	add	r7, r9
 80020f8:	46ba      	mov	sl, r7
 80020fa:	4240      	negs	r0, r0
 80020fc:	4482      	add	sl, r0
 80020fe:	e6d9      	b.n	8001eb4 <__aeabi_dsub+0x494>
 8002100:	4653      	mov	r3, sl
 8002102:	4323      	orrs	r3, r4
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x6e8>
 8002106:	e6cb      	b.n	8001ea0 <__aeabi_dsub+0x480>
 8002108:	e614      	b.n	8001d34 <__aeabi_dsub+0x314>
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	000007ff 	.word	0x000007ff
 8002110:	ff7fffff 	.word	0xff7fffff
 8002114:	000007fe 	.word	0x000007fe
 8002118:	2300      	movs	r3, #0
 800211a:	4a01      	ldr	r2, [pc, #4]	; (8002120 <__aeabi_dsub+0x700>)
 800211c:	001c      	movs	r4, r3
 800211e:	e529      	b.n	8001b74 <__aeabi_dsub+0x154>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__aeabi_dcmpun>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	0005      	movs	r5, r0
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <__aeabi_dcmpun+0x38>)
 800212a:	031c      	lsls	r4, r3, #12
 800212c:	0016      	movs	r6, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	030a      	lsls	r2, r1, #12
 8002132:	0049      	lsls	r1, r1, #1
 8002134:	0b12      	lsrs	r2, r2, #12
 8002136:	0d49      	lsrs	r1, r1, #21
 8002138:	0b24      	lsrs	r4, r4, #12
 800213a:	0d5b      	lsrs	r3, r3, #21
 800213c:	4281      	cmp	r1, r0
 800213e:	d008      	beq.n	8002152 <__aeabi_dcmpun+0x2e>
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <__aeabi_dcmpun+0x38>)
 8002142:	2000      	movs	r0, #0
 8002144:	4293      	cmp	r3, r2
 8002146:	d103      	bne.n	8002150 <__aeabi_dcmpun+0x2c>
 8002148:	0020      	movs	r0, r4
 800214a:	4330      	orrs	r0, r6
 800214c:	1e43      	subs	r3, r0, #1
 800214e:	4198      	sbcs	r0, r3
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	2001      	movs	r0, #1
 8002154:	432a      	orrs	r2, r5
 8002156:	d1fb      	bne.n	8002150 <__aeabi_dcmpun+0x2c>
 8002158:	e7f2      	b.n	8002140 <__aeabi_dcmpun+0x1c>
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	000007ff 	.word	0x000007ff

08002160 <__aeabi_d2iz>:
 8002160:	000a      	movs	r2, r1
 8002162:	b530      	push	{r4, r5, lr}
 8002164:	4c13      	ldr	r4, [pc, #76]	; (80021b4 <__aeabi_d2iz+0x54>)
 8002166:	0053      	lsls	r3, r2, #1
 8002168:	0309      	lsls	r1, r1, #12
 800216a:	0005      	movs	r5, r0
 800216c:	0b09      	lsrs	r1, r1, #12
 800216e:	2000      	movs	r0, #0
 8002170:	0d5b      	lsrs	r3, r3, #21
 8002172:	0fd2      	lsrs	r2, r2, #31
 8002174:	42a3      	cmp	r3, r4
 8002176:	dd04      	ble.n	8002182 <__aeabi_d2iz+0x22>
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <__aeabi_d2iz+0x58>)
 800217a:	4283      	cmp	r3, r0
 800217c:	dd02      	ble.n	8002184 <__aeabi_d2iz+0x24>
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <__aeabi_d2iz+0x5c>)
 8002180:	18d0      	adds	r0, r2, r3
 8002182:	bd30      	pop	{r4, r5, pc}
 8002184:	2080      	movs	r0, #128	; 0x80
 8002186:	0340      	lsls	r0, r0, #13
 8002188:	4301      	orrs	r1, r0
 800218a:	480d      	ldr	r0, [pc, #52]	; (80021c0 <__aeabi_d2iz+0x60>)
 800218c:	1ac0      	subs	r0, r0, r3
 800218e:	281f      	cmp	r0, #31
 8002190:	dd08      	ble.n	80021a4 <__aeabi_d2iz+0x44>
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <__aeabi_d2iz+0x64>)
 8002194:	1ac3      	subs	r3, r0, r3
 8002196:	40d9      	lsrs	r1, r3
 8002198:	000b      	movs	r3, r1
 800219a:	4258      	negs	r0, r3
 800219c:	2a00      	cmp	r2, #0
 800219e:	d1f0      	bne.n	8002182 <__aeabi_d2iz+0x22>
 80021a0:	0018      	movs	r0, r3
 80021a2:	e7ee      	b.n	8002182 <__aeabi_d2iz+0x22>
 80021a4:	4c08      	ldr	r4, [pc, #32]	; (80021c8 <__aeabi_d2iz+0x68>)
 80021a6:	40c5      	lsrs	r5, r0
 80021a8:	46a4      	mov	ip, r4
 80021aa:	4463      	add	r3, ip
 80021ac:	4099      	lsls	r1, r3
 80021ae:	000b      	movs	r3, r1
 80021b0:	432b      	orrs	r3, r5
 80021b2:	e7f2      	b.n	800219a <__aeabi_d2iz+0x3a>
 80021b4:	000003fe 	.word	0x000003fe
 80021b8:	0000041d 	.word	0x0000041d
 80021bc:	7fffffff 	.word	0x7fffffff
 80021c0:	00000433 	.word	0x00000433
 80021c4:	00000413 	.word	0x00000413
 80021c8:	fffffbed 	.word	0xfffffbed

080021cc <__aeabi_f2d>:
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0242      	lsls	r2, r0, #9
 80021d0:	0043      	lsls	r3, r0, #1
 80021d2:	0fc4      	lsrs	r4, r0, #31
 80021d4:	20fe      	movs	r0, #254	; 0xfe
 80021d6:	0e1b      	lsrs	r3, r3, #24
 80021d8:	1c59      	adds	r1, r3, #1
 80021da:	0a55      	lsrs	r5, r2, #9
 80021dc:	4208      	tst	r0, r1
 80021de:	d00c      	beq.n	80021fa <__aeabi_f2d+0x2e>
 80021e0:	21e0      	movs	r1, #224	; 0xe0
 80021e2:	0089      	lsls	r1, r1, #2
 80021e4:	468c      	mov	ip, r1
 80021e6:	076d      	lsls	r5, r5, #29
 80021e8:	0b12      	lsrs	r2, r2, #12
 80021ea:	4463      	add	r3, ip
 80021ec:	051b      	lsls	r3, r3, #20
 80021ee:	4313      	orrs	r3, r2
 80021f0:	07e4      	lsls	r4, r4, #31
 80021f2:	4323      	orrs	r3, r4
 80021f4:	0028      	movs	r0, r5
 80021f6:	0019      	movs	r1, r3
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <__aeabi_f2d+0x5c>
 80021fe:	2d00      	cmp	r5, #0
 8002200:	d01b      	beq.n	800223a <__aeabi_f2d+0x6e>
 8002202:	0028      	movs	r0, r5
 8002204:	f000 f82a 	bl	800225c <__clzsi2>
 8002208:	280a      	cmp	r0, #10
 800220a:	dc1c      	bgt.n	8002246 <__aeabi_f2d+0x7a>
 800220c:	230b      	movs	r3, #11
 800220e:	002a      	movs	r2, r5
 8002210:	1a1b      	subs	r3, r3, r0
 8002212:	40da      	lsrs	r2, r3
 8002214:	0003      	movs	r3, r0
 8002216:	3315      	adds	r3, #21
 8002218:	409d      	lsls	r5, r3
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <__aeabi_f2d+0x88>)
 800221c:	0312      	lsls	r2, r2, #12
 800221e:	1a1b      	subs	r3, r3, r0
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	0b12      	lsrs	r2, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e7e1      	b.n	80021ec <__aeabi_f2d+0x20>
 8002228:	2d00      	cmp	r5, #0
 800222a:	d009      	beq.n	8002240 <__aeabi_f2d+0x74>
 800222c:	0b13      	lsrs	r3, r2, #12
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	0312      	lsls	r2, r2, #12
 8002232:	431a      	orrs	r2, r3
 8002234:	076d      	lsls	r5, r5, #29
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <__aeabi_f2d+0x8c>)
 8002238:	e7d8      	b.n	80021ec <__aeabi_f2d+0x20>
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	e7d5      	b.n	80021ec <__aeabi_f2d+0x20>
 8002240:	2200      	movs	r2, #0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <__aeabi_f2d+0x8c>)
 8002244:	e7d2      	b.n	80021ec <__aeabi_f2d+0x20>
 8002246:	0003      	movs	r3, r0
 8002248:	002a      	movs	r2, r5
 800224a:	3b0b      	subs	r3, #11
 800224c:	409a      	lsls	r2, r3
 800224e:	2500      	movs	r5, #0
 8002250:	e7e3      	b.n	800221a <__aeabi_f2d+0x4e>
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	00000389 	.word	0x00000389
 8002258:	000007ff 	.word	0x000007ff

0800225c <__clzsi2>:
 800225c:	211c      	movs	r1, #28
 800225e:	2301      	movs	r3, #1
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	4298      	cmp	r0, r3
 8002264:	d301      	bcc.n	800226a <__clzsi2+0xe>
 8002266:	0c00      	lsrs	r0, r0, #16
 8002268:	3910      	subs	r1, #16
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	4298      	cmp	r0, r3
 800226e:	d301      	bcc.n	8002274 <__clzsi2+0x18>
 8002270:	0a00      	lsrs	r0, r0, #8
 8002272:	3908      	subs	r1, #8
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	4298      	cmp	r0, r3
 8002278:	d301      	bcc.n	800227e <__clzsi2+0x22>
 800227a:	0900      	lsrs	r0, r0, #4
 800227c:	3904      	subs	r1, #4
 800227e:	a202      	add	r2, pc, #8	; (adr r2, 8002288 <__clzsi2+0x2c>)
 8002280:	5c10      	ldrb	r0, [r2, r0]
 8002282:	1840      	adds	r0, r0, r1
 8002284:	4770      	bx	lr
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	02020304 	.word	0x02020304
 800228c:	01010101 	.word	0x01010101
	...

08002298 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022a0:	2301      	movs	r3, #1
 80022a2:	425b      	negs	r3, r3
 80022a4:	1d39      	adds	r1, r7, #4
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <__io_putchar+0x20>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	f002 feef 	bl	800508c <HAL_UART_Transmit>
	return ch;
 80022ae:	687b      	ldr	r3, [r7, #4]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000154 	.word	0x20000154

080022bc <FADC_Get_VRMS>:
//	  //3 channel init
//	  MX_ADC1_Init();
//	  return Fun_Ok;
//}
//
Fun_Status FADC_Get_VRMS(ADCPar* FADC_p){
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

	long double VRMS_R_hold = 0; //Declaring R_Phase
 80022c4:	2200      	movs	r2, #0
 80022c6:	2300      	movs	r3, #0
 80022c8:	623a      	str	r2, [r7, #32]
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
	long double VRMS_Y_hold = 0; //Declaring Y_Phase
 80022cc:	2200      	movs	r2, #0
 80022ce:	2300      	movs	r3, #0
 80022d0:	61ba      	str	r2, [r7, #24]
 80022d2:	61fb      	str	r3, [r7, #28]
	long double VRMS_B_hold = 0; //Declaring B_Phase
 80022d4:	2200      	movs	r2, #0
 80022d6:	2300      	movs	r3, #0
 80022d8:	613a      	str	r2, [r7, #16]
 80022da:	617b      	str	r3, [r7, #20]
	FADC_p->StatusDMA = ADC_DMA_Started;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	731a      	strb	r2, [r3, #12]
	HAL_ADC_Start_DMA(FADC_p->HADC,(uint32_t*)FADC_p->ADC_DMA_Sample , sizeof(FADC_p->ADC_DMA_Sample));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6918      	ldr	r0, [r3, #16]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3314      	adds	r3, #20
 80022ea:	2296      	movs	r2, #150	; 0x96
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	0019      	movs	r1, r3
 80022f0:	f001 f81e 	bl	8003330 <HAL_ADC_Start_DMA>
	uint32_t DMA_TimeIn = HAL_GetTick();
 80022f4:	f000 fcfe 	bl	8002cf4 <HAL_GetTick>
 80022f8:	0003      	movs	r3, r0
 80022fa:	60bb      	str	r3, [r7, #8]

	while(FADC_p->StatusDMA != ADC_DMA_Started)
 80022fc:	e008      	b.n	8002310 <FADC_Get_VRMS+0x54>
	{
		if((HAL_GetTick() - DMA_TimeIn) > 100 )
 80022fe:	f000 fcf9 	bl	8002cf4 <HAL_GetTick>
 8002302:	0002      	movs	r2, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <FADC_Get_VRMS+0x54>
		{
			return Fun_Timeout;
 800230c:	2302      	movs	r3, #2
 800230e:	e112      	b.n	8002536 <FADC_Get_VRMS+0x27a>
	while(FADC_p->StatusDMA != ADC_DMA_Started)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7b1b      	ldrb	r3, [r3, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d1f2      	bne.n	80022fe <FADC_Get_VRMS+0x42>
		}
	}

	if(FADC_p->StatusDMA == ADC_DMA_Completed)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7b1b      	ldrb	r3, [r3, #12]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d000      	beq.n	8002322 <FADC_Get_VRMS+0x66>
 8002320:	e108      	b.n	8002534 <FADC_Get_VRMS+0x278>
	{
		for(uint16_t id = 0; id < EachChanSample;id++ )
 8002322:	230e      	movs	r3, #14
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2200      	movs	r2, #0
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e0a9      	b.n	8002480 <FADC_Get_VRMS+0x1c4>
		{
			VRMS_R_hold = FADC_p->ADC_DMA_Sample[id*3]*FADC_p->K;
 800232c:	240e      	movs	r4, #14
 800232e:	193b      	adds	r3, r7, r4
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	0013      	movs	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	189b      	adds	r3, r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	3308      	adds	r3, #8
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	18d3      	adds	r3, r2, r3
 8002340:	3304      	adds	r3, #4
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	0018      	movs	r0, r3
 8002346:	f7fe f8fd 	bl	8000544 <__aeabi_i2f>
 800234a:	1c02      	adds	r2, r0, #0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	1c19      	adds	r1, r3, #0
 8002352:	1c10      	adds	r0, r2, #0
 8002354:	f7fd ffa8 	bl	80002a8 <__aeabi_fmul>
 8002358:	1c03      	adds	r3, r0, #0
 800235a:	1c18      	adds	r0, r3, #0
 800235c:	f7ff ff36 	bl	80021cc <__aeabi_f2d>
 8002360:	0002      	movs	r2, r0
 8002362:	000b      	movs	r3, r1
 8002364:	623a      	str	r2, [r7, #32]
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
			VRMS_R_hold = (VRMS_R_hold - FADC_p->DCoffset);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	1c18      	adds	r0, r3, #0
 800236e:	f7ff ff2d 	bl	80021cc <__aeabi_f2d>
 8002372:	0002      	movs	r2, r0
 8002374:	000b      	movs	r3, r1
 8002376:	6a38      	ldr	r0, [r7, #32]
 8002378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237a:	f7ff fb51 	bl	8001a20 <__aeabi_dsub>
 800237e:	0002      	movs	r2, r0
 8002380:	000b      	movs	r3, r1
 8002382:	623a      	str	r2, [r7, #32]
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
			VRMS_R_hold *= VRMS_R_hold; // May be need to change
 8002386:	6a3a      	ldr	r2, [r7, #32]
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	6a38      	ldr	r0, [r7, #32]
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	f7ff f885 	bl	800149c <__aeabi_dmul>
 8002392:	0002      	movs	r2, r0
 8002394:	000b      	movs	r3, r1
 8002396:	623a      	str	r2, [r7, #32]
 8002398:	627b      	str	r3, [r7, #36]	; 0x24

			VRMS_Y_hold = FADC_p->ADC_DMA_Sample[(id*3) + 1]*FADC_p->K;
 800239a:	193b      	adds	r3, r7, r4
 800239c:	881a      	ldrh	r2, [r3, #0]
 800239e:	0013      	movs	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	189b      	adds	r3, r3, r2
 80023a4:	3301      	adds	r3, #1
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	3308      	adds	r3, #8
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	3304      	adds	r3, #4
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f7fe f8c6 	bl	8000544 <__aeabi_i2f>
 80023b8:	1c02      	adds	r2, r0, #0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	1c19      	adds	r1, r3, #0
 80023c0:	1c10      	adds	r0, r2, #0
 80023c2:	f7fd ff71 	bl	80002a8 <__aeabi_fmul>
 80023c6:	1c03      	adds	r3, r0, #0
 80023c8:	1c18      	adds	r0, r3, #0
 80023ca:	f7ff feff 	bl	80021cc <__aeabi_f2d>
 80023ce:	0002      	movs	r2, r0
 80023d0:	000b      	movs	r3, r1
 80023d2:	61ba      	str	r2, [r7, #24]
 80023d4:	61fb      	str	r3, [r7, #28]
			VRMS_Y_hold = (VRMS_Y_hold - FADC_p->DCoffset);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	1c18      	adds	r0, r3, #0
 80023dc:	f7ff fef6 	bl	80021cc <__aeabi_f2d>
 80023e0:	0002      	movs	r2, r0
 80023e2:	000b      	movs	r3, r1
 80023e4:	69b8      	ldr	r0, [r7, #24]
 80023e6:	69f9      	ldr	r1, [r7, #28]
 80023e8:	f7ff fb1a 	bl	8001a20 <__aeabi_dsub>
 80023ec:	0002      	movs	r2, r0
 80023ee:	000b      	movs	r3, r1
 80023f0:	61ba      	str	r2, [r7, #24]
 80023f2:	61fb      	str	r3, [r7, #28]
			VRMS_Y_hold *= VRMS_Y_hold;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	69b8      	ldr	r0, [r7, #24]
 80023fa:	69f9      	ldr	r1, [r7, #28]
 80023fc:	f7ff f84e 	bl	800149c <__aeabi_dmul>
 8002400:	0002      	movs	r2, r0
 8002402:	000b      	movs	r3, r1
 8002404:	61ba      	str	r2, [r7, #24]
 8002406:	61fb      	str	r3, [r7, #28]

			VRMS_B_hold = FADC_p->ADC_DMA_Sample[(id*3)+2]*FADC_p->K;
 8002408:	193b      	adds	r3, r7, r4
 800240a:	881a      	ldrh	r2, [r3, #0]
 800240c:	0013      	movs	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	189b      	adds	r3, r3, r2
 8002412:	3302      	adds	r3, #2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	3308      	adds	r3, #8
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	3304      	adds	r3, #4
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe f88f 	bl	8000544 <__aeabi_i2f>
 8002426:	1c02      	adds	r2, r0, #0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	1c19      	adds	r1, r3, #0
 800242e:	1c10      	adds	r0, r2, #0
 8002430:	f7fd ff3a 	bl	80002a8 <__aeabi_fmul>
 8002434:	1c03      	adds	r3, r0, #0
 8002436:	1c18      	adds	r0, r3, #0
 8002438:	f7ff fec8 	bl	80021cc <__aeabi_f2d>
 800243c:	0002      	movs	r2, r0
 800243e:	000b      	movs	r3, r1
 8002440:	613a      	str	r2, [r7, #16]
 8002442:	617b      	str	r3, [r7, #20]
			VRMS_B_hold = (VRMS_B_hold - FADC_p->DCoffset);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	1c18      	adds	r0, r3, #0
 800244a:	f7ff febf 	bl	80021cc <__aeabi_f2d>
 800244e:	0002      	movs	r2, r0
 8002450:	000b      	movs	r3, r1
 8002452:	6938      	ldr	r0, [r7, #16]
 8002454:	6979      	ldr	r1, [r7, #20]
 8002456:	f7ff fae3 	bl	8001a20 <__aeabi_dsub>
 800245a:	0002      	movs	r2, r0
 800245c:	000b      	movs	r3, r1
 800245e:	613a      	str	r2, [r7, #16]
 8002460:	617b      	str	r3, [r7, #20]
			VRMS_B_hold *= VRMS_B_hold;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	6979      	ldr	r1, [r7, #20]
 800246a:	f7ff f817 	bl	800149c <__aeabi_dmul>
 800246e:	0002      	movs	r2, r0
 8002470:	000b      	movs	r3, r1
 8002472:	613a      	str	r2, [r7, #16]
 8002474:	617b      	str	r3, [r7, #20]
		for(uint16_t id = 0; id < EachChanSample;id++ )
 8002476:	193b      	adds	r3, r7, r4
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	193b      	adds	r3, r7, r4
 800247c:	3201      	adds	r2, #1
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	230e      	movs	r3, #14
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	2b63      	cmp	r3, #99	; 0x63
 8002488:	d800      	bhi.n	800248c <FADC_Get_VRMS+0x1d0>
 800248a:	e74f      	b.n	800232c <FADC_Get_VRMS+0x70>
		}
		VRMS_R_hold = VRMS_R_hold / EachChanSample;
 800248c:	2200      	movs	r2, #0
 800248e:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <FADC_Get_VRMS+0x284>)
 8002490:	6a38      	ldr	r0, [r7, #32]
 8002492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002494:	f7fe fc08 	bl	8000ca8 <__aeabi_ddiv>
 8002498:	0002      	movs	r2, r0
 800249a:	000b      	movs	r3, r1
 800249c:	623a      	str	r2, [r7, #32]
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
		VRMS_R_hold = sqrt(VRMS_R_hold);
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	0010      	movs	r0, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	f004 f9af 	bl	800680a <sqrt>
 80024ac:	0002      	movs	r2, r0
 80024ae:	000b      	movs	r3, r1
 80024b0:	623a      	str	r2, [r7, #32]
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24

		VRMS_Y_hold = VRMS_Y_hold / EachChanSample;
 80024b4:	2200      	movs	r2, #0
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <FADC_Get_VRMS+0x284>)
 80024b8:	69b8      	ldr	r0, [r7, #24]
 80024ba:	69f9      	ldr	r1, [r7, #28]
 80024bc:	f7fe fbf4 	bl	8000ca8 <__aeabi_ddiv>
 80024c0:	0002      	movs	r2, r0
 80024c2:	000b      	movs	r3, r1
 80024c4:	61ba      	str	r2, [r7, #24]
 80024c6:	61fb      	str	r3, [r7, #28]
		VRMS_Y_hold = sqrt(VRMS_Y_hold);
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	0010      	movs	r0, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	f004 f99b 	bl	800680a <sqrt>
 80024d4:	0002      	movs	r2, r0
 80024d6:	000b      	movs	r3, r1
 80024d8:	61ba      	str	r2, [r7, #24]
 80024da:	61fb      	str	r3, [r7, #28]

		VRMS_B_hold = VRMS_B_hold / EachChanSample;
 80024dc:	2200      	movs	r2, #0
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <FADC_Get_VRMS+0x284>)
 80024e0:	6938      	ldr	r0, [r7, #16]
 80024e2:	6979      	ldr	r1, [r7, #20]
 80024e4:	f7fe fbe0 	bl	8000ca8 <__aeabi_ddiv>
 80024e8:	0002      	movs	r2, r0
 80024ea:	000b      	movs	r3, r1
 80024ec:	613a      	str	r2, [r7, #16]
 80024ee:	617b      	str	r3, [r7, #20]
		VRMS_B_hold = sqrt(VRMS_B_hold);
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0010      	movs	r0, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	f004 f987 	bl	800680a <sqrt>
 80024fc:	0002      	movs	r2, r0
 80024fe:	000b      	movs	r3, r1
 8002500:	613a      	str	r2, [r7, #16]
 8002502:	617b      	str	r3, [r7, #20]


		printf("Input voltage : Output voltage : current\n");
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <FADC_Get_VRMS+0x288>)
 8002506:	0018      	movs	r0, r3
 8002508:	f003 fae2 	bl	8005ad0 <puts>
		printf("%d : %d : %d",(int)VRMS_R_hold,(int)VRMS_Y_hold,(int)VRMS_B_hold);
 800250c:	6a38      	ldr	r0, [r7, #32]
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	f7ff fe26 	bl	8002160 <__aeabi_d2iz>
 8002514:	0004      	movs	r4, r0
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	69f9      	ldr	r1, [r7, #28]
 800251a:	f7ff fe21 	bl	8002160 <__aeabi_d2iz>
 800251e:	0005      	movs	r5, r0
 8002520:	6938      	ldr	r0, [r7, #16]
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	f7ff fe1c 	bl	8002160 <__aeabi_d2iz>
 8002528:	0003      	movs	r3, r0
 800252a:	4807      	ldr	r0, [pc, #28]	; (8002548 <FADC_Get_VRMS+0x28c>)
 800252c:	002a      	movs	r2, r5
 800252e:	0021      	movs	r1, r4
 8002530:	f003 fa68 	bl	8005a04 <iprintf>

	}
	return Fun_Ok;
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b00a      	add	sp, #40	; 0x28
 800253c:	bdb0      	pop	{r4, r5, r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40590000 	.word	0x40590000
 8002544:	08006a48 	.word	0x08006a48
 8002548:	08006a74 	.word	0x08006a74

0800254c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADCVar.HADC->Instance)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_ADC_ConvCpltCallback+0x24>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d102      	bne.n	8002568 <HAL_ADC_ConvCpltCallback+0x1c>
	{
		ADCVar.StatusDMA = ADC_DMA_Completed;
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_ADC_ConvCpltCallback+0x24>)
 8002564:	2202      	movs	r2, #2
 8002566:	731a      	strb	r2, [r3, #12]
	}
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200001e8 	.word	0x200001e8

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002578:	f000 fb40 	bl	8002bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257c:	f000 f814 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002580:	f000 f938 	bl	80027f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002584:	f000 f918 	bl	80027b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002588:	f000 f856 	bl	8002638 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800258c:	f000 f8e0 	bl	8002750 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FADC_Get_VRMS(&ADCVar);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <main+0x30>)
 8002592:	0018      	movs	r0, r3
 8002594:	f7ff fe92 	bl	80022bc <FADC_Get_VRMS>
	  HAL_Delay(1000);
 8002598:	23fa      	movs	r3, #250	; 0xfa
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fbb3 	bl	8002d08 <HAL_Delay>
	  FADC_Get_VRMS(&ADCVar);
 80025a2:	e7f5      	b.n	8002590 <main+0x1c>
 80025a4:	200001e8 	.word	0x200001e8

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b093      	sub	sp, #76	; 0x4c
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	2414      	movs	r4, #20
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	0018      	movs	r0, r3
 80025b4:	2334      	movs	r3, #52	; 0x34
 80025b6:	001a      	movs	r2, r3
 80025b8:	2100      	movs	r1, #0
 80025ba:	f003 fb85 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	0018      	movs	r0, r3
 80025c2:	2310      	movs	r3, #16
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f003 fb7e 	bl	8005cc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f001 fecb 	bl	800436c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2202      	movs	r2, #2
 80025da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	0052      	lsls	r2, r2, #1
 80025e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	0018      	movs	r0, r3
 80025fa:	f001 ff03 	bl	8004404 <HAL_RCC_OscConfig>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002602:	f000 f90d 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2100      	movs	r1, #0
 8002622:	0018      	movs	r0, r3
 8002624:	f002 f9fe 	bl	8004a24 <HAL_RCC_ClockConfig>
 8002628:	1e03      	subs	r3, r0, #0
 800262a:	d001      	beq.n	8002630 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800262c:	f000 f8f8 	bl	8002820 <Error_Handler>
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b013      	add	sp, #76	; 0x4c
 8002636:	bd90      	pop	{r4, r7, pc}

08002638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	230c      	movs	r3, #12
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f003 fb3e 	bl	8005cc8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <MX_ADC1_Init+0x108>)
 800264e:	4a3d      	ldr	r2, [pc, #244]	; (8002744 <MX_ADC1_Init+0x10c>)
 8002650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <MX_ADC1_Init+0x108>)
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	05d2      	lsls	r2, r2, #23
 8002658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <MX_ADC1_Init+0x108>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <MX_ADC1_Init+0x108>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <MX_ADC1_Init+0x108>)
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	0392      	lsls	r2, r2, #14
 800266c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <MX_ADC1_Init+0x108>)
 8002670:	2204      	movs	r2, #4
 8002672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <MX_ADC1_Init+0x108>)
 8002676:	2200      	movs	r2, #0
 8002678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <MX_ADC1_Init+0x108>)
 800267c:	2200      	movs	r2, #0
 800267e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <MX_ADC1_Init+0x108>)
 8002682:	2201      	movs	r2, #1
 8002684:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8002686:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <MX_ADC1_Init+0x108>)
 8002688:	2203      	movs	r2, #3
 800268a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <MX_ADC1_Init+0x108>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002692:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <MX_ADC1_Init+0x108>)
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002698:	4b29      	ldr	r3, [pc, #164]	; (8002740 <MX_ADC1_Init+0x108>)
 800269a:	222c      	movs	r2, #44	; 0x2c
 800269c:	2100      	movs	r1, #0
 800269e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <MX_ADC1_Init+0x108>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <MX_ADC1_Init+0x108>)
 80026a8:	2203      	movs	r2, #3
 80026aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <MX_ADC1_Init+0x108>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80026b2:	4b23      	ldr	r3, [pc, #140]	; (8002740 <MX_ADC1_Init+0x108>)
 80026b4:	223c      	movs	r2, #60	; 0x3c
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80026ba:	4b21      	ldr	r3, [pc, #132]	; (8002740 <MX_ADC1_Init+0x108>)
 80026bc:	2200      	movs	r2, #0
 80026be:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026c0:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_ADC1_Init+0x108>)
 80026c2:	0018      	movs	r0, r3
 80026c4:	f000 fc8c 	bl	8002fe0 <HAL_ADC_Init>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d001      	beq.n	80026d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80026cc:	f000 f8a8 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	2200      	movs	r2, #0
 80026da:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e2:	1d3a      	adds	r2, r7, #4
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <MX_ADC1_Init+0x108>)
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 febf 	bl	800346c <HAL_ADC_ConfigChannel>
 80026ee:	1e03      	subs	r3, r0, #0
 80026f0:	d001      	beq.n	80026f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80026f2:	f000 f895 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4a13      	ldr	r2, [pc, #76]	; (8002748 <MX_ADC1_Init+0x110>)
 80026fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2204      	movs	r2, #4
 8002700:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002702:	1d3a      	adds	r2, r7, #4
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <MX_ADC1_Init+0x108>)
 8002706:	0011      	movs	r1, r2
 8002708:	0018      	movs	r0, r3
 800270a:	f000 feaf 	bl	800346c <HAL_ADC_ConfigChannel>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002712:	f000 f885 	bl	8002820 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <MX_ADC1_Init+0x114>)
 800271a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2208      	movs	r2, #8
 8002720:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002722:	1d3a      	adds	r2, r7, #4
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <MX_ADC1_Init+0x108>)
 8002726:	0011      	movs	r1, r2
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fe9f 	bl	800346c <HAL_ADC_ConfigChannel>
 800272e:	1e03      	subs	r3, r0, #0
 8002730:	d001      	beq.n	8002736 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002732:	f000 f875 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b004      	add	sp, #16
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	20000094 	.word	0x20000094
 8002744:	40012400 	.word	0x40012400
 8002748:	04000002 	.word	0x04000002
 800274c:	08000004 	.word	0x08000004

08002750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <MX_USART2_UART_Init+0x64>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 800275c:	22e1      	movs	r2, #225	; 0xe1
 800275e:	0252      	lsls	r2, r2, #9
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <MX_USART2_UART_Init+0x60>)
 800279a:	0018      	movs	r0, r3
 800279c:	f002 fc20 	bl	8004fe0 <HAL_UART_Init>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d001      	beq.n	80027a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80027a4:	f000 f83c 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	20000154 	.word	0x20000154
 80027b4:	40004400 	.word	0x40004400

080027b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_DMA_Init+0x38>)
 80027c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_DMA_Init+0x38>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_DMA_Init+0x38>)
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2009      	movs	r0, #9
 80027dc:	f001 f9de 	bl	8003b9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027e0:	2009      	movs	r0, #9
 80027e2:	f001 f9f0 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40021000 	.word	0x40021000

080027f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_GPIO_Init+0x28>)
 80027fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <MX_GPIO_Init+0x28>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <MX_GPIO_Init+0x28>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40021000 	.word	0x40021000

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	e7fe      	b.n	8002828 <Error_Handler+0x8>
	...

0800282c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_MspInit+0x44>)
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_MspInit+0x44>)
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_MspInit+0x44>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <HAL_MspInit+0x44>)
 800284c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_MspInit+0x44>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0549      	lsls	r1, r1, #21
 8002854:	430a      	orrs	r2, r1
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_MspInit+0x44>)
 800285a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	055b      	lsls	r3, r3, #21
 8002860:	4013      	ands	r3, r2
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08b      	sub	sp, #44	; 0x2c
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	2414      	movs	r4, #20
 800287e:	193b      	adds	r3, r7, r4
 8002880:	0018      	movs	r0, r3
 8002882:	2314      	movs	r3, #20
 8002884:	001a      	movs	r2, r3
 8002886:	2100      	movs	r1, #0
 8002888:	f003 fa1e 	bl	8005cc8 <memset>
  if(hadc->Instance==ADC1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <HAL_ADC_MspInit+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d154      	bne.n	8002940 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002896:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_ADC_MspInit+0xd8>)
 8002898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289a:	4b2c      	ldr	r3, [pc, #176]	; (800294c <HAL_ADC_MspInit+0xd8>)
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	0349      	lsls	r1, r1, #13
 80028a0:	430a      	orrs	r2, r1
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_ADC_MspInit+0xd8>)
 80028a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b26      	ldr	r3, [pc, #152]	; (800294c <HAL_ADC_MspInit+0xd8>)
 80028b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_ADC_MspInit+0xd8>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_ADC_MspInit+0xd8>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	2201      	movs	r2, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80028ca:	193b      	adds	r3, r7, r4
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2203      	movs	r2, #3
 80028d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	193a      	adds	r2, r7, r4
 80028de:	23a0      	movs	r3, #160	; 0xa0
 80028e0:	05db      	lsls	r3, r3, #23
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f001 fbdd 	bl	80040a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_ADC_MspInit+0xe0>)
 80028ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 80028f2:	2205      	movs	r2, #5
 80028f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fc:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	0112      	lsls	r2, r2, #4
 8002916:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 8002926:	0018      	movs	r0, r3
 8002928:	f001 f96a 	bl	8003c00 <HAL_DMA_Init>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d001      	beq.n	8002934 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002930:	f7ff ff76 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_ADC_MspInit+0xdc>)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b00b      	add	sp, #44	; 0x2c
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	40012400 	.word	0x40012400
 800294c:	40021000 	.word	0x40021000
 8002950:	200000f8 	.word	0x200000f8
 8002954:	40020008 	.word	0x40020008

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b091      	sub	sp, #68	; 0x44
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	232c      	movs	r3, #44	; 0x2c
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	0018      	movs	r0, r3
 8002966:	2314      	movs	r3, #20
 8002968:	001a      	movs	r2, r3
 800296a:	2100      	movs	r1, #0
 800296c:	f003 f9ac 	bl	8005cc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	2410      	movs	r4, #16
 8002972:	193b      	adds	r3, r7, r4
 8002974:	0018      	movs	r0, r3
 8002976:	231c      	movs	r3, #28
 8002978:	001a      	movs	r2, r3
 800297a:	2100      	movs	r1, #0
 800297c:	f003 f9a4 	bl	8005cc8 <memset>
  if(huart->Instance==USART2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_UART_MspInit+0xb8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d13e      	bne.n	8002a08 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2202      	movs	r2, #2
 800298e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002996:	193b      	adds	r3, r7, r4
 8002998:	0018      	movs	r0, r3
 800299a:	f002 f9ed 	bl	8004d78 <HAL_RCCEx_PeriphCLKConfig>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029a2:	f7ff ff3d 	bl	8002820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	0289      	lsls	r1, r1, #10
 80029b0:	430a      	orrs	r2, r1
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_UART_MspInit+0xbc>)
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA14-BOOT0     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_14;
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_UART_MspInit+0xc0>)
 80029e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2202      	movs	r2, #2
 80029e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2201      	movs	r2, #1
 80029f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	187a      	adds	r2, r7, r1
 80029fc:	23a0      	movs	r3, #160	; 0xa0
 80029fe:	05db      	lsls	r3, r3, #23
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f001 fb4e 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b011      	add	sp, #68	; 0x44
 8002a0e:	bd90      	pop	{r4, r7, pc}
 8002a10:	40004400 	.word	0x40004400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	00004008 	.word	0x00004008

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <NMI_Handler+0x4>

08002a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <HardFault_Handler+0x4>

08002a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a40:	f000 f946 	bl	8002cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <DMA1_Channel1_IRQHandler+0x14>)
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 f9e4 	bl	8003e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	200000f8 	.word	0x200000f8

08002a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e00a      	b.n	8002a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a76:	e000      	b.n	8002a7a <_read+0x16>
 8002a78:	bf00      	nop
 8002a7a:	0001      	movs	r1, r0
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	b2ca      	uxtb	r2, r1
 8002a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf0      	blt.n	8002a76 <_read+0x12>
  }

  return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b006      	add	sp, #24
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e009      	b.n	8002ac4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff fbed 	bl	8002298 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf1      	blt.n	8002ab0 <_write+0x12>
  }
  return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_close>:

int _close(int file)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	425b      	negs	r3, r3
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	0192      	lsls	r2, r2, #6
 8002afa:	605a      	str	r2, [r3, #4]
  return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <_isatty>:

int _isatty(int file)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b0e:	2301      	movs	r3, #1
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	18d3      	adds	r3, r2, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f003 f908 	bl	8005d74 <__errno>
 8002b64:	0003      	movs	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	425b      	negs	r3, r3
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	18d2      	adds	r2, r2, r3
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b006      	add	sp, #24
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20009000 	.word	0x20009000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	20000454 	.word	0x20000454
 8002b98:	200005a8 	.word	0x200005a8

08002b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bac:	f7ff fff6 	bl	8002b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <LoopForever+0xe>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <LoopForever+0x16>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bd6:	f003 f8d3 	bl	8005d80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002bda:	f7ff fccb 	bl	8002574 <main>

08002bde <LoopForever>:

LoopForever:
  b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
  ldr   r0, =_estack
 8002be0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002bec:	08006b78 	.word	0x08006b78
  ldr r2, =_sbss
 8002bf0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002bf4:	200005a8 	.word	0x200005a8

08002bf8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC1_IRQHandler>
	...

08002bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_Init+0x3c>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_Init+0x3c>)
 8002c0e:	2180      	movs	r1, #128	; 0x80
 8002c10:	0049      	lsls	r1, r1, #1
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c16:	2003      	movs	r0, #3
 8002c18:	f000 f810 	bl	8002c3c <HAL_InitTick>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e001      	b.n	8002c2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002c28:	f7ff fe00 	bl	800282c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c44:	230f      	movs	r3, #15
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_InitTick+0x88>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02b      	beq.n	8002cac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002c54:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_InitTick+0x8c>)
 8002c56:	681c      	ldr	r4, [r3, #0]
 8002c58:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_InitTick+0x88>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	23fa      	movs	r3, #250	; 0xfa
 8002c60:	0098      	lsls	r0, r3, #2
 8002c62:	f7fd fa57 	bl	8000114 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	0019      	movs	r1, r3
 8002c6a:	0020      	movs	r0, r4
 8002c6c:	f7fd fa52 	bl	8000114 <__udivsi3>
 8002c70:	0003      	movs	r3, r0
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 ffb7 	bl	8003be6 <HAL_SYSTICK_Config>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d112      	bne.n	8002ca2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d80a      	bhi.n	8002c98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	2301      	movs	r3, #1
 8002c86:	425b      	negs	r3, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 ff86 	bl	8003b9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_InitTick+0x90>)
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	e00d      	b.n	8002cb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002c98:	230f      	movs	r3, #15
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	e008      	b.n	8002cb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e003      	b.n	8002cb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cac:	230f      	movs	r3, #15
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002cb4:	230f      	movs	r3, #15
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	781b      	ldrb	r3, [r3, #0]
}
 8002cba:	0018      	movs	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b005      	add	sp, #20
 8002cc0:	bd90      	pop	{r4, r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	20000004 	.word	0x20000004

08002cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_IncTick+0x1c>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	001a      	movs	r2, r3
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_IncTick+0x20>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	18d2      	adds	r2, r2, r3
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_IncTick+0x20>)
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	20000008 	.word	0x20000008
 8002cf0:	20000458 	.word	0x20000458

08002cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <HAL_GetTick+0x10>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	20000458 	.word	0x20000458

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff fff0 	bl	8002cf4 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	001a      	movs	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	f7ff ffe0 	bl	8002cf4 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	20000008 	.word	0x20000008

08002d50 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002d60:	401a      	ands	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	fe3fffff 	.word	0xfe3fffff

08002d78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	23e0      	movs	r3, #224	; 0xe0
 8002d86:	045b      	lsls	r3, r3, #17
 8002d88:	4013      	ands	r3, r2
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b002      	add	sp, #8
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	2104      	movs	r1, #4
 8002da6:	400a      	ands	r2, r1
 8002da8:	2107      	movs	r1, #7
 8002daa:	4091      	lsls	r1, r2
 8002dac:	000a      	movs	r2, r1
 8002dae:	43d2      	mvns	r2, r2
 8002db0:	401a      	ands	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2104      	movs	r1, #4
 8002db6:	400b      	ands	r3, r1
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4099      	lsls	r1, r3
 8002dbc:	000b      	movs	r3, r1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	2104      	movs	r1, #4
 8002dde:	400a      	ands	r2, r1
 8002de0:	2107      	movs	r1, #7
 8002de2:	4091      	lsls	r1, r2
 8002de4:	000a      	movs	r2, r1
 8002de6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2104      	movs	r1, #4
 8002dec:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002dee:	40da      	lsrs	r2, r3
 8002df0:	0013      	movs	r3, r2
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b002      	add	sp, #8
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	211f      	movs	r1, #31
 8002e30:	400a      	ands	r2, r1
 8002e32:	210f      	movs	r1, #15
 8002e34:	4091      	lsls	r1, r2
 8002e36:	000a      	movs	r2, r1
 8002e38:	43d2      	mvns	r2, r2
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0e9b      	lsrs	r3, r3, #26
 8002e40:	210f      	movs	r1, #15
 8002e42:	4019      	ands	r1, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	201f      	movs	r0, #31
 8002e48:	4003      	ands	r3, r0
 8002e4a:	4099      	lsls	r1, r3
 8002e4c:	000b      	movs	r3, r1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b004      	add	sp, #16
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	035b      	lsls	r3, r3, #13
 8002e6e:	0b5b      	lsrs	r3, r3, #13
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	0352      	lsls	r2, r2, #13
 8002e90:	0b52      	lsrs	r2, r2, #13
 8002e92:	43d2      	mvns	r2, r2
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	0212      	lsls	r2, r2, #8
 8002eb8:	43d2      	mvns	r2, r2
 8002eba:	401a      	ands	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	07ffff00 	.word	0x07ffff00

08002edc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <LL_ADC_EnableInternalRegulator+0x24>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	0552      	lsls	r2, r2, #21
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b002      	add	sp, #8
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	6fffffe8 	.word	0x6fffffe8

08002f04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	055b      	lsls	r3, r3, #21
 8002f14:	401a      	ands	r2, r3
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	055b      	lsls	r3, r3, #21
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d101      	bne.n	8002f22 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <LL_ADC_Enable+0x20>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	7fffffe8 	.word	0x7fffffe8

08002f50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <LL_ADC_Disable+0x20>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2202      	movs	r2, #2
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	7fffffe8 	.word	0x7fffffe8

08002f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <LL_ADC_IsEnabled+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_ADC_IsEnabled+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <LL_ADC_REG_StartConversion+0x20>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2204      	movs	r2, #4
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	7fffffe8 	.word	0x7fffffe8

08002fbc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d101      	bne.n	8002fd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe8:	231f      	movs	r3, #31
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e17f      	b.n	8003306 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff fc2f 	bl	8002874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2254      	movs	r2, #84	; 0x54
 8003020:	2100      	movs	r1, #0
 8003022:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff ff6b 	bl	8002f04 <LL_ADC_IsInternalRegulatorEnabled>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d115      	bne.n	800305e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff ff50 	bl	8002edc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303c:	4bb4      	ldr	r3, [pc, #720]	; (8003310 <HAL_ADC_Init+0x330>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	49b4      	ldr	r1, [pc, #720]	; (8003314 <HAL_ADC_Init+0x334>)
 8003042:	0018      	movs	r0, r3
 8003044:	f7fd f866 	bl	8000114 <__udivsi3>
 8003048:	0003      	movs	r3, r0
 800304a:	3301      	adds	r3, #1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003050:	e002      	b.n	8003058 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3b01      	subs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0018      	movs	r0, r3
 8003064:	f7ff ff4e 	bl	8002f04 <LL_ADC_IsInternalRegulatorEnabled>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d10f      	bne.n	800308c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	2210      	movs	r2, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	2201      	movs	r2, #1
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003084:	231f      	movs	r3, #31
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff ff93 	bl	8002fbc <LL_ADC_REG_IsConversionOngoing>
 8003096:	0003      	movs	r3, r0
 8003098:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	2210      	movs	r2, #16
 80030a0:	4013      	ands	r3, r2
 80030a2:	d000      	beq.n	80030a6 <HAL_ADC_Init+0xc6>
 80030a4:	e122      	b.n	80032ec <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d000      	beq.n	80030ae <HAL_ADC_Init+0xce>
 80030ac:	e11e      	b.n	80032ec <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a99      	ldr	r2, [pc, #612]	; (8003318 <HAL_ADC_Init+0x338>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	2202      	movs	r2, #2
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7ff ff56 	bl	8002f74 <LL_ADC_IsEnabled>
 80030c8:	1e03      	subs	r3, r0, #0
 80030ca:	d000      	beq.n	80030ce <HAL_ADC_Init+0xee>
 80030cc:	e0ad      	b.n	800322a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7e1b      	ldrb	r3, [r3, #24]
 80030d6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7e5b      	ldrb	r3, [r3, #25]
 80030de:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	7e9b      	ldrb	r3, [r3, #26]
 80030e6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030e8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <HAL_ADC_Init+0x118>
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	015b      	lsls	r3, r3, #5
 80030f6:	e000      	b.n	80030fa <HAL_ADC_Init+0x11a>
 80030f8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030fa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003100:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	da04      	bge.n	8003114 <HAL_ADC_Init+0x134>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	e001      	b.n	8003118 <HAL_ADC_Init+0x138>
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003118:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	5c5b      	ldrb	r3, [r3, r1]
 8003120:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003122:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d115      	bne.n	8003160 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7e9b      	ldrb	r3, [r3, #26]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0252      	lsls	r2, r2, #9
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e00b      	b.n	8003160 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	2220      	movs	r2, #32
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	2201      	movs	r2, #1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316c:	23e0      	movs	r3, #224	; 0xe0
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003176:	4313      	orrs	r3, r2
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_ADC_Init+0x33c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0f9b      	lsrs	r3, r3, #30
 800319a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	223c      	movs	r2, #60	; 0x3c
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d111      	bne.n	80031d6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0f9b      	lsrs	r3, r3, #30
 80031b8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031be:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80031c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80031ca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	2201      	movs	r2, #1
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_ADC_Init+0x340>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0019      	movs	r1, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	23c0      	movs	r3, #192	; 0xc0
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d018      	beq.n	800322a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	05db      	lsls	r3, r3, #23
 8003200:	429a      	cmp	r2, r3
 8003202:	d012      	beq.n	800322a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	429a      	cmp	r2, r3
 800320e:	d00c      	beq.n	800322a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003210:	4b44      	ldr	r3, [pc, #272]	; (8003324 <HAL_ADC_Init+0x344>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a44      	ldr	r2, [pc, #272]	; (8003328 <HAL_ADC_Init+0x348>)
 8003216:	4013      	ands	r3, r2
 8003218:	0019      	movs	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	23f0      	movs	r3, #240	; 0xf0
 8003220:	039b      	lsls	r3, r3, #14
 8003222:	401a      	ands	r2, r3
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_ADC_Init+0x344>)
 8003226:	430a      	orrs	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	001a      	movs	r2, r3
 8003234:	2100      	movs	r1, #0
 8003236:	f7ff fdac 	bl	8002d92 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	493a      	ldr	r1, [pc, #232]	; (800332c <HAL_ADC_Init+0x34c>)
 8003244:	001a      	movs	r2, r3
 8003246:	f7ff fda4 	bl	8002d92 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2110      	movs	r1, #16
 800325e:	4249      	negs	r1, r1
 8003260:	430a      	orrs	r2, r1
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
 8003264:	e018      	b.n	8003298 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	039b      	lsls	r3, r3, #14
 800326e:	429a      	cmp	r2, r3
 8003270:	d112      	bne.n	8003298 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	3b01      	subs	r3, #1
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	221c      	movs	r2, #28
 8003282:	4013      	ands	r3, r2
 8003284:	2210      	movs	r2, #16
 8003286:	4252      	negs	r2, r2
 8003288:	409a      	lsls	r2, r3
 800328a:	0011      	movs	r1, r2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff fd94 	bl	8002dcc <LL_ADC_GetSamplingTimeCommonChannels>
 80032a4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	2203      	movs	r2, #3
 80032ba:	4393      	bics	r3, r2
 80032bc:	2201      	movs	r2, #1
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032c4:	e01c      	b.n	8003300 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	2212      	movs	r2, #18
 80032cc:	4393      	bics	r3, r2
 80032ce:	2210      	movs	r2, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2201      	movs	r2, #1
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80032e2:	231f      	movs	r3, #31
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032ea:	e009      	b.n	8003300 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	2210      	movs	r2, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032f8:	231f      	movs	r3, #31
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003300:	231f      	movs	r3, #31
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	781b      	ldrb	r3, [r3, #0]
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b008      	add	sp, #32
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000000 	.word	0x20000000
 8003314:	00030d40 	.word	0x00030d40
 8003318:	fffffefd 	.word	0xfffffefd
 800331c:	fffe0201 	.word	0xfffe0201
 8003320:	1ffffc02 	.word	0x1ffffc02
 8003324:	40012708 	.word	0x40012708
 8003328:	ffc3ffff 	.word	0xffc3ffff
 800332c:	07ffff04 	.word	0x07ffff04

08003330 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fe3b 	bl	8002fbc <LL_ADC_REG_IsConversionOngoing>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d16c      	bne.n	8003424 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2254      	movs	r2, #84	; 0x54
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_ADC_Start_DMA+0x28>
 8003354:	2302      	movs	r3, #2
 8003356:	e06c      	b.n	8003432 <HAL_ADC_Start_DMA+0x102>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2254      	movs	r2, #84	; 0x54
 800335c:	2101      	movs	r1, #1
 800335e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d113      	bne.n	8003394 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff fdff 	bl	8002f74 <LL_ADC_IsEnabled>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d004      	beq.n	8003384 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff fde6 	bl	8002f50 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2101      	movs	r1, #1
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003394:	2517      	movs	r5, #23
 8003396:	197c      	adds	r4, r7, r5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	0018      	movs	r0, r3
 800339c:	f000 fa3e 	bl	800381c <ADC_Enable>
 80033a0:	0003      	movs	r3, r0
 80033a2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033a4:	002c      	movs	r4, r5
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d13e      	bne.n	800342c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a22      	ldr	r2, [pc, #136]	; (800343c <HAL_ADC_Start_DMA+0x10c>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	0052      	lsls	r2, r2, #1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ca:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <HAL_ADC_Start_DMA+0x110>)
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d2:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <HAL_ADC_Start_DMA+0x114>)
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_ADC_Start_DMA+0x118>)
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	221c      	movs	r2, #28
 80033e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2254      	movs	r2, #84	; 0x54
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2110      	movs	r1, #16
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3340      	adds	r3, #64	; 0x40
 8003408:	0019      	movs	r1, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	193c      	adds	r4, r7, r4
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f000 fc80 	bl	8003d14 <HAL_DMA_Start_IT>
 8003414:	0003      	movs	r3, r0
 8003416:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0018      	movs	r0, r3
 800341e:	f7ff fdbb 	bl	8002f98 <LL_ADC_REG_StartConversion>
 8003422:	e003      	b.n	800342c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003424:	2317      	movs	r3, #23
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800342c:	2317      	movs	r3, #23
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	781b      	ldrb	r3, [r3, #0]
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b006      	add	sp, #24
 8003438:	bdb0      	pop	{r4, r5, r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	fffff0fe 	.word	0xfffff0fe
 8003440:	08003929 	.word	0x08003929
 8003444:	080039f1 	.word	0x080039f1
 8003448:	08003a0f 	.word	0x08003a0f

0800344c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003476:	2317      	movs	r3, #23
 8003478:	18fb      	adds	r3, r7, r3
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2254      	movs	r2, #84	; 0x54
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x24>
 800348c:	2302      	movs	r3, #2
 800348e:	e1c0      	b.n	8003812 <HAL_ADC_ConfigChannel+0x3a6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2254      	movs	r2, #84	; 0x54
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fd8d 	bl	8002fbc <LL_ADC_REG_IsConversionOngoing>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d000      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x3c>
 80034a6:	e1a3      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d100      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x46>
 80034b0:	e143      	b.n	800373a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034c2:	4ac1      	ldr	r2, [pc, #772]	; (80037c8 <HAL_ADC_ConfigChannel+0x35c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0019      	movs	r1, r3
 80034d2:	0010      	movs	r0, r2
 80034d4:	f7ff fcc2 	bl	8002e5c <LL_ADC_REG_SetSequencerChAdd>
 80034d8:	e0c9      	b.n	800366e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	211f      	movs	r1, #31
 80034e4:	400b      	ands	r3, r1
 80034e6:	210f      	movs	r1, #15
 80034e8:	4099      	lsls	r1, r3
 80034ea:	000b      	movs	r3, r1
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	035b      	lsls	r3, r3, #13
 80034f8:	0b5b      	lsrs	r3, r3, #13
 80034fa:	d105      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x9c>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0e9b      	lsrs	r3, r3, #26
 8003502:	221f      	movs	r2, #31
 8003504:	4013      	ands	r3, r2
 8003506:	e098      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2201      	movs	r2, #1
 800350e:	4013      	ands	r3, r2
 8003510:	d000      	beq.n	8003514 <HAL_ADC_ConfigChannel+0xa8>
 8003512:	e091      	b.n	8003638 <HAL_ADC_ConfigChannel+0x1cc>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d000      	beq.n	8003520 <HAL_ADC_ConfigChannel+0xb4>
 800351e:	e089      	b.n	8003634 <HAL_ADC_ConfigChannel+0x1c8>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2204      	movs	r2, #4
 8003526:	4013      	ands	r3, r2
 8003528:	d000      	beq.n	800352c <HAL_ADC_ConfigChannel+0xc0>
 800352a:	e081      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1c4>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	4013      	ands	r3, r2
 8003534:	d000      	beq.n	8003538 <HAL_ADC_ConfigChannel+0xcc>
 8003536:	e079      	b.n	800362c <HAL_ADC_ConfigChannel+0x1c0>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d000      	beq.n	8003544 <HAL_ADC_ConfigChannel+0xd8>
 8003542:	e071      	b.n	8003628 <HAL_ADC_ConfigChannel+0x1bc>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	4013      	ands	r3, r2
 800354c:	d000      	beq.n	8003550 <HAL_ADC_ConfigChannel+0xe4>
 800354e:	e069      	b.n	8003624 <HAL_ADC_ConfigChannel+0x1b8>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	d000      	beq.n	800355c <HAL_ADC_ConfigChannel+0xf0>
 800355a:	e061      	b.n	8003620 <HAL_ADC_ConfigChannel+0x1b4>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	4013      	ands	r3, r2
 8003564:	d000      	beq.n	8003568 <HAL_ADC_ConfigChannel+0xfc>
 8003566:	e059      	b.n	800361c <HAL_ADC_ConfigChannel+0x1b0>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4013      	ands	r3, r2
 8003572:	d151      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1ac>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4013      	ands	r3, r2
 800357e:	d149      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1a8>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4013      	ands	r3, r2
 800358a:	d141      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1a4>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	4013      	ands	r3, r2
 8003596:	d139      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1a0>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	015b      	lsls	r3, r3, #5
 80035a0:	4013      	ands	r3, r2
 80035a2:	d131      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x19c>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	019b      	lsls	r3, r3, #6
 80035ac:	4013      	ands	r3, r2
 80035ae:	d129      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x198>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	01db      	lsls	r3, r3, #7
 80035b8:	4013      	ands	r3, r2
 80035ba:	d121      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x194>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	4013      	ands	r3, r2
 80035c6:	d119      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x190>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	025b      	lsls	r3, r3, #9
 80035d0:	4013      	ands	r3, r2
 80035d2:	d111      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x18c>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	4013      	ands	r3, r2
 80035de:	d109      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x188>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	02db      	lsls	r3, r3, #11
 80035e8:	4013      	ands	r3, r2
 80035ea:	d001      	beq.n	80035f0 <HAL_ADC_ConfigChannel+0x184>
 80035ec:	2312      	movs	r3, #18
 80035ee:	e024      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 80035f0:	2300      	movs	r3, #0
 80035f2:	e022      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 80035f4:	2311      	movs	r3, #17
 80035f6:	e020      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 80035f8:	2310      	movs	r3, #16
 80035fa:	e01e      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 80035fc:	230f      	movs	r3, #15
 80035fe:	e01c      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003600:	230e      	movs	r3, #14
 8003602:	e01a      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003604:	230d      	movs	r3, #13
 8003606:	e018      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003608:	230c      	movs	r3, #12
 800360a:	e016      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 800360c:	230b      	movs	r3, #11
 800360e:	e014      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003610:	230a      	movs	r3, #10
 8003612:	e012      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003614:	2309      	movs	r3, #9
 8003616:	e010      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003618:	2308      	movs	r3, #8
 800361a:	e00e      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 800361c:	2307      	movs	r3, #7
 800361e:	e00c      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003620:	2306      	movs	r3, #6
 8003622:	e00a      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003624:	2305      	movs	r3, #5
 8003626:	e008      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003628:	2304      	movs	r3, #4
 800362a:	e006      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 800362c:	2303      	movs	r3, #3
 800362e:	e004      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003630:	2302      	movs	r3, #2
 8003632:	e002      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_ADC_ConfigChannel+0x1ce>
 8003638:	2300      	movs	r3, #0
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	6852      	ldr	r2, [r2, #4]
 800363e:	201f      	movs	r0, #31
 8003640:	4002      	ands	r2, r0
 8003642:	4093      	lsls	r3, r2
 8003644:	000a      	movs	r2, r1
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	429a      	cmp	r2, r3
 800365a:	d808      	bhi.n	800366e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	001a      	movs	r2, r3
 800366a:	f7ff fbd7 	bl	8002e1c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	001a      	movs	r2, r3
 800367c:	f7ff fc12 	bl	8002ea4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	db00      	blt.n	800368a <HAL_ADC_ConfigChannel+0x21e>
 8003688:	e0bc      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800368a:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff fb73 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8003692:	0003      	movs	r3, r0
 8003694:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a4d      	ldr	r2, [pc, #308]	; (80037d0 <HAL_ADC_ConfigChannel+0x364>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d122      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036a8:	d11d      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	0412      	lsls	r2, r2, #16
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a46      	ldr	r2, [pc, #280]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 80036b4:	0019      	movs	r1, r3
 80036b6:	0010      	movs	r0, r2
 80036b8:	f7ff fb4a 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036bc:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <HAL_ADC_ConfigChannel+0x368>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4945      	ldr	r1, [pc, #276]	; (80037d8 <HAL_ADC_ConfigChannel+0x36c>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fc fd26 	bl	8000114 <__udivsi3>
 80036c8:	0003      	movs	r3, r0
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	0013      	movs	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036d6:	e002      	b.n	80036de <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f9      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036e4:	e08e      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <HAL_ADC_ConfigChannel+0x370>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10e      	bne.n	800370e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	045b      	lsls	r3, r3, #17
 80036f6:	4013      	ands	r3, r2
 80036f8:	d109      	bne.n	800370e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	0452      	lsls	r2, r2, #17
 8003700:	4313      	orrs	r3, r2
 8003702:	4a32      	ldr	r2, [pc, #200]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 8003704:	0019      	movs	r1, r3
 8003706:	0010      	movs	r0, r2
 8003708:	f7ff fb22 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
 800370c:	e07a      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a33      	ldr	r2, [pc, #204]	; (80037e0 <HAL_ADC_ConfigChannel+0x374>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d000      	beq.n	800371a <HAL_ADC_ConfigChannel+0x2ae>
 8003718:	e074      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	03db      	lsls	r3, r3, #15
 8003720:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003722:	d000      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x2ba>
 8003724:	e06e      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	03d2      	lsls	r2, r2, #15
 800372c:	4313      	orrs	r3, r2
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 8003730:	0019      	movs	r1, r3
 8003732:	0010      	movs	r0, r2
 8003734:	f7ff fb0c 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
 8003738:	e064      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	429a      	cmp	r2, r3
 8003744:	d004      	beq.n	8003750 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800374a:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_ADC_ConfigChannel+0x35c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d107      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0019      	movs	r1, r3
 800375a:	0010      	movs	r0, r2
 800375c:	f7ff fb8f 	bl	8002e7e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	da4d      	bge.n	8003804 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 800376a:	0018      	movs	r0, r3
 800376c:	f7ff fb04 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8003770:	0003      	movs	r3, r0
 8003772:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_ADC_ConfigChannel+0x364>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_ADC_ConfigChannel+0x378>)
 8003782:	4013      	ands	r3, r2
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 8003786:	0019      	movs	r1, r3
 8003788:	0010      	movs	r0, r2
 800378a:	f7ff fae1 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
 800378e:	e039      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_ADC_ConfigChannel+0x370>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_ADC_ConfigChannel+0x37c>)
 800379e:	4013      	ands	r3, r2
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f7ff fad3 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
 80037aa:	e02b      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <HAL_ADC_ConfigChannel+0x374>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d126      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <HAL_ADC_ConfigChannel+0x380>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_ADC_ConfigChannel+0x360>)
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f7ff fac5 	bl	8002d50 <LL_ADC_SetCommonPathInternalCh>
 80037c6:	e01d      	b.n	8003804 <HAL_ADC_ConfigChannel+0x398>
 80037c8:	80000004 	.word	0x80000004
 80037cc:	40012708 	.word	0x40012708
 80037d0:	b0001000 	.word	0xb0001000
 80037d4:	20000000 	.word	0x20000000
 80037d8:	00030d40 	.word	0x00030d40
 80037dc:	b8004000 	.word	0xb8004000
 80037e0:	b4002000 	.word	0xb4002000
 80037e4:	ff7fffff 	.word	0xff7fffff
 80037e8:	feffffff 	.word	0xfeffffff
 80037ec:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	2220      	movs	r2, #32
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037fc:	2317      	movs	r3, #23
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2254      	movs	r2, #84	; 0x54
 8003808:	2100      	movs	r1, #0
 800380a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800380c:	2317      	movs	r3, #23
 800380e:	18fb      	adds	r3, r7, r3
 8003810:	781b      	ldrb	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b006      	add	sp, #24
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)

0800381c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff fba1 	bl	8002f74 <LL_ADC_IsEnabled>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d000      	beq.n	8003838 <ADC_Enable+0x1c>
 8003836:	e069      	b.n	800390c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4a36      	ldr	r2, [pc, #216]	; (8003918 <ADC_Enable+0xfc>)
 8003840:	4013      	ands	r3, r2
 8003842:	d00d      	beq.n	8003860 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	2210      	movs	r2, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	2201      	movs	r2, #1
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e056      	b.n	800390e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fb61 	bl	8002f2c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800386a:	4b2c      	ldr	r3, [pc, #176]	; (800391c <ADC_Enable+0x100>)
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff fa83 	bl	8002d78 <LL_ADC_GetCommonPathInternalCh>
 8003872:	0002      	movs	r2, r0
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	4013      	ands	r3, r2
 800387a:	d00f      	beq.n	800389c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <ADC_Enable+0x104>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4928      	ldr	r1, [pc, #160]	; (8003924 <ADC_Enable+0x108>)
 8003882:	0018      	movs	r0, r3
 8003884:	f7fc fc46 	bl	8000114 <__udivsi3>
 8003888:	0003      	movs	r3, r0
 800388a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800388c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800388e:	e002      	b.n	8003896 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	7e5b      	ldrb	r3, [r3, #25]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d033      	beq.n	800390c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80038a4:	f7ff fa26 	bl	8002cf4 <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ac:	e027      	b.n	80038fe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff fb5e 	bl	8002f74 <LL_ADC_IsEnabled>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d104      	bne.n	80038c6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7ff fb33 	bl	8002f2c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038c6:	f7ff fa15 	bl	8002cf4 <HAL_GetTick>
 80038ca:	0002      	movs	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d914      	bls.n	80038fe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	4013      	ands	r3, r2
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d00d      	beq.n	80038fe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	2210      	movs	r2, #16
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	2201      	movs	r2, #1
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e007      	b.n	800390e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4013      	ands	r3, r2
 8003908:	2b01      	cmp	r3, #1
 800390a:	d1d0      	bne.n	80038ae <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	80000017 	.word	0x80000017
 800391c:	40012708 	.word	0x40012708
 8003920:	20000000 	.word	0x20000000
 8003924:	00030d40 	.word	0x00030d40

08003928 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	2250      	movs	r2, #80	; 0x50
 800393c:	4013      	ands	r3, r2
 800393e:	d141      	bne.n	80039c4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	2280      	movs	r2, #128	; 0x80
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	431a      	orrs	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fa51 	bl	8002dfa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d02e      	beq.n	80039ba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	7e9b      	ldrb	r3, [r3, #26]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d12a      	bne.n	80039ba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	4013      	ands	r3, r2
 800396e:	2b08      	cmp	r3, #8
 8003970:	d123      	bne.n	80039ba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7ff fb20 	bl	8002fbc <LL_ADC_REG_IsConversionOngoing>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d110      	bne.n	80039a2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	210c      	movs	r1, #12
 800398c:	438a      	bics	r2, r1
 800398e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <ADC_DMAConvCplt+0xc4>)
 8003996:	4013      	ands	r3, r2
 8003998:	2201      	movs	r2, #1
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	659a      	str	r2, [r3, #88]	; 0x58
 80039a0:	e00b      	b.n	80039ba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	2220      	movs	r2, #32
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2201      	movs	r2, #1
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7fe fdc5 	bl	800254c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039c2:	e00f      	b.n	80039e4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	2210      	movs	r2, #16
 80039ca:	4013      	ands	r3, r2
 80039cc:	d004      	beq.n	80039d8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff fd43 	bl	800345c <HAL_ADC_ErrorCallback>
}
 80039d6:	e005      	b.n	80039e4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	0010      	movs	r0, r2
 80039e2:	4798      	blx	r3
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b004      	add	sp, #16
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	fffffefe 	.word	0xfffffefe

080039f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fd23 	bl	800344c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	2240      	movs	r2, #64	; 0x40
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff fd10 	bl	800345c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b7f      	cmp	r3, #127	; 0x7f
 8003a56:	d809      	bhi.n	8003a6c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	231f      	movs	r3, #31
 8003a60:	401a      	ands	r2, r3
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_EnableIRQ+0x30>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	4091      	lsls	r1, r2
 8003a68:	000a      	movs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	0002      	movs	r2, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8c:	d828      	bhi.n	8003ae0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a8e:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <__NVIC_SetPriority+0xd4>)
 8003a90:	1dfb      	adds	r3, r7, #7
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	33c0      	adds	r3, #192	; 0xc0
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	589b      	ldr	r3, [r3, r2]
 8003a9e:	1dfa      	adds	r2, r7, #7
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	00d2      	lsls	r2, r2, #3
 8003aaa:	21ff      	movs	r1, #255	; 0xff
 8003aac:	4091      	lsls	r1, r2
 8003aae:	000a      	movs	r2, r1
 8003ab0:	43d2      	mvns	r2, r2
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	019b      	lsls	r3, r3, #6
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	401a      	ands	r2, r3
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	4003      	ands	r3, r0
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003acc:	481f      	ldr	r0, [pc, #124]	; (8003b4c <__NVIC_SetPriority+0xd4>)
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	33c0      	adds	r3, #192	; 0xc0
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ade:	e031      	b.n	8003b44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <__NVIC_SetPriority+0xd8>)
 8003ae2:	1dfb      	adds	r3, r7, #7
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	230f      	movs	r3, #15
 8003aea:	400b      	ands	r3, r1
 8003aec:	3b08      	subs	r3, #8
 8003aee:	089b      	lsrs	r3, r3, #2
 8003af0:	3306      	adds	r3, #6
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	3304      	adds	r3, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1dfa      	adds	r2, r7, #7
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	0011      	movs	r1, r2
 8003b00:	2203      	movs	r2, #3
 8003b02:	400a      	ands	r2, r1
 8003b04:	00d2      	lsls	r2, r2, #3
 8003b06:	21ff      	movs	r1, #255	; 0xff
 8003b08:	4091      	lsls	r1, r2
 8003b0a:	000a      	movs	r2, r1
 8003b0c:	43d2      	mvns	r2, r2
 8003b0e:	401a      	ands	r2, r3
 8003b10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	401a      	ands	r2, r3
 8003b1a:	1dfb      	adds	r3, r7, #7
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	0018      	movs	r0, r3
 8003b20:	2303      	movs	r3, #3
 8003b22:	4003      	ands	r3, r0
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b28:	4809      	ldr	r0, [pc, #36]	; (8003b50 <__NVIC_SetPriority+0xd8>)
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	001c      	movs	r4, r3
 8003b30:	230f      	movs	r3, #15
 8003b32:	4023      	ands	r3, r4
 8003b34:	3b08      	subs	r3, #8
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	3306      	adds	r3, #6
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	18c3      	adds	r3, r0, r3
 8003b40:	3304      	adds	r3, #4
 8003b42:	601a      	str	r2, [r3, #0]
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b003      	add	sp, #12
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	e000e100 	.word	0xe000e100
 8003b50:	e000ed00 	.word	0xe000ed00

08003b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	045b      	lsls	r3, r3, #17
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d301      	bcc.n	8003b6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e010      	b.n	8003b8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <SysTick_Config+0x44>)
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	3a01      	subs	r2, #1
 8003b72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b74:	2301      	movs	r3, #1
 8003b76:	425b      	negs	r3, r3
 8003b78:	2103      	movs	r1, #3
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff ff7c 	bl	8003a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <SysTick_Config+0x44>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SysTick_Config+0x44>)
 8003b88:	2207      	movs	r2, #7
 8003b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b002      	add	sp, #8
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	210f      	movs	r1, #15
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff ff5d 	bl	8003a78 <__NVIC_SetPriority>
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b004      	add	sp, #16
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	0002      	movs	r2, r0
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff ff33 	bl	8003a44 <__NVIC_EnableIRQ>
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff ffaf 	bl	8003b54 <SysTick_Config>
 8003bf6:	0003      	movs	r3, r0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e077      	b.n	8003d02 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3d      	ldr	r2, [pc, #244]	; (8003d0c <HAL_DMA_Init+0x10c>)
 8003c18:	4694      	mov	ip, r2
 8003c1a:	4463      	add	r3, ip
 8003c1c:	2114      	movs	r1, #20
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7fc fa78 	bl	8000114 <__udivsi3>
 8003c24:	0003      	movs	r3, r0
 8003c26:	009a      	lsls	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2225      	movs	r2, #37	; 0x25
 8003c30:	2102      	movs	r1, #2
 8003c32:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4934      	ldr	r1, [pc, #208]	; (8003d10 <HAL_DMA_Init+0x110>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f9c1 	bl	8004004 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	2380      	movs	r3, #128	; 0x80
 8003c88:	01db      	lsls	r3, r3, #7
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d102      	bne.n	8003c94 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	213f      	movs	r1, #63	; 0x3f
 8003c9e:	400a      	ands	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003caa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <HAL_DMA_Init+0xd8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d80d      	bhi.n	8003cd8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 f9cc 	bl	800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e008      	b.n	8003cea <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2225      	movs	r2, #37	; 0x25
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2224      	movs	r2, #36	; 0x24
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	bffdfff8 	.word	0xbffdfff8
 8003d10:	ffff800f 	.word	0xffff800f

08003d14 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d22:	2317      	movs	r3, #23
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2224      	movs	r2, #36	; 0x24
 8003d2e:	5c9b      	ldrb	r3, [r3, r2]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Start_IT+0x24>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e06f      	b.n	8003e18 <HAL_DMA_Start_IT+0x104>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2224      	movs	r2, #36	; 0x24
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2225      	movs	r2, #37	; 0x25
 8003d44:	5c9b      	ldrb	r3, [r3, r2]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d157      	bne.n	8003dfc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2225      	movs	r2, #37	; 0x25
 8003d50:	2102      	movs	r1, #2
 8003d52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	438a      	bics	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f907 	bl	8003f84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	210e      	movs	r1, #14
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e00f      	b.n	8003db0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	210a      	movs	r1, #10
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	025b      	lsls	r3, r3, #9
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d008      	beq.n	8003dd0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0049      	lsls	r1, r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	0049      	lsls	r1, r1, #1
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e00a      	b.n	8003e12 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2280      	movs	r2, #128	; 0x80
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003e0a:	2317      	movs	r3, #23
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e12:	2317      	movs	r3, #23
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	781b      	ldrb	r3, [r3, #0]
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003e28:	4b55      	ldr	r3, [pc, #340]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	221c      	movs	r2, #28
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2204      	movs	r2, #4
 8003e40:	409a      	lsls	r2, r3
 8003e42:	0013      	movs	r3, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4013      	ands	r3, r2
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x7a>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d023      	beq.n	8003e9a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d107      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2104      	movs	r1, #4
 8003e6a:	438a      	bics	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003e6e:	4b44      	ldr	r3, [pc, #272]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	221c      	movs	r2, #28
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <HAL_DMA_IRQHandler+0x6e>
 8003e8c:	e073      	b.n	8003f76 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003e98:	e06d      	b.n	8003f76 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	221c      	movs	r2, #28
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d02e      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xec>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d02a      	beq.n	8003f0c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d10b      	bne.n	8003eda <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	210a      	movs	r1, #10
 8003ece:	438a      	bics	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2225      	movs	r2, #37	; 0x25
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003eda:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	221c      	movs	r2, #28
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	0010      	movs	r0, r2
 8003f08:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003f0a:	e034      	b.n	8003f76 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	221c      	movs	r2, #28
 8003f12:	4013      	ands	r3, r2
 8003f14:	2208      	movs	r2, #8
 8003f16:	409a      	lsls	r2, r3
 8003f18:	0013      	movs	r3, r2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d02b      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x158>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2208      	movs	r2, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d027      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	210e      	movs	r1, #14
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	221c      	movs	r2, #28
 8003f42:	4013      	ands	r3, r2
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <HAL_DMA_IRQHandler+0x160>)
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2225      	movs	r2, #37	; 0x25
 8003f58:	2101      	movs	r1, #1
 8003f5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	0010      	movs	r0, r2
 8003f74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	46c0      	nop			; (mov r8, r8)
}
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b004      	add	sp, #16
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40020000 	.word	0x40020000

08003f84 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <DMA_SetConfig+0x7c>)
 8003fb0:	6859      	ldr	r1, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	221c      	movs	r2, #28
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2201      	movs	r2, #1
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <DMA_SetConfig+0x7c>)
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d108      	bne.n	8003fe6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fe4:	e007      	b.n	8003ff6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]
}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	40020000 	.word	0x40020000

08004004 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	089b      	lsrs	r3, r3, #2
 8004012:	4a10      	ldr	r2, [pc, #64]	; (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004014:	4694      	mov	ip, r2
 8004016:	4463      	add	r3, ip
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	001a      	movs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	001a      	movs	r2, r3
 8004026:	23ff      	movs	r3, #255	; 0xff
 8004028:	4013      	ands	r3, r2
 800402a:	3b08      	subs	r3, #8
 800402c:	2114      	movs	r1, #20
 800402e:	0018      	movs	r0, r3
 8004030:	f7fc f870 	bl	8000114 <__udivsi3>
 8004034:	0003      	movs	r3, r0
 8004036:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800403c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	221f      	movs	r2, #31
 8004042:	4013      	ands	r3, r2
 8004044:	2201      	movs	r2, #1
 8004046:	409a      	lsls	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b004      	add	sp, #16
 8004052:	bd80      	pop	{r7, pc}
 8004054:	10008200 	.word	0x10008200
 8004058:	40020880 	.word	0x40020880

0800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	223f      	movs	r2, #63	; 0x3f
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004072:	4694      	mov	ip, r2
 8004074:	4463      	add	r3, ip
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	001a      	movs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a07      	ldr	r2, [pc, #28]	; (80040a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004082:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	2203      	movs	r2, #3
 800408a:	4013      	ands	r3, r2
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b004      	add	sp, #16
 800409a:	bd80      	pop	{r7, pc}
 800409c:	1000823f 	.word	0x1000823f
 80040a0:	40020940 	.word	0x40020940

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e147      	b.n	8004344 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4091      	lsls	r1, r2
 80040be:	000a      	movs	r2, r1
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d100      	bne.n	80040cc <HAL_GPIO_Init+0x28>
 80040ca:	e138      	b.n	800433e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	409a      	lsls	r2, r3
 80040f2:	0013      	movs	r3, r2
 80040f4:	43da      	mvns	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	409a      	lsls	r2, r3
 8004106:	0013      	movs	r3, r2
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	43da      	mvns	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	2201      	movs	r2, #1
 8004132:	401a      	ands	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	409a      	lsls	r2, r3
 8004138:	0013      	movs	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2203      	movs	r2, #3
 800414c:	4013      	ands	r3, r2
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2203      	movs	r2, #3
 8004188:	4013      	ands	r3, r2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	58d3      	ldr	r3, [r2, r3]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2207      	movs	r2, #7
 80041a0:	4013      	ands	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	409a      	lsls	r2, r3
 80041a8:	0013      	movs	r3, r2
 80041aa:	43da      	mvns	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2107      	movs	r1, #7
 80041ba:	400b      	ands	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	409a      	lsls	r2, r3
 80041c0:	0013      	movs	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	0092      	lsls	r2, r2, #2
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2203      	movs	r2, #3
 80041f4:	401a      	ands	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	23c0      	movs	r3, #192	; 0xc0
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	4013      	ands	r3, r2
 8004214:	d100      	bne.n	8004218 <HAL_GPIO_Init+0x174>
 8004216:	e092      	b.n	800433e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004218:	4a50      	ldr	r2, [pc, #320]	; (800435c <HAL_GPIO_Init+0x2b8>)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3318      	adds	r3, #24
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	589b      	ldr	r3, [r3, r2]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2203      	movs	r2, #3
 800422a:	4013      	ands	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	220f      	movs	r2, #15
 8004230:	409a      	lsls	r2, r3
 8004232:	0013      	movs	r3, r2
 8004234:	43da      	mvns	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	23a0      	movs	r3, #160	; 0xa0
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	429a      	cmp	r2, r3
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0x1ca>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a45      	ldr	r2, [pc, #276]	; (8004360 <HAL_GPIO_Init+0x2bc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00d      	beq.n	800426a <HAL_GPIO_Init+0x1c6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a44      	ldr	r2, [pc, #272]	; (8004364 <HAL_GPIO_Init+0x2c0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x1c2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a43      	ldr	r2, [pc, #268]	; (8004368 <HAL_GPIO_Init+0x2c4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d101      	bne.n	8004262 <HAL_GPIO_Init+0x1be>
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <HAL_GPIO_Init+0x1cc>
 8004262:	2305      	movs	r3, #5
 8004264:	e004      	b.n	8004270 <HAL_GPIO_Init+0x1cc>
 8004266:	2302      	movs	r3, #2
 8004268:	e002      	b.n	8004270 <HAL_GPIO_Init+0x1cc>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <HAL_GPIO_Init+0x1cc>
 800426e:	2300      	movs	r3, #0
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	2103      	movs	r1, #3
 8004274:	400a      	ands	r2, r1
 8004276:	00d2      	lsls	r2, r2, #3
 8004278:	4093      	lsls	r3, r2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004280:	4936      	ldr	r1, [pc, #216]	; (800435c <HAL_GPIO_Init+0x2b8>)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	3318      	adds	r3, #24
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800428e:	4b33      	ldr	r3, [pc, #204]	; (800435c <HAL_GPIO_Init+0x2b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	43da      	mvns	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	035b      	lsls	r3, r3, #13
 80042a6:	4013      	ands	r3, r2
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_GPIO_Init+0x2b8>)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042b8:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_GPIO_Init+0x2b8>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4013      	ands	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	039b      	lsls	r3, r3, #14
 80042d0:	4013      	ands	r3, r2
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042dc:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_GPIO_Init+0x2b8>)
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042e2:	4a1e      	ldr	r2, [pc, #120]	; (800435c <HAL_GPIO_Init+0x2b8>)
 80042e4:	2384      	movs	r3, #132	; 0x84
 80042e6:	58d3      	ldr	r3, [r2, r3]
 80042e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	029b      	lsls	r3, r3, #10
 80042fc:	4013      	ands	r3, r2
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004308:	4914      	ldr	r1, [pc, #80]	; (800435c <HAL_GPIO_Init+0x2b8>)
 800430a:	2284      	movs	r2, #132	; 0x84
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004310:	4a12      	ldr	r2, [pc, #72]	; (800435c <HAL_GPIO_Init+0x2b8>)
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	58d3      	ldr	r3, [r2, r3]
 8004316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	43da      	mvns	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	025b      	lsls	r3, r3, #9
 800432a:	4013      	ands	r3, r2
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004336:	4909      	ldr	r1, [pc, #36]	; (800435c <HAL_GPIO_Init+0x2b8>)
 8004338:	2280      	movs	r2, #128	; 0x80
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	40da      	lsrs	r2, r3
 800434c:	1e13      	subs	r3, r2, #0
 800434e:	d000      	beq.n	8004352 <HAL_GPIO_Init+0x2ae>
 8004350:	e6b0      	b.n	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	b006      	add	sp, #24
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40021800 	.word	0x40021800
 8004360:	50000400 	.word	0x50000400
 8004364:	50000800 	.word	0x50000800
 8004368:	50000c00 	.word	0x50000c00

0800436c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800437a:	4013      	ands	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	4b17      	ldr	r3, [pc, #92]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	429a      	cmp	r2, r3
 800438e:	d11f      	bne.n	80043d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004390:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	0013      	movs	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	189b      	adds	r3, r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4912      	ldr	r1, [pc, #72]	; (80043e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f7fb feb8 	bl	8000114 <__udivsi3>
 80043a4:	0003      	movs	r3, r0
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043aa:	e008      	b.n	80043be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e001      	b.n	80043be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e009      	b.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	401a      	ands	r2, r3
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d0ed      	beq.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	40007000 	.word	0x40007000
 80043e0:	fffff9ff 	.word	0xfffff9ff
 80043e4:	20000000 	.word	0x20000000
 80043e8:	000f4240 	.word	0x000f4240

080043ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <LL_RCC_GetAPB1Prescaler+0x14>)
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	23e0      	movs	r3, #224	; 0xe0
 80043f6:	01db      	lsls	r3, r3, #7
 80043f8:	4013      	ands	r3, r2
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e2f3      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	4013      	ands	r3, r2
 800441e:	d100      	bne.n	8004422 <HAL_RCC_OscConfig+0x1e>
 8004420:	e07c      	b.n	800451c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004422:	4bc3      	ldr	r3, [pc, #780]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2238      	movs	r2, #56	; 0x38
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442c:	4bc0      	ldr	r3, [pc, #768]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2203      	movs	r2, #3
 8004432:	4013      	ands	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b10      	cmp	r3, #16
 800443a:	d102      	bne.n	8004442 <HAL_RCC_OscConfig+0x3e>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b03      	cmp	r3, #3
 8004440:	d002      	beq.n	8004448 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4bb9      	ldr	r3, [pc, #740]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	d062      	beq.n	800451a <HAL_RCC_OscConfig+0x116>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d15e      	bne.n	800451a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e2ce      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	025b      	lsls	r3, r3, #9
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x78>
 800446c:	4bb0      	ldr	r3, [pc, #704]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4baf      	ldr	r3, [pc, #700]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	0249      	lsls	r1, r1, #9
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e020      	b.n	80044be <HAL_RCC_OscConfig+0xba>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	23a0      	movs	r3, #160	; 0xa0
 8004482:	02db      	lsls	r3, r3, #11
 8004484:	429a      	cmp	r2, r3
 8004486:	d10e      	bne.n	80044a6 <HAL_RCC_OscConfig+0xa2>
 8004488:	4ba9      	ldr	r3, [pc, #676]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4ba8      	ldr	r3, [pc, #672]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	02c9      	lsls	r1, r1, #11
 8004492:	430a      	orrs	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	4ba6      	ldr	r3, [pc, #664]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4ba5      	ldr	r3, [pc, #660]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800449c:	2180      	movs	r1, #128	; 0x80
 800449e:	0249      	lsls	r1, r1, #9
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e00b      	b.n	80044be <HAL_RCC_OscConfig+0xba>
 80044a6:	4ba2      	ldr	r3, [pc, #648]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba1      	ldr	r3, [pc, #644]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80044ac:	49a1      	ldr	r1, [pc, #644]	; (8004734 <HAL_RCC_OscConfig+0x330>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	4b9f      	ldr	r3, [pc, #636]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b9e      	ldr	r3, [pc, #632]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80044b8:	499f      	ldr	r1, [pc, #636]	; (8004738 <HAL_RCC_OscConfig+0x334>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d014      	beq.n	80044f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe fc15 	bl	8002cf4 <HAL_GetTick>
 80044ca:	0003      	movs	r3, r0
 80044cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe fc10 	bl	8002cf4 <HAL_GetTick>
 80044d4:	0002      	movs	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	; 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e28d      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	4b93      	ldr	r3, [pc, #588]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	029b      	lsls	r3, r3, #10
 80044ea:	4013      	ands	r3, r2
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0xcc>
 80044ee:	e015      	b.n	800451c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe fc00 	bl	8002cf4 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fa:	f7fe fbfb 	bl	8002cf4 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e278      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450c:	4b88      	ldr	r3, [pc, #544]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	4013      	ands	r3, r2
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0xf6>
 8004518:	e000      	b.n	800451c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2202      	movs	r2, #2
 8004522:	4013      	ands	r3, r2
 8004524:	d100      	bne.n	8004528 <HAL_RCC_OscConfig+0x124>
 8004526:	e099      	b.n	800465c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004528:	4b81      	ldr	r3, [pc, #516]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2238      	movs	r2, #56	; 0x38
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004532:	4b7f      	ldr	r3, [pc, #508]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	2203      	movs	r2, #3
 8004538:	4013      	ands	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b10      	cmp	r3, #16
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0x144>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d002      	beq.n	800454e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d135      	bne.n	80045ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454e:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4013      	ands	r3, r2
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x162>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e24b      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b72      	ldr	r3, [pc, #456]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4a74      	ldr	r2, [pc, #464]	; (800473c <HAL_RCC_OscConfig+0x338>)
 800456c:	4013      	ands	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	4b6e      	ldr	r3, [pc, #440]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d112      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004582:	4b6b      	ldr	r3, [pc, #428]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_RCC_OscConfig+0x33c>)
 8004588:	4013      	ands	r3, r2
 800458a:	0019      	movs	r1, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	4b67      	ldr	r3, [pc, #412]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004592:	430a      	orrs	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004596:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0adb      	lsrs	r3, r3, #11
 800459c:	2207      	movs	r2, #7
 800459e:	4013      	ands	r3, r2
 80045a0:	4a68      	ldr	r2, [pc, #416]	; (8004744 <HAL_RCC_OscConfig+0x340>)
 80045a2:	40da      	lsrs	r2, r3
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x344>)
 80045a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045a8:	4b68      	ldr	r3, [pc, #416]	; (800474c <HAL_RCC_OscConfig+0x348>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7fe fb45 	bl	8002c3c <HAL_InitTick>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d051      	beq.n	800465a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e221      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d030      	beq.n	8004624 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045c2:	4b5b      	ldr	r3, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a5e      	ldr	r2, [pc, #376]	; (8004740 <HAL_RCC_OscConfig+0x33c>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	4b57      	ldr	r3, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80045d6:	4b56      	ldr	r3, [pc, #344]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b55      	ldr	r3, [pc, #340]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0049      	lsls	r1, r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fe fb86 	bl	8002cf4 <HAL_GetTick>
 80045e8:	0003      	movs	r3, r0
 80045ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fe fb81 	bl	8002cf4 <HAL_GetTick>
 80045f2:	0002      	movs	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1fe      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4013      	ands	r3, r2
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b48      	ldr	r3, [pc, #288]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a4a      	ldr	r2, [pc, #296]	; (800473c <HAL_RCC_OscConfig+0x338>)
 8004612:	4013      	ands	r3, r2
 8004614:	0019      	movs	r1, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	4b44      	ldr	r3, [pc, #272]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	e01b      	b.n	800465c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004624:	4b42      	ldr	r3, [pc, #264]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800462a:	4949      	ldr	r1, [pc, #292]	; (8004750 <HAL_RCC_OscConfig+0x34c>)
 800462c:	400a      	ands	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fe fb60 	bl	8002cf4 <HAL_GetTick>
 8004634:	0003      	movs	r3, r0
 8004636:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe fb5b 	bl	8002cf4 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1d8      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	4b38      	ldr	r3, [pc, #224]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4013      	ands	r3, r2
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x236>
 8004658:	e000      	b.n	800465c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800465a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	4013      	ands	r3, r2
 8004664:	d047      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2238      	movs	r2, #56	; 0x38
 800466c:	4013      	ands	r3, r2
 800466e:	2b18      	cmp	r3, #24
 8004670:	d10a      	bne.n	8004688 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004672:	4b2f      	ldr	r3, [pc, #188]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004676:	2202      	movs	r2, #2
 8004678:	4013      	ands	r3, r2
 800467a:	d03c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d138      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e1ba      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d019      	beq.n	80046c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004694:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fe fb2a 	bl	8002cf4 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a6:	f7fe fb25 	bl	8002cf4 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a2      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80046ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046bc:	2202      	movs	r2, #2
 80046be:	4013      	ands	r3, r2
 80046c0:	d0f1      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2a2>
 80046c2:	e018      	b.n	80046f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80046c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80046ca:	2101      	movs	r1, #1
 80046cc:	438a      	bics	r2, r1
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe fb10 	bl	8002cf4 <HAL_GetTick>
 80046d4:	0003      	movs	r3, r0
 80046d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046da:	f7fe fb0b 	bl	8002cf4 <HAL_GetTick>
 80046de:	0002      	movs	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e188      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2202      	movs	r2, #2
 80046f2:	4013      	ands	r3, r2
 80046f4:	d1f1      	bne.n	80046da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2204      	movs	r2, #4
 80046fc:	4013      	ands	r3, r2
 80046fe:	d100      	bne.n	8004702 <HAL_RCC_OscConfig+0x2fe>
 8004700:	e0c6      	b.n	8004890 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004702:	231f      	movs	r3, #31
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2238      	movs	r2, #56	; 0x38
 8004710:	4013      	ands	r3, r2
 8004712:	2b20      	cmp	r3, #32
 8004714:	d11e      	bne.n	8004754 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_OscConfig+0x32c>)
 8004718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471a:	2202      	movs	r2, #2
 800471c:	4013      	ands	r3, r2
 800471e:	d100      	bne.n	8004722 <HAL_RCC_OscConfig+0x31e>
 8004720:	e0b6      	b.n	8004890 <HAL_RCC_OscConfig+0x48c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d000      	beq.n	800472c <HAL_RCC_OscConfig+0x328>
 800472a:	e0b1      	b.n	8004890 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e166      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
 8004730:	40021000 	.word	0x40021000
 8004734:	fffeffff 	.word	0xfffeffff
 8004738:	fffbffff 	.word	0xfffbffff
 800473c:	ffff80ff 	.word	0xffff80ff
 8004740:	ffffc7ff 	.word	0xffffc7ff
 8004744:	00f42400 	.word	0x00f42400
 8004748:	20000000 	.word	0x20000000
 800474c:	20000004 	.word	0x20000004
 8004750:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004754:	4bac      	ldr	r3, [pc, #688]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	055b      	lsls	r3, r3, #21
 800475c:	4013      	ands	r3, r2
 800475e:	d101      	bne.n	8004764 <HAL_RCC_OscConfig+0x360>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0x362>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	4ba7      	ldr	r3, [pc, #668]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800476c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800476e:	4ba6      	ldr	r3, [pc, #664]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	0549      	lsls	r1, r1, #21
 8004774:	430a      	orrs	r2, r1
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c
 8004778:	4ba3      	ldr	r3, [pc, #652]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800477a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	055b      	lsls	r3, r3, #21
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004786:	231f      	movs	r3, #31
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478e:	4b9f      	ldr	r3, [pc, #636]	; (8004a0c <HAL_RCC_OscConfig+0x608>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4013      	ands	r3, r2
 8004798:	d11a      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479a:	4b9c      	ldr	r3, [pc, #624]	; (8004a0c <HAL_RCC_OscConfig+0x608>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b9b      	ldr	r3, [pc, #620]	; (8004a0c <HAL_RCC_OscConfig+0x608>)
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	0049      	lsls	r1, r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80047a8:	f7fe faa4 	bl	8002cf4 <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fe fa9f 	bl	8002cf4 <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e11c      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c4:	4b91      	ldr	r3, [pc, #580]	; (8004a0c <HAL_RCC_OscConfig+0x608>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3e2>
 80047d8:	4b8b      	ldr	r3, [pc, #556]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80047da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047dc:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80047de:	2101      	movs	r1, #1
 80047e0:	430a      	orrs	r2, r1
 80047e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80047e4:	e01c      	b.n	8004820 <HAL_RCC_OscConfig+0x41c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x404>
 80047ee:	4b86      	ldr	r3, [pc, #536]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80047f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047f2:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80047f4:	2104      	movs	r1, #4
 80047f6:	430a      	orrs	r2, r1
 80047f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80047fa:	4b83      	ldr	r3, [pc, #524]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80047fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047fe:	4b82      	ldr	r3, [pc, #520]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004800:	2101      	movs	r1, #1
 8004802:	430a      	orrs	r2, r1
 8004804:	65da      	str	r2, [r3, #92]	; 0x5c
 8004806:	e00b      	b.n	8004820 <HAL_RCC_OscConfig+0x41c>
 8004808:	4b7f      	ldr	r3, [pc, #508]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800480a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800480e:	2101      	movs	r1, #1
 8004810:	438a      	bics	r2, r1
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
 8004814:	4b7c      	ldr	r3, [pc, #496]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004818:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800481a:	2104      	movs	r1, #4
 800481c:	438a      	bics	r2, r1
 800481e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe fa64 	bl	8002cf4 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004830:	e009      	b.n	8004846 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fe fa5f 	bl	8002cf4 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	4a74      	ldr	r2, [pc, #464]	; (8004a10 <HAL_RCC_OscConfig+0x60c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e0db      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004846:	4b70      	ldr	r3, [pc, #448]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	2202      	movs	r2, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x42e>
 8004850:	e013      	b.n	800487a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fa4f 	bl	8002cf4 <HAL_GetTick>
 8004856:	0003      	movs	r3, r0
 8004858:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800485a:	e009      	b.n	8004870 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fe fa4a 	bl	8002cf4 <HAL_GetTick>
 8004860:	0002      	movs	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	4a6a      	ldr	r2, [pc, #424]	; (8004a10 <HAL_RCC_OscConfig+0x60c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0c6      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004870:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2202      	movs	r2, #2
 8004876:	4013      	ands	r3, r2
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800487a:	231f      	movs	r3, #31
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d105      	bne.n	8004890 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004884:	4b60      	ldr	r3, [pc, #384]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004888:	4b5f      	ldr	r3, [pc, #380]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800488a:	4962      	ldr	r1, [pc, #392]	; (8004a14 <HAL_RCC_OscConfig+0x610>)
 800488c:	400a      	ands	r2, r1
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d100      	bne.n	800489a <HAL_RCC_OscConfig+0x496>
 8004898:	e0b0      	b.n	80049fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489a:	4b5b      	ldr	r3, [pc, #364]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2238      	movs	r2, #56	; 0x38
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d100      	bne.n	80048a8 <HAL_RCC_OscConfig+0x4a4>
 80048a6:	e078      	b.n	800499a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d153      	bne.n	8004958 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b0:	4b55      	ldr	r3, [pc, #340]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b54      	ldr	r3, [pc, #336]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80048b6:	4958      	ldr	r1, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x614>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fa1a 	bl	8002cf4 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fe fa15 	bl	8002cf4 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e092      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	049b      	lsls	r3, r3, #18
 80048e0:	4013      	ands	r3, r2
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a4c      	ldr	r2, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x618>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	431a      	orrs	r2, r3
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800490e:	430a      	orrs	r2, r1
 8004910:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0449      	lsls	r1, r1, #17
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004920:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0549      	lsls	r1, r1, #21
 800492a:	430a      	orrs	r2, r1
 800492c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fe f9e1 	bl	8002cf4 <HAL_GetTick>
 8004932:	0003      	movs	r3, r0
 8004934:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fe f9dc 	bl	8002cf4 <HAL_GetTick>
 800493c:	0002      	movs	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e059      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b2f      	ldr	r3, [pc, #188]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	049b      	lsls	r3, r3, #18
 8004952:	4013      	ands	r3, r2
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x534>
 8004956:	e051      	b.n	80049fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800495e:	492e      	ldr	r1, [pc, #184]	; (8004a18 <HAL_RCC_OscConfig+0x614>)
 8004960:	400a      	ands	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004964:	f7fe f9c6 	bl	8002cf4 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496e:	f7fe f9c1 	bl	8002cf4 <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e03e      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004980:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	049b      	lsls	r3, r3, #18
 8004988:	4013      	ands	r3, r2
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 8004992:	4923      	ldr	r1, [pc, #140]	; (8004a20 <HAL_RCC_OscConfig+0x61c>)
 8004994:	400a      	ands	r2, r1
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e030      	b.n	80049fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02b      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80049a6:	4b18      	ldr	r3, [pc, #96]	; (8004a08 <HAL_RCC_OscConfig+0x604>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2203      	movs	r2, #3
 80049b0:	401a      	ands	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11e      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2270      	movs	r2, #112	; 0x70
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d117      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	23fe      	movs	r3, #254	; 0xfe
 80049cc:	01db      	lsls	r3, r3, #7
 80049ce:	401a      	ands	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10e      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	23f8      	movs	r3, #248	; 0xf8
 80049de:	039b      	lsls	r3, r3, #14
 80049e0:	401a      	ands	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	0f5b      	lsrs	r3, r3, #29
 80049ee:	075a      	lsls	r2, r3, #29
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b008      	add	sp, #32
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	00001388 	.word	0x00001388
 8004a14:	efffffff 	.word	0xefffffff
 8004a18:	feffffff 	.word	0xfeffffff
 8004a1c:	1fc1808c 	.word	0x1fc1808c
 8004a20:	effefffc 	.word	0xeffefffc

08004a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0e9      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b76      	ldr	r3, [pc, #472]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2207      	movs	r2, #7
 8004a3e:	4013      	ands	r3, r2
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d91e      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b73      	ldr	r3, [pc, #460]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	4b70      	ldr	r3, [pc, #448]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a58:	f7fe f94c 	bl	8002cf4 <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a60:	e009      	b.n	8004a76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a62:	f7fe f947 	bl	8002cf4 <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	4a6a      	ldr	r2, [pc, #424]	; (8004c18 <HAL_RCC_ClockConfig+0x1f4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0ca      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a76:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2207      	movs	r2, #7
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1ee      	bne.n	8004a62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d015      	beq.n	8004aba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2204      	movs	r2, #4
 8004a94:	4013      	ands	r3, r2
 8004a96:	d006      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a98:	4b60      	ldr	r3, [pc, #384]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004a9e:	21e0      	movs	r1, #224	; 0xe0
 8004aa0:	01c9      	lsls	r1, r1, #7
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa6:	4b5d      	ldr	r3, [pc, #372]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	4a5d      	ldr	r2, [pc, #372]	; (8004c20 <HAL_RCC_ClockConfig+0x1fc>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d057      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004acc:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	029b      	lsls	r3, r3, #10
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d12b      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e097      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae4:	4b4d      	ldr	r3, [pc, #308]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	049b      	lsls	r3, r3, #18
 8004aec:	4013      	ands	r3, r2
 8004aee:	d11f      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e08b      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afc:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4013      	ands	r3, r2
 8004b06:	d113      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e07f      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b14:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b18:	2202      	movs	r2, #2
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d108      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e074      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	2202      	movs	r2, #2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e06d      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b30:	4b3a      	ldr	r3, [pc, #232]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2207      	movs	r2, #7
 8004b36:	4393      	bics	r3, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b44:	f7fe f8d6 	bl	8002cf4 <HAL_GetTick>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4c:	e009      	b.n	8004b62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4e:	f7fe f8d1 	bl	8002cf4 <HAL_GetTick>
 8004b52:	0002      	movs	r2, r0
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	4a2f      	ldr	r2, [pc, #188]	; (8004c18 <HAL_RCC_ClockConfig+0x1f4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e054      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2238      	movs	r2, #56	; 0x38
 8004b68:	401a      	ands	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1ec      	bne.n	8004b4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2207      	movs	r2, #7
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d21e      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2207      	movs	r2, #7
 8004b88:	4393      	bics	r3, r2
 8004b8a:	0019      	movs	r1, r3
 8004b8c:	4b21      	ldr	r3, [pc, #132]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b94:	f7fe f8ae 	bl	8002cf4 <HAL_GetTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b9c:	e009      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9e:	f7fe f8a9 	bl	8002cf4 <HAL_GetTick>
 8004ba2:	0002      	movs	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <HAL_RCC_ClockConfig+0x1f4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e02c      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bb2:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2207      	movs	r2, #7
 8004bb8:	4013      	ands	r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <HAL_RCC_ClockConfig+0x200>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004bde:	f000 f829 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004be2:	0001      	movs	r1, r0
 8004be4:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <HAL_RCC_ClockConfig+0x1f8>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	220f      	movs	r2, #15
 8004bec:	401a      	ands	r2, r3
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <HAL_RCC_ClockConfig+0x204>)
 8004bf0:	0092      	lsls	r2, r2, #2
 8004bf2:	58d3      	ldr	r3, [r2, r3]
 8004bf4:	221f      	movs	r2, #31
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	000a      	movs	r2, r1
 8004bfa:	40da      	lsrs	r2, r3
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_ClockConfig+0x208>)
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x20c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fe f819 	bl	8002c3c <HAL_InitTick>
 8004c0a:	0003      	movs	r3, r0
}
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b004      	add	sp, #16
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40022000 	.word	0x40022000
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	fffff0ff 	.word	0xfffff0ff
 8004c24:	ffff8fff 	.word	0xffff8fff
 8004c28:	08006ac4 	.word	0x08006ac4
 8004c2c:	20000000 	.word	0x20000000
 8004c30:	20000004 	.word	0x20000004

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2238      	movs	r2, #56	; 0x38
 8004c40:	4013      	ands	r3, r2
 8004c42:	d10f      	bne.n	8004c64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c44:	4b39      	ldr	r3, [pc, #228]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0adb      	lsrs	r3, r3, #11
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2201      	movs	r2, #1
 8004c50:	409a      	lsls	r2, r3
 8004c52:	0013      	movs	r3, r2
 8004c54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	4835      	ldr	r0, [pc, #212]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c5a:	f7fb fa5b 	bl	8000114 <__udivsi3>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e05d      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c64:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2238      	movs	r2, #56	; 0x38
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d102      	bne.n	8004c76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c70:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	e054      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2238      	movs	r2, #56	; 0x38
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d138      	bne.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2203      	movs	r2, #3
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c8c:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	2207      	movs	r2, #7
 8004c94:	4013      	ands	r3, r2
 8004c96:	3301      	adds	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4824      	ldr	r0, [pc, #144]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ca4:	f7fb fa36 	bl	8000114 <__udivsi3>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	0019      	movs	r1, r3
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	227f      	movs	r2, #127	; 0x7f
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	434b      	muls	r3, r1
 8004cb8:	617b      	str	r3, [r7, #20]
        break;
 8004cba:	e00d      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	481c      	ldr	r0, [pc, #112]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004cc0:	f7fb fa28 	bl	8000114 <__udivsi3>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	227f      	movs	r2, #127	; 0x7f
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	434b      	muls	r3, r1
 8004cd4:	617b      	str	r3, [r7, #20]
        break;
 8004cd6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	0f5b      	lsrs	r3, r3, #29
 8004cde:	2207      	movs	r2, #7
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	6978      	ldr	r0, [r7, #20]
 8004cea:	f7fb fa13 	bl	8000114 <__udivsi3>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	e015      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2238      	movs	r2, #56	; 0x38
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d103      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	e00b      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2238      	movs	r2, #56	; 0x38
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b18      	cmp	r3, #24
 8004d12:	d103      	bne.n	8004d1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d14:	23fa      	movs	r3, #250	; 0xfa
 8004d16:	01db      	lsls	r3, r3, #7
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	e001      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d20:	693b      	ldr	r3, [r7, #16]
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b006      	add	sp, #24
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	20000000 	.word	0x20000000

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b5b0      	push	{r4, r5, r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d50:	f7ff fff2 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d54:	0004      	movs	r4, r0
 8004d56:	f7ff fb49 	bl	80043ec <LL_RCC_GetAPB1Prescaler>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	0b1a      	lsrs	r2, r3, #12
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d60:	0092      	lsls	r2, r2, #2
 8004d62:	58d3      	ldr	r3, [r2, r3]
 8004d64:	221f      	movs	r2, #31
 8004d66:	4013      	ands	r3, r2
 8004d68:	40dc      	lsrs	r4, r3
 8004d6a:	0023      	movs	r3, r4
}
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bdb0      	pop	{r4, r5, r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	08006b04 	.word	0x08006b04

08004d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d80:	2313      	movs	r3, #19
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	2200      	movs	r2, #0
 8004d86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d88:	2312      	movs	r3, #18
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004d9c:	e0a3      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9e:	2011      	movs	r0, #17
 8004da0:	183b      	adds	r3, r7, r0
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b86      	ldr	r3, [pc, #536]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	055b      	lsls	r3, r3, #21
 8004dae:	4013      	ands	r3, r2
 8004db0:	d110      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db6:	4b82      	ldr	r3, [pc, #520]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004db8:	2180      	movs	r1, #128	; 0x80
 8004dba:	0549      	lsls	r1, r1, #21
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dc0:	4b7f      	ldr	r3, [pc, #508]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	055b      	lsls	r3, r3, #21
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dce:	183b      	adds	r3, r7, r0
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd4:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4b7a      	ldr	r3, [pc, #488]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0049      	lsls	r1, r1, #1
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de2:	f7fd ff87 	bl	8002cf4 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dea:	e00b      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fd ff82 	bl	8002cf4 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d904      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004dfa:	2313      	movs	r3, #19
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	2203      	movs	r2, #3
 8004e00:	701a      	strb	r2, [r3, #0]
        break;
 8004e02:	e005      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e04:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d0ed      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e10:	2313      	movs	r3, #19
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d154      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e1a:	4b69      	ldr	r3, [pc, #420]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e1e:	23c0      	movs	r3, #192	; 0xc0
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4013      	ands	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d019      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d014      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e36:	4b62      	ldr	r3, [pc, #392]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3a:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e40:	4b5f      	ldr	r3, [pc, #380]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	0249      	lsls	r1, r1, #9
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e52:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e54:	495d      	ldr	r1, [pc, #372]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004e56:	400a      	ands	r2, r1
 8004e58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e5a:	4b59      	ldr	r3, [pc, #356]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2201      	movs	r2, #1
 8004e64:	4013      	ands	r3, r2
 8004e66:	d016      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd ff44 	bl	8002cf4 <HAL_GetTick>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e70:	e00c      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e72:	f7fd ff3f 	bl	8002cf4 <HAL_GetTick>
 8004e76:	0002      	movs	r2, r0
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	4a54      	ldr	r2, [pc, #336]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d904      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004e82:	2313      	movs	r3, #19
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2203      	movs	r2, #3
 8004e88:	701a      	strb	r2, [r3, #0]
            break;
 8004e8a:	e004      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e90:	2202      	movs	r2, #2
 8004e92:	4013      	ands	r3, r2
 8004e94:	d0ed      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004e96:	2313      	movs	r3, #19
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ea0:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea4:	4a48      	ldr	r2, [pc, #288]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb4:	e00c      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb6:	2312      	movs	r3, #18
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2213      	movs	r2, #19
 8004ebc:	18ba      	adds	r2, r7, r2
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	2312      	movs	r3, #18
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	2213      	movs	r2, #19
 8004eca:	18ba      	adds	r2, r7, r2
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ed0:	2311      	movs	r3, #17
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d105      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ede:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ee0:	493c      	ldr	r1, [pc, #240]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef0:	4b33      	ldr	r3, [pc, #204]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	4393      	bics	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f00:	430a      	orrs	r2, r1
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f0e:	4b2c      	ldr	r3, [pc, #176]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	220c      	movs	r2, #12
 8004f14:	4393      	bics	r3, r2
 8004f16:	0019      	movs	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2220      	movs	r2, #32
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	4a29      	ldr	r2, [pc, #164]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	01db      	lsls	r3, r3, #7
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f4c:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	0899      	lsrs	r1, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	05db      	lsls	r3, r3, #23
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d106      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	0249      	lsls	r1, r1, #9
 8004f74:	430a      	orrs	r2, r1
 8004f76:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	2380      	movs	r3, #128	; 0x80
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	4013      	ands	r3, r2
 8004f82:	d016      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f84:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f94:	430a      	orrs	r2, r1
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	01db      	lsls	r3, r3, #7
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d106      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004faa:	2180      	movs	r1, #128	; 0x80
 8004fac:	0249      	lsls	r1, r1, #9
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fb2:	2312      	movs	r3, #18
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	781b      	ldrb	r3, [r3, #0]
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b006      	add	sp, #24
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	fffffcff 	.word	0xfffffcff
 8004fcc:	fffeffff 	.word	0xfffeffff
 8004fd0:	00001388 	.word	0x00001388
 8004fd4:	efffffff 	.word	0xefffffff
 8004fd8:	ffffcfff 	.word	0xffffcfff
 8004fdc:	ffff3fff 	.word	0xffff3fff

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e046      	b.n	8005080 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2288      	movs	r2, #136	; 0x88
 8004ff6:	589b      	ldr	r3, [r3, r2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2284      	movs	r2, #132	; 0x84
 8005000:	2100      	movs	r1, #0
 8005002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0018      	movs	r0, r3
 8005008:	f7fd fca6 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2288      	movs	r2, #136	; 0x88
 8005010:	2124      	movs	r1, #36	; 0x24
 8005012:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2101      	movs	r1, #1
 8005020:	438a      	bics	r2, r1
 8005022:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 f8cc 	bl	80051c4 <UART_SetConfig>
 800502c:	0003      	movs	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e024      	b.n	8005080 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0018      	movs	r0, r3
 8005042:	f000 fa63 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	490d      	ldr	r1, [pc, #52]	; (8005088 <HAL_UART_Init+0xa8>)
 8005052:	400a      	ands	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	212a      	movs	r1, #42	; 0x2a
 8005062:	438a      	bics	r2, r1
 8005064:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2101      	movs	r1, #1
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	0018      	movs	r0, r3
 800507a:	f000 fafb 	bl	8005674 <UART_CheckIdleState>
 800507e:	0003      	movs	r3, r0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b002      	add	sp, #8
 8005086:	bd80      	pop	{r7, pc}
 8005088:	ffffb7ff 	.word	0xffffb7ff

0800508c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	; 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	1dbb      	adds	r3, r7, #6
 800509a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2288      	movs	r2, #136	; 0x88
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d000      	beq.n	80050a8 <HAL_UART_Transmit+0x1c>
 80050a6:	e088      	b.n	80051ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_UART_Transmit+0x2a>
 80050ae:	1dbb      	adds	r3, r7, #6
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e080      	b.n	80051bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	015b      	lsls	r3, r3, #5
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d109      	bne.n	80050da <HAL_UART_Transmit+0x4e>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2201      	movs	r2, #1
 80050d2:	4013      	ands	r3, r2
 80050d4:	d001      	beq.n	80050da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e070      	b.n	80051bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2290      	movs	r2, #144	; 0x90
 80050de:	2100      	movs	r1, #0
 80050e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2288      	movs	r2, #136	; 0x88
 80050e6:	2121      	movs	r1, #33	; 0x21
 80050e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ea:	f7fd fe03 	bl	8002cf4 <HAL_GetTick>
 80050ee:	0003      	movs	r3, r0
 80050f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1dba      	adds	r2, r7, #6
 80050f6:	2154      	movs	r1, #84	; 0x54
 80050f8:	8812      	ldrh	r2, [r2, #0]
 80050fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	1dba      	adds	r2, r7, #6
 8005100:	2156      	movs	r1, #86	; 0x56
 8005102:	8812      	ldrh	r2, [r2, #0]
 8005104:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	015b      	lsls	r3, r3, #5
 800510e:	429a      	cmp	r2, r3
 8005110:	d108      	bne.n	8005124 <HAL_UART_Transmit+0x98>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d104      	bne.n	8005124 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e003      	b.n	800512c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800512c:	e02c      	b.n	8005188 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	0013      	movs	r3, r2
 8005138:	2200      	movs	r2, #0
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	f000 fae8 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 8005140:	1e03      	subs	r3, r0, #0
 8005142:	d001      	beq.n	8005148 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e039      	b.n	80051bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	001a      	movs	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	05d2      	lsls	r2, r2, #23
 800515a:	0dd2      	lsrs	r2, r2, #23
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	3302      	adds	r3, #2
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e007      	b.n	8005176 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2256      	movs	r2, #86	; 0x56
 800517a:	5a9b      	ldrh	r3, [r3, r2]
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b299      	uxth	r1, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2256      	movs	r2, #86	; 0x56
 8005186:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2256      	movs	r2, #86	; 0x56
 800518c:	5a9b      	ldrh	r3, [r3, r2]
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1cc      	bne.n	800512e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	0013      	movs	r3, r2
 800519e:	2200      	movs	r2, #0
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	f000 fab5 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d001      	beq.n	80051ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e006      	b.n	80051bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2288      	movs	r2, #136	; 0x88
 80051b2:	2120      	movs	r1, #32
 80051b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b008      	add	sp, #32
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051cc:	231a      	movs	r3, #26
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4abc      	ldr	r2, [pc, #752]	; (80054e4 <UART_SetConfig+0x320>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	0019      	movs	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	430a      	orrs	r2, r1
 8005200:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4ab7      	ldr	r2, [pc, #732]	; (80054e8 <UART_SetConfig+0x324>)
 800520a:	4013      	ands	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	4313      	orrs	r3, r2
 8005228:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4aae      	ldr	r2, [pc, #696]	; (80054ec <UART_SetConfig+0x328>)
 8005232:	4013      	ands	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	220f      	movs	r2, #15
 8005248:	4393      	bics	r3, r2
 800524a:	0019      	movs	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4aa4      	ldr	r2, [pc, #656]	; (80054f0 <UART_SetConfig+0x32c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d127      	bne.n	80052b2 <UART_SetConfig+0xee>
 8005262:	4ba4      	ldr	r3, [pc, #656]	; (80054f4 <UART_SetConfig+0x330>)
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	2203      	movs	r2, #3
 8005268:	4013      	ands	r3, r2
 800526a:	2b03      	cmp	r3, #3
 800526c:	d017      	beq.n	800529e <UART_SetConfig+0xda>
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0xe4>
 8005270:	2b02      	cmp	r3, #2
 8005272:	d00a      	beq.n	800528a <UART_SetConfig+0xc6>
 8005274:	d818      	bhi.n	80052a8 <UART_SetConfig+0xe4>
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <UART_SetConfig+0xbc>
 800527a:	2b01      	cmp	r3, #1
 800527c:	d00a      	beq.n	8005294 <UART_SetConfig+0xd0>
 800527e:	e013      	b.n	80052a8 <UART_SetConfig+0xe4>
 8005280:	231b      	movs	r3, #27
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e058      	b.n	800533c <UART_SetConfig+0x178>
 800528a:	231b      	movs	r3, #27
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	2202      	movs	r2, #2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e053      	b.n	800533c <UART_SetConfig+0x178>
 8005294:	231b      	movs	r3, #27
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e04e      	b.n	800533c <UART_SetConfig+0x178>
 800529e:	231b      	movs	r3, #27
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2208      	movs	r2, #8
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e049      	b.n	800533c <UART_SetConfig+0x178>
 80052a8:	231b      	movs	r3, #27
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2210      	movs	r2, #16
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e044      	b.n	800533c <UART_SetConfig+0x178>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a90      	ldr	r2, [pc, #576]	; (80054f8 <UART_SetConfig+0x334>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d127      	bne.n	800530c <UART_SetConfig+0x148>
 80052bc:	4b8d      	ldr	r3, [pc, #564]	; (80054f4 <UART_SetConfig+0x330>)
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	220c      	movs	r2, #12
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d017      	beq.n	80052f8 <UART_SetConfig+0x134>
 80052c8:	d81b      	bhi.n	8005302 <UART_SetConfig+0x13e>
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d00a      	beq.n	80052e4 <UART_SetConfig+0x120>
 80052ce:	d818      	bhi.n	8005302 <UART_SetConfig+0x13e>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <UART_SetConfig+0x116>
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d00a      	beq.n	80052ee <UART_SetConfig+0x12a>
 80052d8:	e013      	b.n	8005302 <UART_SetConfig+0x13e>
 80052da:	231b      	movs	r3, #27
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e02b      	b.n	800533c <UART_SetConfig+0x178>
 80052e4:	231b      	movs	r3, #27
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2202      	movs	r2, #2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e026      	b.n	800533c <UART_SetConfig+0x178>
 80052ee:	231b      	movs	r3, #27
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	2204      	movs	r2, #4
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e021      	b.n	800533c <UART_SetConfig+0x178>
 80052f8:	231b      	movs	r3, #27
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	2208      	movs	r2, #8
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e01c      	b.n	800533c <UART_SetConfig+0x178>
 8005302:	231b      	movs	r3, #27
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2210      	movs	r2, #16
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e017      	b.n	800533c <UART_SetConfig+0x178>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a7a      	ldr	r2, [pc, #488]	; (80054fc <UART_SetConfig+0x338>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d104      	bne.n	8005320 <UART_SetConfig+0x15c>
 8005316:	231b      	movs	r3, #27
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e00d      	b.n	800533c <UART_SetConfig+0x178>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a76      	ldr	r2, [pc, #472]	; (8005500 <UART_SetConfig+0x33c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d104      	bne.n	8005334 <UART_SetConfig+0x170>
 800532a:	231b      	movs	r3, #27
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e003      	b.n	800533c <UART_SetConfig+0x178>
 8005334:	231b      	movs	r3, #27
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2210      	movs	r2, #16
 800533a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	429a      	cmp	r2, r3
 8005346:	d000      	beq.n	800534a <UART_SetConfig+0x186>
 8005348:	e065      	b.n	8005416 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800534a:	231b      	movs	r3, #27
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d015      	beq.n	8005380 <UART_SetConfig+0x1bc>
 8005354:	dc18      	bgt.n	8005388 <UART_SetConfig+0x1c4>
 8005356:	2b04      	cmp	r3, #4
 8005358:	d00d      	beq.n	8005376 <UART_SetConfig+0x1b2>
 800535a:	dc15      	bgt.n	8005388 <UART_SetConfig+0x1c4>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <UART_SetConfig+0x1a2>
 8005360:	2b02      	cmp	r3, #2
 8005362:	d005      	beq.n	8005370 <UART_SetConfig+0x1ac>
 8005364:	e010      	b.n	8005388 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005366:	f7ff fcf1 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 800536a:	0003      	movs	r3, r0
 800536c:	617b      	str	r3, [r7, #20]
        break;
 800536e:	e012      	b.n	8005396 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005370:	4b64      	ldr	r3, [pc, #400]	; (8005504 <UART_SetConfig+0x340>)
 8005372:	617b      	str	r3, [r7, #20]
        break;
 8005374:	e00f      	b.n	8005396 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7ff fc5d 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 800537a:	0003      	movs	r3, r0
 800537c:	617b      	str	r3, [r7, #20]
        break;
 800537e:	e00a      	b.n	8005396 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	617b      	str	r3, [r7, #20]
        break;
 8005386:	e006      	b.n	8005396 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800538c:	231a      	movs	r3, #26
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
        break;
 8005394:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d100      	bne.n	800539e <UART_SetConfig+0x1da>
 800539c:	e08d      	b.n	80054ba <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053a2:	4b59      	ldr	r3, [pc, #356]	; (8005508 <UART_SetConfig+0x344>)
 80053a4:	0052      	lsls	r2, r2, #1
 80053a6:	5ad3      	ldrh	r3, [r2, r3]
 80053a8:	0019      	movs	r1, r3
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7fa feb2 	bl	8000114 <__udivsi3>
 80053b0:	0003      	movs	r3, r0
 80053b2:	005a      	lsls	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	18d2      	adds	r2, r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	0019      	movs	r1, r3
 80053c2:	0010      	movs	r0, r2
 80053c4:	f7fa fea6 	bl	8000114 <__udivsi3>
 80053c8:	0003      	movs	r3, r0
 80053ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	d91c      	bls.n	800540c <UART_SetConfig+0x248>
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	429a      	cmp	r2, r3
 80053da:	d217      	bcs.n	800540c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	b29a      	uxth	r2, r3
 80053e0:	200e      	movs	r0, #14
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	210f      	movs	r1, #15
 80053e6:	438a      	bics	r2, r1
 80053e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2207      	movs	r2, #7
 80053f2:	4013      	ands	r3, r2
 80053f4:	b299      	uxth	r1, r3
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	183a      	adds	r2, r7, r0
 80053fa:	8812      	ldrh	r2, [r2, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	183a      	adds	r2, r7, r0
 8005406:	8812      	ldrh	r2, [r2, #0]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e056      	b.n	80054ba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800540c:	231a      	movs	r3, #26
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e051      	b.n	80054ba <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005416:	231b      	movs	r3, #27
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d015      	beq.n	800544c <UART_SetConfig+0x288>
 8005420:	dc18      	bgt.n	8005454 <UART_SetConfig+0x290>
 8005422:	2b04      	cmp	r3, #4
 8005424:	d00d      	beq.n	8005442 <UART_SetConfig+0x27e>
 8005426:	dc15      	bgt.n	8005454 <UART_SetConfig+0x290>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <UART_SetConfig+0x26e>
 800542c:	2b02      	cmp	r3, #2
 800542e:	d005      	beq.n	800543c <UART_SetConfig+0x278>
 8005430:	e010      	b.n	8005454 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005432:	f7ff fc8b 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005436:	0003      	movs	r3, r0
 8005438:	617b      	str	r3, [r7, #20]
        break;
 800543a:	e012      	b.n	8005462 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <UART_SetConfig+0x340>)
 800543e:	617b      	str	r3, [r7, #20]
        break;
 8005440:	e00f      	b.n	8005462 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005442:	f7ff fbf7 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8005446:	0003      	movs	r3, r0
 8005448:	617b      	str	r3, [r7, #20]
        break;
 800544a:	e00a      	b.n	8005462 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	617b      	str	r3, [r7, #20]
        break;
 8005452:	e006      	b.n	8005462 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005458:	231a      	movs	r3, #26
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
        break;
 8005460:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d028      	beq.n	80054ba <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546c:	4b26      	ldr	r3, [pc, #152]	; (8005508 <UART_SetConfig+0x344>)
 800546e:	0052      	lsls	r2, r2, #1
 8005470:	5ad3      	ldrh	r3, [r2, r3]
 8005472:	0019      	movs	r1, r3
 8005474:	6978      	ldr	r0, [r7, #20]
 8005476:	f7fa fe4d 	bl	8000114 <__udivsi3>
 800547a:	0003      	movs	r3, r0
 800547c:	001a      	movs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	18d2      	adds	r2, r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	0019      	movs	r1, r3
 800548c:	0010      	movs	r0, r2
 800548e:	f7fa fe41 	bl	8000114 <__udivsi3>
 8005492:	0003      	movs	r3, r0
 8005494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d90a      	bls.n	80054b2 <UART_SetConfig+0x2ee>
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	025b      	lsls	r3, r3, #9
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d205      	bcs.n	80054b2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	e003      	b.n	80054ba <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80054b2:	231a      	movs	r3, #26
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	226a      	movs	r2, #106	; 0x6a
 80054be:	2101      	movs	r1, #1
 80054c0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2268      	movs	r2, #104	; 0x68
 80054c6:	2101      	movs	r1, #1
 80054c8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054d6:	231a      	movs	r3, #26
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	781b      	ldrb	r3, [r3, #0]
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b008      	add	sp, #32
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	cfff69f3 	.word	0xcfff69f3
 80054e8:	ffffcfff 	.word	0xffffcfff
 80054ec:	11fff4ff 	.word	0x11fff4ff
 80054f0:	40013800 	.word	0x40013800
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40004400 	.word	0x40004400
 80054fc:	40004800 	.word	0x40004800
 8005500:	40004c00 	.word	0x40004c00
 8005504:	00f42400 	.word	0x00f42400
 8005508:	08006b24 	.word	0x08006b24

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	2201      	movs	r2, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <UART_AdvFeatureConfig+0x144>)
 8005526:	4013      	ands	r3, r2
 8005528:	0019      	movs	r1, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	2202      	movs	r2, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d00b      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4a43      	ldr	r2, [pc, #268]	; (8005654 <UART_AdvFeatureConfig+0x148>)
 8005548:	4013      	ands	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	2204      	movs	r2, #4
 800555e:	4013      	ands	r3, r2
 8005560:	d00b      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a3b      	ldr	r2, [pc, #236]	; (8005658 <UART_AdvFeatureConfig+0x14c>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	2208      	movs	r2, #8
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a34      	ldr	r2, [pc, #208]	; (800565c <UART_AdvFeatureConfig+0x150>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	2210      	movs	r2, #16
 80055a2:	4013      	ands	r3, r2
 80055a4:	d00b      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4a2c      	ldr	r2, [pc, #176]	; (8005660 <UART_AdvFeatureConfig+0x154>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	2220      	movs	r2, #32
 80055c4:	4013      	ands	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	4a25      	ldr	r2, [pc, #148]	; (8005664 <UART_AdvFeatureConfig+0x158>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	4013      	ands	r3, r2
 80055e8:	d01d      	beq.n	8005626 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <UART_AdvFeatureConfig+0x15c>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	035b      	lsls	r3, r3, #13
 800560a:	429a      	cmp	r2, r3
 800560c:	d10b      	bne.n	8005626 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <UART_AdvFeatureConfig+0x160>)
 8005616:	4013      	ands	r3, r2
 8005618:	0019      	movs	r1, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	4013      	ands	r3, r2
 800562e:	d00b      	beq.n	8005648 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <UART_AdvFeatureConfig+0x164>)
 8005638:	4013      	ands	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }
}
 8005648:	46c0      	nop			; (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}
 8005650:	fffdffff 	.word	0xfffdffff
 8005654:	fffeffff 	.word	0xfffeffff
 8005658:	fffbffff 	.word	0xfffbffff
 800565c:	ffff7fff 	.word	0xffff7fff
 8005660:	ffffefff 	.word	0xffffefff
 8005664:	ffffdfff 	.word	0xffffdfff
 8005668:	ffefffff 	.word	0xffefffff
 800566c:	ff9fffff 	.word	0xff9fffff
 8005670:	fff7ffff 	.word	0xfff7ffff

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2290      	movs	r2, #144	; 0x90
 8005680:	2100      	movs	r1, #0
 8005682:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fd fb36 	bl	8002cf4 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2208      	movs	r2, #8
 8005694:	4013      	ands	r3, r2
 8005696:	2b08      	cmp	r3, #8
 8005698:	d10c      	bne.n	80056b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2280      	movs	r2, #128	; 0x80
 800569e:	0391      	lsls	r1, r2, #14
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4a1a      	ldr	r2, [pc, #104]	; (800570c <UART_CheckIdleState+0x98>)
 80056a4:	9200      	str	r2, [sp, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f000 f832 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 80056ac:	1e03      	subs	r3, r0, #0
 80056ae:	d001      	beq.n	80056b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e026      	b.n	8005702 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2204      	movs	r2, #4
 80056bc:	4013      	ands	r3, r2
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d10c      	bne.n	80056dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	03d1      	lsls	r1, r2, #15
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4a10      	ldr	r2, [pc, #64]	; (800570c <UART_CheckIdleState+0x98>)
 80056cc:	9200      	str	r2, [sp, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f000 f81e 	bl	8005710 <UART_WaitOnFlagUntilTimeout>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d001      	beq.n	80056dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e012      	b.n	8005702 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2288      	movs	r2, #136	; 0x88
 80056e0:	2120      	movs	r1, #32
 80056e2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	228c      	movs	r2, #140	; 0x8c
 80056e8:	2120      	movs	r1, #32
 80056ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2284      	movs	r2, #132	; 0x84
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b004      	add	sp, #16
 8005708:	bd80      	pop	{r7, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	01ffffff 	.word	0x01ffffff

08005710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b094      	sub	sp, #80	; 0x50
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005720:	e0a7      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005724:	3301      	adds	r3, #1
 8005726:	d100      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005728:	e0a3      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fd fae3 	bl	8002cf4 <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <UART_WaitOnFlagUntilTimeout+0x30>
 800573a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800573c:	2b00      	cmp	r3, #0
 800573e:	d13f      	bne.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005740:	f3ef 8310 	mrs	r3, PRIMASK
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005748:	647b      	str	r3, [r7, #68]	; 0x44
 800574a:	2301      	movs	r3, #1
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	f383 8810 	msr	PRIMASK, r3
}
 8005754:	46c0      	nop			; (mov r8, r8)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	494e      	ldr	r1, [pc, #312]	; (800589c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005762:	400a      	ands	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f383 8810 	msr	PRIMASK, r3
}
 8005770:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005772:	f3ef 8310 	mrs	r3, PRIMASK
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	643b      	str	r3, [r7, #64]	; 0x40
 800577c:	2301      	movs	r3, #1
 800577e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2101      	movs	r1, #1
 8005794:	438a      	bics	r2, r1
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579e:	f383 8810 	msr	PRIMASK, r3
}
 80057a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2288      	movs	r2, #136	; 0x88
 80057a8:	2120      	movs	r1, #32
 80057aa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	228c      	movs	r2, #140	; 0x8c
 80057b0:	2120      	movs	r1, #32
 80057b2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2284      	movs	r2, #132	; 0x84
 80057b8:	2100      	movs	r1, #0
 80057ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e069      	b.n	8005894 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2204      	movs	r2, #4
 80057c8:	4013      	ands	r3, r2
 80057ca:	d052      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	2380      	movs	r3, #128	; 0x80
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	401a      	ands	r2, r3
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	429a      	cmp	r2, r3
 80057de:	d148      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	0112      	lsls	r2, r2, #4
 80057e8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ea:	f3ef 8310 	mrs	r3, PRIMASK
 80057ee:	613b      	str	r3, [r7, #16]
  return(result);
 80057f0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	2301      	movs	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4924      	ldr	r1, [pc, #144]	; (800589c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800580c:	400a      	ands	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005812:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f383 8810 	msr	PRIMASK, r3
}
 800581a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581c:	f3ef 8310 	mrs	r3, PRIMASK
 8005820:	61fb      	str	r3, [r7, #28]
  return(result);
 8005822:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48
 8005826:	2301      	movs	r3, #1
 8005828:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2101      	movs	r1, #1
 800583e:	438a      	bics	r2, r1
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2288      	movs	r2, #136	; 0x88
 8005852:	2120      	movs	r1, #32
 8005854:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	228c      	movs	r2, #140	; 0x8c
 800585a:	2120      	movs	r1, #32
 800585c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2290      	movs	r2, #144	; 0x90
 8005862:	2120      	movs	r1, #32
 8005864:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2284      	movs	r2, #132	; 0x84
 800586a:	2100      	movs	r1, #0
 800586c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e010      	b.n	8005894 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	425a      	negs	r2, r3
 8005882:	4153      	adcs	r3, r2
 8005884:	b2db      	uxtb	r3, r3
 8005886:	001a      	movs	r2, r3
 8005888:	1dfb      	adds	r3, r7, #7
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d100      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x182>
 8005890:	e747      	b.n	8005722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	0018      	movs	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	b014      	add	sp, #80	; 0x50
 800589a:	bd80      	pop	{r7, pc}
 800589c:	fffffe5f 	.word	0xfffffe5f

080058a0 <std>:
 80058a0:	2300      	movs	r3, #0
 80058a2:	b510      	push	{r4, lr}
 80058a4:	0004      	movs	r4, r0
 80058a6:	6003      	str	r3, [r0, #0]
 80058a8:	6043      	str	r3, [r0, #4]
 80058aa:	6083      	str	r3, [r0, #8]
 80058ac:	8181      	strh	r1, [r0, #12]
 80058ae:	6643      	str	r3, [r0, #100]	; 0x64
 80058b0:	0019      	movs	r1, r3
 80058b2:	81c2      	strh	r2, [r0, #14]
 80058b4:	6103      	str	r3, [r0, #16]
 80058b6:	6143      	str	r3, [r0, #20]
 80058b8:	6183      	str	r3, [r0, #24]
 80058ba:	2208      	movs	r2, #8
 80058bc:	305c      	adds	r0, #92	; 0x5c
 80058be:	f000 fa03 	bl	8005cc8 <memset>
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <std+0x38>)
 80058c4:	6224      	str	r4, [r4, #32]
 80058c6:	6263      	str	r3, [r4, #36]	; 0x24
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <std+0x3c>)
 80058ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <std+0x40>)
 80058ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058d0:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <std+0x44>)
 80058d2:	6323      	str	r3, [r4, #48]	; 0x30
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	08005ae5 	.word	0x08005ae5
 80058dc:	08005b0d 	.word	0x08005b0d
 80058e0:	08005b45 	.word	0x08005b45
 80058e4:	08005b71 	.word	0x08005b71

080058e8 <stdio_exit_handler>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <stdio_exit_handler+0x10>)
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <stdio_exit_handler+0x14>)
 80058ee:	4804      	ldr	r0, [pc, #16]	; (8005900 <stdio_exit_handler+0x18>)
 80058f0:	f000 f86c 	bl	80059cc <_fwalk_sglue>
 80058f4:	bd10      	pop	{r4, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	2000000c 	.word	0x2000000c
 80058fc:	08006665 	.word	0x08006665
 8005900:	20000018 	.word	0x20000018

08005904 <cleanup_stdio>:
 8005904:	6841      	ldr	r1, [r0, #4]
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <cleanup_stdio+0x30>)
 8005908:	b510      	push	{r4, lr}
 800590a:	0004      	movs	r4, r0
 800590c:	4299      	cmp	r1, r3
 800590e:	d001      	beq.n	8005914 <cleanup_stdio+0x10>
 8005910:	f000 fea8 	bl	8006664 <_fflush_r>
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <cleanup_stdio+0x34>)
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <cleanup_stdio+0x1e>
 800591c:	0020      	movs	r0, r4
 800591e:	f000 fea1 	bl	8006664 <_fflush_r>
 8005922:	68e1      	ldr	r1, [r4, #12]
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <cleanup_stdio+0x38>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d002      	beq.n	8005930 <cleanup_stdio+0x2c>
 800592a:	0020      	movs	r0, r4
 800592c:	f000 fe9a 	bl	8006664 <_fflush_r>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	2000045c 	.word	0x2000045c
 8005938:	200004c4 	.word	0x200004c4
 800593c:	2000052c 	.word	0x2000052c

08005940 <global_stdio_init.part.0>:
 8005940:	b510      	push	{r4, lr}
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <global_stdio_init.part.0+0x28>)
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <global_stdio_init.part.0+0x2c>)
 8005946:	2104      	movs	r1, #4
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	4809      	ldr	r0, [pc, #36]	; (8005970 <global_stdio_init.part.0+0x30>)
 800594c:	2200      	movs	r2, #0
 800594e:	f7ff ffa7 	bl	80058a0 <std>
 8005952:	2201      	movs	r2, #1
 8005954:	2109      	movs	r1, #9
 8005956:	4807      	ldr	r0, [pc, #28]	; (8005974 <global_stdio_init.part.0+0x34>)
 8005958:	f7ff ffa2 	bl	80058a0 <std>
 800595c:	2202      	movs	r2, #2
 800595e:	2112      	movs	r1, #18
 8005960:	4805      	ldr	r0, [pc, #20]	; (8005978 <global_stdio_init.part.0+0x38>)
 8005962:	f7ff ff9d 	bl	80058a0 <std>
 8005966:	bd10      	pop	{r4, pc}
 8005968:	20000594 	.word	0x20000594
 800596c:	080058e9 	.word	0x080058e9
 8005970:	2000045c 	.word	0x2000045c
 8005974:	200004c4 	.word	0x200004c4
 8005978:	2000052c 	.word	0x2000052c

0800597c <__sfp_lock_acquire>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4802      	ldr	r0, [pc, #8]	; (8005988 <__sfp_lock_acquire+0xc>)
 8005980:	f000 fa22 	bl	8005dc8 <__retarget_lock_acquire_recursive>
 8005984:	bd10      	pop	{r4, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	2000059d 	.word	0x2000059d

0800598c <__sfp_lock_release>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4802      	ldr	r0, [pc, #8]	; (8005998 <__sfp_lock_release+0xc>)
 8005990:	f000 fa1b 	bl	8005dca <__retarget_lock_release_recursive>
 8005994:	bd10      	pop	{r4, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	2000059d 	.word	0x2000059d

0800599c <__sinit>:
 800599c:	b510      	push	{r4, lr}
 800599e:	0004      	movs	r4, r0
 80059a0:	f7ff ffec 	bl	800597c <__sfp_lock_acquire>
 80059a4:	6a23      	ldr	r3, [r4, #32]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <__sinit+0x14>
 80059aa:	f7ff ffef 	bl	800598c <__sfp_lock_release>
 80059ae:	bd10      	pop	{r4, pc}
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <__sinit+0x28>)
 80059b2:	6223      	str	r3, [r4, #32]
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <__sinit+0x2c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f6      	bne.n	80059aa <__sinit+0xe>
 80059bc:	f7ff ffc0 	bl	8005940 <global_stdio_init.part.0>
 80059c0:	e7f3      	b.n	80059aa <__sinit+0xe>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	08005905 	.word	0x08005905
 80059c8:	20000594 	.word	0x20000594

080059cc <_fwalk_sglue>:
 80059cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ce:	0014      	movs	r4, r2
 80059d0:	2600      	movs	r6, #0
 80059d2:	9000      	str	r0, [sp, #0]
 80059d4:	9101      	str	r1, [sp, #4]
 80059d6:	68a5      	ldr	r5, [r4, #8]
 80059d8:	6867      	ldr	r7, [r4, #4]
 80059da:	3f01      	subs	r7, #1
 80059dc:	d504      	bpl.n	80059e8 <_fwalk_sglue+0x1c>
 80059de:	6824      	ldr	r4, [r4, #0]
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d1f8      	bne.n	80059d6 <_fwalk_sglue+0xa>
 80059e4:	0030      	movs	r0, r6
 80059e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059e8:	89ab      	ldrh	r3, [r5, #12]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d908      	bls.n	8005a00 <_fwalk_sglue+0x34>
 80059ee:	220e      	movs	r2, #14
 80059f0:	5eab      	ldrsh	r3, [r5, r2]
 80059f2:	3301      	adds	r3, #1
 80059f4:	d004      	beq.n	8005a00 <_fwalk_sglue+0x34>
 80059f6:	0029      	movs	r1, r5
 80059f8:	9800      	ldr	r0, [sp, #0]
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	4798      	blx	r3
 80059fe:	4306      	orrs	r6, r0
 8005a00:	3568      	adds	r5, #104	; 0x68
 8005a02:	e7ea      	b.n	80059da <_fwalk_sglue+0xe>

08005a04 <iprintf>:
 8005a04:	b40f      	push	{r0, r1, r2, r3}
 8005a06:	b507      	push	{r0, r1, r2, lr}
 8005a08:	4905      	ldr	r1, [pc, #20]	; (8005a20 <iprintf+0x1c>)
 8005a0a:	ab04      	add	r3, sp, #16
 8005a0c:	6808      	ldr	r0, [r1, #0]
 8005a0e:	cb04      	ldmia	r3!, {r2}
 8005a10:	6881      	ldr	r1, [r0, #8]
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	f000 fb00 	bl	8006018 <_vfiprintf_r>
 8005a18:	b003      	add	sp, #12
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	b004      	add	sp, #16
 8005a1e:	4718      	bx	r3
 8005a20:	20000064 	.word	0x20000064

08005a24 <_puts_r>:
 8005a24:	6a03      	ldr	r3, [r0, #32]
 8005a26:	b570      	push	{r4, r5, r6, lr}
 8005a28:	0005      	movs	r5, r0
 8005a2a:	000e      	movs	r6, r1
 8005a2c:	6884      	ldr	r4, [r0, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <_puts_r+0x12>
 8005a32:	f7ff ffb3 	bl	800599c <__sinit>
 8005a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a38:	07db      	lsls	r3, r3, #31
 8005a3a:	d405      	bmi.n	8005a48 <_puts_r+0x24>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	059b      	lsls	r3, r3, #22
 8005a40:	d402      	bmi.n	8005a48 <_puts_r+0x24>
 8005a42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a44:	f000 f9c0 	bl	8005dc8 <__retarget_lock_acquire_recursive>
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	071b      	lsls	r3, r3, #28
 8005a4c:	d502      	bpl.n	8005a54 <_puts_r+0x30>
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d11f      	bne.n	8005a94 <_puts_r+0x70>
 8005a54:	0021      	movs	r1, r4
 8005a56:	0028      	movs	r0, r5
 8005a58:	f000 f8d2 	bl	8005c00 <__swsetup_r>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d019      	beq.n	8005a94 <_puts_r+0x70>
 8005a60:	2501      	movs	r5, #1
 8005a62:	426d      	negs	r5, r5
 8005a64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a66:	07db      	lsls	r3, r3, #31
 8005a68:	d405      	bmi.n	8005a76 <_puts_r+0x52>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	d402      	bmi.n	8005a76 <_puts_r+0x52>
 8005a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a72:	f000 f9aa 	bl	8005dca <__retarget_lock_release_recursive>
 8005a76:	0028      	movs	r0, r5
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	3601      	adds	r6, #1
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da04      	bge.n	8005a8c <_puts_r+0x68>
 8005a82:	69a2      	ldr	r2, [r4, #24]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	dc16      	bgt.n	8005ab6 <_puts_r+0x92>
 8005a88:	290a      	cmp	r1, #10
 8005a8a:	d014      	beq.n	8005ab6 <_puts_r+0x92>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	6022      	str	r2, [r4, #0]
 8005a92:	7019      	strb	r1, [r3, #0]
 8005a94:	68a3      	ldr	r3, [r4, #8]
 8005a96:	7831      	ldrb	r1, [r6, #0]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d1ed      	bne.n	8005a7a <_puts_r+0x56>
 8005a9e:	60a3      	str	r3, [r4, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da0f      	bge.n	8005ac4 <_puts_r+0xa0>
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	0022      	movs	r2, r4
 8005aa8:	310a      	adds	r1, #10
 8005aaa:	f000 f867 	bl	8005b7c <__swbuf_r>
 8005aae:	250a      	movs	r5, #10
 8005ab0:	3001      	adds	r0, #1
 8005ab2:	d1d7      	bne.n	8005a64 <_puts_r+0x40>
 8005ab4:	e7d4      	b.n	8005a60 <_puts_r+0x3c>
 8005ab6:	0022      	movs	r2, r4
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f000 f85f 	bl	8005b7c <__swbuf_r>
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d1e8      	bne.n	8005a94 <_puts_r+0x70>
 8005ac2:	e7cd      	b.n	8005a60 <_puts_r+0x3c>
 8005ac4:	250a      	movs	r5, #10
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	701d      	strb	r5, [r3, #0]
 8005ace:	e7c9      	b.n	8005a64 <_puts_r+0x40>

08005ad0 <puts>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <puts+0x10>)
 8005ad4:	0001      	movs	r1, r0
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	f7ff ffa4 	bl	8005a24 <_puts_r>
 8005adc:	bd10      	pop	{r4, pc}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	20000064 	.word	0x20000064

08005ae4 <__sread>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	000c      	movs	r4, r1
 8005ae8:	250e      	movs	r5, #14
 8005aea:	5f49      	ldrsh	r1, [r1, r5]
 8005aec:	f000 f91a 	bl	8005d24 <_read_r>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	db03      	blt.n	8005afc <__sread+0x18>
 8005af4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005af6:	181b      	adds	r3, r3, r0
 8005af8:	6563      	str	r3, [r4, #84]	; 0x54
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	4a02      	ldr	r2, [pc, #8]	; (8005b08 <__sread+0x24>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	e7f9      	b.n	8005afa <__sread+0x16>
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	ffffefff 	.word	0xffffefff

08005b0c <__swrite>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	001f      	movs	r7, r3
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	0005      	movs	r5, r0
 8005b14:	000c      	movs	r4, r1
 8005b16:	0016      	movs	r6, r2
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	d505      	bpl.n	8005b28 <__swrite+0x1c>
 8005b1c:	230e      	movs	r3, #14
 8005b1e:	5ec9      	ldrsh	r1, [r1, r3]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2302      	movs	r3, #2
 8005b24:	f000 f8ea 	bl	8005cfc <_lseek_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	4a05      	ldr	r2, [pc, #20]	; (8005b40 <__swrite+0x34>)
 8005b2c:	0028      	movs	r0, r5
 8005b2e:	4013      	ands	r3, r2
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	0032      	movs	r2, r6
 8005b34:	230e      	movs	r3, #14
 8005b36:	5ee1      	ldrsh	r1, [r4, r3]
 8005b38:	003b      	movs	r3, r7
 8005b3a:	f000 f907 	bl	8005d4c <_write_r>
 8005b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b40:	ffffefff 	.word	0xffffefff

08005b44 <__sseek>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	000c      	movs	r4, r1
 8005b48:	250e      	movs	r5, #14
 8005b4a:	5f49      	ldrsh	r1, [r1, r5]
 8005b4c:	f000 f8d6 	bl	8005cfc <_lseek_r>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	1c42      	adds	r2, r0, #1
 8005b54:	d103      	bne.n	8005b5e <__sseek+0x1a>
 8005b56:	4a05      	ldr	r2, [pc, #20]	; (8005b6c <__sseek+0x28>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	2280      	movs	r2, #128	; 0x80
 8005b60:	0152      	lsls	r2, r2, #5
 8005b62:	4313      	orrs	r3, r2
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	6560      	str	r0, [r4, #84]	; 0x54
 8005b68:	e7f8      	b.n	8005b5c <__sseek+0x18>
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	ffffefff 	.word	0xffffefff

08005b70 <__sclose>:
 8005b70:	b510      	push	{r4, lr}
 8005b72:	230e      	movs	r3, #14
 8005b74:	5ec9      	ldrsh	r1, [r1, r3]
 8005b76:	f000 f8af 	bl	8005cd8 <_close_r>
 8005b7a:	bd10      	pop	{r4, pc}

08005b7c <__swbuf_r>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	0006      	movs	r6, r0
 8005b80:	000d      	movs	r5, r1
 8005b82:	0014      	movs	r4, r2
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d004      	beq.n	8005b92 <__swbuf_r+0x16>
 8005b88:	6a03      	ldr	r3, [r0, #32]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <__swbuf_r+0x16>
 8005b8e:	f7ff ff05 	bl	800599c <__sinit>
 8005b92:	69a3      	ldr	r3, [r4, #24]
 8005b94:	60a3      	str	r3, [r4, #8]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	d528      	bpl.n	8005bee <__swbuf_r+0x72>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d025      	beq.n	8005bee <__swbuf_r+0x72>
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	b2ef      	uxtb	r7, r5
 8005ba8:	1ac0      	subs	r0, r0, r3
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	b2ed      	uxtb	r5, r5
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	dc05      	bgt.n	8005bbe <__swbuf_r+0x42>
 8005bb2:	0021      	movs	r1, r4
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	f000 fd55 	bl	8006664 <_fflush_r>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d11d      	bne.n	8005bfa <__swbuf_r+0x7e>
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	60a3      	str	r3, [r4, #8]
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	6022      	str	r2, [r4, #0]
 8005bcc:	701f      	strb	r7, [r3, #0]
 8005bce:	6963      	ldr	r3, [r4, #20]
 8005bd0:	4283      	cmp	r3, r0
 8005bd2:	d004      	beq.n	8005bde <__swbuf_r+0x62>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d507      	bpl.n	8005bea <__swbuf_r+0x6e>
 8005bda:	2d0a      	cmp	r5, #10
 8005bdc:	d105      	bne.n	8005bea <__swbuf_r+0x6e>
 8005bde:	0021      	movs	r1, r4
 8005be0:	0030      	movs	r0, r6
 8005be2:	f000 fd3f 	bl	8006664 <_fflush_r>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d107      	bne.n	8005bfa <__swbuf_r+0x7e>
 8005bea:	0028      	movs	r0, r5
 8005bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bee:	0021      	movs	r1, r4
 8005bf0:	0030      	movs	r0, r6
 8005bf2:	f000 f805 	bl	8005c00 <__swsetup_r>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d0d3      	beq.n	8005ba2 <__swbuf_r+0x26>
 8005bfa:	2501      	movs	r5, #1
 8005bfc:	426d      	negs	r5, r5
 8005bfe:	e7f4      	b.n	8005bea <__swbuf_r+0x6e>

08005c00 <__swsetup_r>:
 8005c00:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <__swsetup_r+0xc4>)
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	0005      	movs	r5, r0
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	000c      	movs	r4, r1
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d004      	beq.n	8005c18 <__swsetup_r+0x18>
 8005c0e:	6a03      	ldr	r3, [r0, #32]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <__swsetup_r+0x18>
 8005c14:	f7ff fec2 	bl	800599c <__sinit>
 8005c18:	230c      	movs	r3, #12
 8005c1a:	5ee2      	ldrsh	r2, [r4, r3]
 8005c1c:	b293      	uxth	r3, r2
 8005c1e:	0711      	lsls	r1, r2, #28
 8005c20:	d423      	bmi.n	8005c6a <__swsetup_r+0x6a>
 8005c22:	06d9      	lsls	r1, r3, #27
 8005c24:	d407      	bmi.n	8005c36 <__swsetup_r+0x36>
 8005c26:	2309      	movs	r3, #9
 8005c28:	2001      	movs	r0, #1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	3337      	adds	r3, #55	; 0x37
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	81a3      	strh	r3, [r4, #12]
 8005c32:	4240      	negs	r0, r0
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	075b      	lsls	r3, r3, #29
 8005c38:	d513      	bpl.n	8005c62 <__swsetup_r+0x62>
 8005c3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d008      	beq.n	8005c52 <__swsetup_r+0x52>
 8005c40:	0023      	movs	r3, r4
 8005c42:	3344      	adds	r3, #68	; 0x44
 8005c44:	4299      	cmp	r1, r3
 8005c46:	d002      	beq.n	8005c4e <__swsetup_r+0x4e>
 8005c48:	0028      	movs	r0, r5
 8005c4a:	f000 f8bf 	bl	8005dcc <_free_r>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6363      	str	r3, [r4, #52]	; 0x34
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	4393      	bics	r3, r2
 8005c58:	81a3      	strh	r3, [r4, #12]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	2308      	movs	r3, #8
 8005c64:	89a2      	ldrh	r2, [r4, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	81a3      	strh	r3, [r4, #12]
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <__swsetup_r+0x88>
 8005c70:	21a0      	movs	r1, #160	; 0xa0
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	0089      	lsls	r1, r1, #2
 8005c78:	0092      	lsls	r2, r2, #2
 8005c7a:	400b      	ands	r3, r1
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <__swsetup_r+0x88>
 8005c80:	0021      	movs	r1, r4
 8005c82:	0028      	movs	r0, r5
 8005c84:	f000 fd42 	bl	800670c <__smakebuf_r>
 8005c88:	220c      	movs	r2, #12
 8005c8a:	5ea3      	ldrsh	r3, [r4, r2]
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	001a      	movs	r2, r3
 8005c90:	b299      	uxth	r1, r3
 8005c92:	4002      	ands	r2, r0
 8005c94:	4203      	tst	r3, r0
 8005c96:	d00f      	beq.n	8005cb8 <__swsetup_r+0xb8>
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60a2      	str	r2, [r4, #8]
 8005c9c:	6962      	ldr	r2, [r4, #20]
 8005c9e:	4252      	negs	r2, r2
 8005ca0:	61a2      	str	r2, [r4, #24]
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	6922      	ldr	r2, [r4, #16]
 8005ca6:	4282      	cmp	r2, r0
 8005ca8:	d1c4      	bne.n	8005c34 <__swsetup_r+0x34>
 8005caa:	0609      	lsls	r1, r1, #24
 8005cac:	d5c2      	bpl.n	8005c34 <__swsetup_r+0x34>
 8005cae:	2240      	movs	r2, #64	; 0x40
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	3801      	subs	r0, #1
 8005cb6:	e7bd      	b.n	8005c34 <__swsetup_r+0x34>
 8005cb8:	0788      	lsls	r0, r1, #30
 8005cba:	d400      	bmi.n	8005cbe <__swsetup_r+0xbe>
 8005cbc:	6962      	ldr	r2, [r4, #20]
 8005cbe:	60a2      	str	r2, [r4, #8]
 8005cc0:	e7ef      	b.n	8005ca2 <__swsetup_r+0xa2>
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	20000064 	.word	0x20000064

08005cc8 <memset>:
 8005cc8:	0003      	movs	r3, r0
 8005cca:	1882      	adds	r2, r0, r2
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	7019      	strb	r1, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <_close_r>:
 8005cd8:	2300      	movs	r3, #0
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	4d06      	ldr	r5, [pc, #24]	; (8005cf8 <_close_r+0x20>)
 8005cde:	0004      	movs	r4, r0
 8005ce0:	0008      	movs	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fc fef7 	bl	8002ad6 <_close>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_close_r+0x1c>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d000      	beq.n	8005cf4 <_close_r+0x1c>
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	20000598 	.word	0x20000598

08005cfc <_lseek_r>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	0004      	movs	r4, r0
 8005d00:	0008      	movs	r0, r1
 8005d02:	0011      	movs	r1, r2
 8005d04:	001a      	movs	r2, r3
 8005d06:	2300      	movs	r3, #0
 8005d08:	4d05      	ldr	r5, [pc, #20]	; (8005d20 <_lseek_r+0x24>)
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fc ff04 	bl	8002b18 <_lseek>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d103      	bne.n	8005d1c <_lseek_r+0x20>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d000      	beq.n	8005d1c <_lseek_r+0x20>
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	20000598 	.word	0x20000598

08005d24 <_read_r>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	0004      	movs	r4, r0
 8005d28:	0008      	movs	r0, r1
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	001a      	movs	r2, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4d05      	ldr	r5, [pc, #20]	; (8005d48 <_read_r+0x24>)
 8005d32:	602b      	str	r3, [r5, #0]
 8005d34:	f7fc fe96 	bl	8002a64 <_read>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d103      	bne.n	8005d44 <_read_r+0x20>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d000      	beq.n	8005d44 <_read_r+0x20>
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	20000598 	.word	0x20000598

08005d4c <_write_r>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	0004      	movs	r4, r0
 8005d50:	0008      	movs	r0, r1
 8005d52:	0011      	movs	r1, r2
 8005d54:	001a      	movs	r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	4d05      	ldr	r5, [pc, #20]	; (8005d70 <_write_r+0x24>)
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fc fe9f 	bl	8002a9e <_write>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d103      	bne.n	8005d6c <_write_r+0x20>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d000      	beq.n	8005d6c <_write_r+0x20>
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	20000598 	.word	0x20000598

08005d74 <__errno>:
 8005d74:	4b01      	ldr	r3, [pc, #4]	; (8005d7c <__errno+0x8>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	20000064 	.word	0x20000064

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	2600      	movs	r6, #0
 8005d84:	4c0c      	ldr	r4, [pc, #48]	; (8005db8 <__libc_init_array+0x38>)
 8005d86:	4d0d      	ldr	r5, [pc, #52]	; (8005dbc <__libc_init_array+0x3c>)
 8005d88:	1b64      	subs	r4, r4, r5
 8005d8a:	10a4      	asrs	r4, r4, #2
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	2600      	movs	r6, #0
 8005d92:	f000 fe4d 	bl	8006a30 <_init>
 8005d96:	4c0a      	ldr	r4, [pc, #40]	; (8005dc0 <__libc_init_array+0x40>)
 8005d98:	4d0a      	ldr	r5, [pc, #40]	; (8005dc4 <__libc_init_array+0x44>)
 8005d9a:	1b64      	subs	r4, r4, r5
 8005d9c:	10a4      	asrs	r4, r4, #2
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	00b3      	lsls	r3, r6, #2
 8005da6:	58eb      	ldr	r3, [r5, r3]
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	00b3      	lsls	r3, r6, #2
 8005db0:	58eb      	ldr	r3, [r5, r3]
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08006b70 	.word	0x08006b70
 8005dbc:	08006b70 	.word	0x08006b70
 8005dc0:	08006b74 	.word	0x08006b74
 8005dc4:	08006b70 	.word	0x08006b70

08005dc8 <__retarget_lock_acquire_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <__retarget_lock_release_recursive>:
 8005dca:	4770      	bx	lr

08005dcc <_free_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	0005      	movs	r5, r0
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d010      	beq.n	8005df6 <_free_r+0x2a>
 8005dd4:	1f0c      	subs	r4, r1, #4
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da00      	bge.n	8005dde <_free_r+0x12>
 8005ddc:	18e4      	adds	r4, r4, r3
 8005dde:	0028      	movs	r0, r5
 8005de0:	f000 f8e2 	bl	8005fa8 <__malloc_lock>
 8005de4:	4a1d      	ldr	r2, [pc, #116]	; (8005e5c <_free_r+0x90>)
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <_free_r+0x2c>
 8005dec:	6063      	str	r3, [r4, #4]
 8005dee:	6014      	str	r4, [r2, #0]
 8005df0:	0028      	movs	r0, r5
 8005df2:	f000 f8e1 	bl	8005fb8 <__malloc_unlock>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d908      	bls.n	8005e0e <_free_r+0x42>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	1821      	adds	r1, r4, r0
 8005e00:	428b      	cmp	r3, r1
 8005e02:	d1f3      	bne.n	8005dec <_free_r+0x20>
 8005e04:	6819      	ldr	r1, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	1809      	adds	r1, r1, r0
 8005e0a:	6021      	str	r1, [r4, #0]
 8005e0c:	e7ee      	b.n	8005dec <_free_r+0x20>
 8005e0e:	001a      	movs	r2, r3
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <_free_r+0x4e>
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	d9f9      	bls.n	8005e0e <_free_r+0x42>
 8005e1a:	6811      	ldr	r1, [r2, #0]
 8005e1c:	1850      	adds	r0, r2, r1
 8005e1e:	42a0      	cmp	r0, r4
 8005e20:	d10b      	bne.n	8005e3a <_free_r+0x6e>
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	1809      	adds	r1, r1, r0
 8005e26:	1850      	adds	r0, r2, r1
 8005e28:	6011      	str	r1, [r2, #0]
 8005e2a:	4283      	cmp	r3, r0
 8005e2c:	d1e0      	bne.n	8005df0 <_free_r+0x24>
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	1841      	adds	r1, r0, r1
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	6053      	str	r3, [r2, #4]
 8005e38:	e7da      	b.n	8005df0 <_free_r+0x24>
 8005e3a:	42a0      	cmp	r0, r4
 8005e3c:	d902      	bls.n	8005e44 <_free_r+0x78>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	e7d5      	b.n	8005df0 <_free_r+0x24>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	1821      	adds	r1, r4, r0
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	d103      	bne.n	8005e54 <_free_r+0x88>
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	1809      	adds	r1, r1, r0
 8005e52:	6021      	str	r1, [r4, #0]
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	6054      	str	r4, [r2, #4]
 8005e58:	e7ca      	b.n	8005df0 <_free_r+0x24>
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	200005a0 	.word	0x200005a0

08005e60 <sbrk_aligned>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4e0f      	ldr	r6, [pc, #60]	; (8005ea0 <sbrk_aligned+0x40>)
 8005e64:	000d      	movs	r5, r1
 8005e66:	6831      	ldr	r1, [r6, #0]
 8005e68:	0004      	movs	r4, r0
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	d102      	bne.n	8005e74 <sbrk_aligned+0x14>
 8005e6e:	f000 fcaf 	bl	80067d0 <_sbrk_r>
 8005e72:	6030      	str	r0, [r6, #0]
 8005e74:	0029      	movs	r1, r5
 8005e76:	0020      	movs	r0, r4
 8005e78:	f000 fcaa 	bl	80067d0 <_sbrk_r>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d00a      	beq.n	8005e96 <sbrk_aligned+0x36>
 8005e80:	2303      	movs	r3, #3
 8005e82:	1cc5      	adds	r5, r0, #3
 8005e84:	439d      	bics	r5, r3
 8005e86:	42a8      	cmp	r0, r5
 8005e88:	d007      	beq.n	8005e9a <sbrk_aligned+0x3a>
 8005e8a:	1a29      	subs	r1, r5, r0
 8005e8c:	0020      	movs	r0, r4
 8005e8e:	f000 fc9f 	bl	80067d0 <_sbrk_r>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d101      	bne.n	8005e9a <sbrk_aligned+0x3a>
 8005e96:	2501      	movs	r5, #1
 8005e98:	426d      	negs	r5, r5
 8005e9a:	0028      	movs	r0, r5
 8005e9c:	bd70      	pop	{r4, r5, r6, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	200005a4 	.word	0x200005a4

08005ea4 <_malloc_r>:
 8005ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	1ccb      	adds	r3, r1, #3
 8005eaa:	4393      	bics	r3, r2
 8005eac:	3308      	adds	r3, #8
 8005eae:	0006      	movs	r6, r0
 8005eb0:	001f      	movs	r7, r3
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d238      	bcs.n	8005f28 <_malloc_r+0x84>
 8005eb6:	270c      	movs	r7, #12
 8005eb8:	42b9      	cmp	r1, r7
 8005eba:	d837      	bhi.n	8005f2c <_malloc_r+0x88>
 8005ebc:	0030      	movs	r0, r6
 8005ebe:	f000 f873 	bl	8005fa8 <__malloc_lock>
 8005ec2:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <_malloc_r+0x100>)
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	001c      	movs	r4, r3
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d133      	bne.n	8005f36 <_malloc_r+0x92>
 8005ece:	0039      	movs	r1, r7
 8005ed0:	0030      	movs	r0, r6
 8005ed2:	f7ff ffc5 	bl	8005e60 <sbrk_aligned>
 8005ed6:	0004      	movs	r4, r0
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d15e      	bne.n	8005f9a <_malloc_r+0xf6>
 8005edc:	9b00      	ldr	r3, [sp, #0]
 8005ede:	681c      	ldr	r4, [r3, #0]
 8005ee0:	0025      	movs	r5, r4
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	d14e      	bne.n	8005f84 <_malloc_r+0xe0>
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	d051      	beq.n	8005f8e <_malloc_r+0xea>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	0029      	movs	r1, r5
 8005eee:	18e3      	adds	r3, r4, r3
 8005ef0:	0030      	movs	r0, r6
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	f000 fc6c 	bl	80067d0 <_sbrk_r>
 8005ef8:	9b01      	ldr	r3, [sp, #4]
 8005efa:	4283      	cmp	r3, r0
 8005efc:	d147      	bne.n	8005f8e <_malloc_r+0xea>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0030      	movs	r0, r6
 8005f02:	1aff      	subs	r7, r7, r3
 8005f04:	0039      	movs	r1, r7
 8005f06:	f7ff ffab 	bl	8005e60 <sbrk_aligned>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d03f      	beq.n	8005f8e <_malloc_r+0xea>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	19db      	adds	r3, r3, r7
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	9b00      	ldr	r3, [sp, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d040      	beq.n	8005f9e <_malloc_r+0xfa>
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	42a2      	cmp	r2, r4
 8005f20:	d133      	bne.n	8005f8a <_malloc_r+0xe6>
 8005f22:	2200      	movs	r2, #0
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	e014      	b.n	8005f52 <_malloc_r+0xae>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dac5      	bge.n	8005eb8 <_malloc_r+0x14>
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	2500      	movs	r5, #0
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	0028      	movs	r0, r5
 8005f34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	1bc9      	subs	r1, r1, r7
 8005f3a:	d420      	bmi.n	8005f7e <_malloc_r+0xda>
 8005f3c:	290b      	cmp	r1, #11
 8005f3e:	d918      	bls.n	8005f72 <_malloc_r+0xce>
 8005f40:	19e2      	adds	r2, r4, r7
 8005f42:	6027      	str	r7, [r4, #0]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d112      	bne.n	8005f6e <_malloc_r+0xca>
 8005f48:	9b00      	ldr	r3, [sp, #0]
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	6011      	str	r1, [r2, #0]
 8005f50:	6053      	str	r3, [r2, #4]
 8005f52:	0030      	movs	r0, r6
 8005f54:	0025      	movs	r5, r4
 8005f56:	f000 f82f 	bl	8005fb8 <__malloc_unlock>
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	350b      	adds	r5, #11
 8005f5e:	1d23      	adds	r3, r4, #4
 8005f60:	4395      	bics	r5, r2
 8005f62:	1aea      	subs	r2, r5, r3
 8005f64:	429d      	cmp	r5, r3
 8005f66:	d0e4      	beq.n	8005f32 <_malloc_r+0x8e>
 8005f68:	1b5b      	subs	r3, r3, r5
 8005f6a:	50a3      	str	r3, [r4, r2]
 8005f6c:	e7e1      	b.n	8005f32 <_malloc_r+0x8e>
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	e7ec      	b.n	8005f4c <_malloc_r+0xa8>
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d1d5      	bne.n	8005f24 <_malloc_r+0x80>
 8005f78:	9b00      	ldr	r3, [sp, #0]
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e7e9      	b.n	8005f52 <_malloc_r+0xae>
 8005f7e:	0023      	movs	r3, r4
 8005f80:	6864      	ldr	r4, [r4, #4]
 8005f82:	e7a2      	b.n	8005eca <_malloc_r+0x26>
 8005f84:	002c      	movs	r4, r5
 8005f86:	686d      	ldr	r5, [r5, #4]
 8005f88:	e7ab      	b.n	8005ee2 <_malloc_r+0x3e>
 8005f8a:	0013      	movs	r3, r2
 8005f8c:	e7c4      	b.n	8005f18 <_malloc_r+0x74>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	0030      	movs	r0, r6
 8005f92:	6033      	str	r3, [r6, #0]
 8005f94:	f000 f810 	bl	8005fb8 <__malloc_unlock>
 8005f98:	e7cb      	b.n	8005f32 <_malloc_r+0x8e>
 8005f9a:	6027      	str	r7, [r4, #0]
 8005f9c:	e7d9      	b.n	8005f52 <_malloc_r+0xae>
 8005f9e:	605b      	str	r3, [r3, #4]
 8005fa0:	deff      	udf	#255	; 0xff
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	200005a0 	.word	0x200005a0

08005fa8 <__malloc_lock>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	4802      	ldr	r0, [pc, #8]	; (8005fb4 <__malloc_lock+0xc>)
 8005fac:	f7ff ff0c 	bl	8005dc8 <__retarget_lock_acquire_recursive>
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	2000059c 	.word	0x2000059c

08005fb8 <__malloc_unlock>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <__malloc_unlock+0xc>)
 8005fbc:	f7ff ff05 	bl	8005dca <__retarget_lock_release_recursive>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	2000059c 	.word	0x2000059c

08005fc8 <__sfputc_r>:
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	6093      	str	r3, [r2, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da04      	bge.n	8005fde <__sfputc_r+0x16>
 8005fd4:	6994      	ldr	r4, [r2, #24]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	db07      	blt.n	8005fea <__sfputc_r+0x22>
 8005fda:	290a      	cmp	r1, #10
 8005fdc:	d005      	beq.n	8005fea <__sfputc_r+0x22>
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	1c58      	adds	r0, r3, #1
 8005fe2:	6010      	str	r0, [r2, #0]
 8005fe4:	7019      	strb	r1, [r3, #0]
 8005fe6:	0008      	movs	r0, r1
 8005fe8:	bd10      	pop	{r4, pc}
 8005fea:	f7ff fdc7 	bl	8005b7c <__swbuf_r>
 8005fee:	0001      	movs	r1, r0
 8005ff0:	e7f9      	b.n	8005fe6 <__sfputc_r+0x1e>

08005ff2 <__sfputs_r>:
 8005ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff4:	0006      	movs	r6, r0
 8005ff6:	000f      	movs	r7, r1
 8005ff8:	0014      	movs	r4, r2
 8005ffa:	18d5      	adds	r5, r2, r3
 8005ffc:	42ac      	cmp	r4, r5
 8005ffe:	d101      	bne.n	8006004 <__sfputs_r+0x12>
 8006000:	2000      	movs	r0, #0
 8006002:	e007      	b.n	8006014 <__sfputs_r+0x22>
 8006004:	7821      	ldrb	r1, [r4, #0]
 8006006:	003a      	movs	r2, r7
 8006008:	0030      	movs	r0, r6
 800600a:	f7ff ffdd 	bl	8005fc8 <__sfputc_r>
 800600e:	3401      	adds	r4, #1
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d1f3      	bne.n	8005ffc <__sfputs_r+0xa>
 8006014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006018 <_vfiprintf_r>:
 8006018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601a:	b0a1      	sub	sp, #132	; 0x84
 800601c:	000f      	movs	r7, r1
 800601e:	0015      	movs	r5, r2
 8006020:	001e      	movs	r6, r3
 8006022:	9003      	str	r0, [sp, #12]
 8006024:	2800      	cmp	r0, #0
 8006026:	d004      	beq.n	8006032 <_vfiprintf_r+0x1a>
 8006028:	6a03      	ldr	r3, [r0, #32]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <_vfiprintf_r+0x1a>
 800602e:	f7ff fcb5 	bl	800599c <__sinit>
 8006032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006034:	07db      	lsls	r3, r3, #31
 8006036:	d405      	bmi.n	8006044 <_vfiprintf_r+0x2c>
 8006038:	89bb      	ldrh	r3, [r7, #12]
 800603a:	059b      	lsls	r3, r3, #22
 800603c:	d402      	bmi.n	8006044 <_vfiprintf_r+0x2c>
 800603e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006040:	f7ff fec2 	bl	8005dc8 <__retarget_lock_acquire_recursive>
 8006044:	89bb      	ldrh	r3, [r7, #12]
 8006046:	071b      	lsls	r3, r3, #28
 8006048:	d502      	bpl.n	8006050 <_vfiprintf_r+0x38>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d113      	bne.n	8006078 <_vfiprintf_r+0x60>
 8006050:	0039      	movs	r1, r7
 8006052:	9803      	ldr	r0, [sp, #12]
 8006054:	f7ff fdd4 	bl	8005c00 <__swsetup_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	d00d      	beq.n	8006078 <_vfiprintf_r+0x60>
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	07db      	lsls	r3, r3, #31
 8006060:	d503      	bpl.n	800606a <_vfiprintf_r+0x52>
 8006062:	2001      	movs	r0, #1
 8006064:	4240      	negs	r0, r0
 8006066:	b021      	add	sp, #132	; 0x84
 8006068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606a:	89bb      	ldrh	r3, [r7, #12]
 800606c:	059b      	lsls	r3, r3, #22
 800606e:	d4f8      	bmi.n	8006062 <_vfiprintf_r+0x4a>
 8006070:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006072:	f7ff feaa 	bl	8005dca <__retarget_lock_release_recursive>
 8006076:	e7f4      	b.n	8006062 <_vfiprintf_r+0x4a>
 8006078:	2300      	movs	r3, #0
 800607a:	ac08      	add	r4, sp, #32
 800607c:	6163      	str	r3, [r4, #20]
 800607e:	3320      	adds	r3, #32
 8006080:	7663      	strb	r3, [r4, #25]
 8006082:	3310      	adds	r3, #16
 8006084:	76a3      	strb	r3, [r4, #26]
 8006086:	9607      	str	r6, [sp, #28]
 8006088:	002e      	movs	r6, r5
 800608a:	7833      	ldrb	r3, [r6, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <_vfiprintf_r+0x7c>
 8006090:	2b25      	cmp	r3, #37	; 0x25
 8006092:	d148      	bne.n	8006126 <_vfiprintf_r+0x10e>
 8006094:	1b73      	subs	r3, r6, r5
 8006096:	9305      	str	r3, [sp, #20]
 8006098:	42ae      	cmp	r6, r5
 800609a:	d00b      	beq.n	80060b4 <_vfiprintf_r+0x9c>
 800609c:	002a      	movs	r2, r5
 800609e:	0039      	movs	r1, r7
 80060a0:	9803      	ldr	r0, [sp, #12]
 80060a2:	f7ff ffa6 	bl	8005ff2 <__sfputs_r>
 80060a6:	3001      	adds	r0, #1
 80060a8:	d100      	bne.n	80060ac <_vfiprintf_r+0x94>
 80060aa:	e0af      	b.n	800620c <_vfiprintf_r+0x1f4>
 80060ac:	6963      	ldr	r3, [r4, #20]
 80060ae:	9a05      	ldr	r2, [sp, #20]
 80060b0:	189b      	adds	r3, r3, r2
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	7833      	ldrb	r3, [r6, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d100      	bne.n	80060bc <_vfiprintf_r+0xa4>
 80060ba:	e0a7      	b.n	800620c <_vfiprintf_r+0x1f4>
 80060bc:	2201      	movs	r2, #1
 80060be:	2300      	movs	r3, #0
 80060c0:	4252      	negs	r2, r2
 80060c2:	6062      	str	r2, [r4, #4]
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	3254      	adds	r2, #84	; 0x54
 80060c8:	1852      	adds	r2, r2, r1
 80060ca:	1c75      	adds	r5, r6, #1
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	60e3      	str	r3, [r4, #12]
 80060d0:	60a3      	str	r3, [r4, #8]
 80060d2:	7013      	strb	r3, [r2, #0]
 80060d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80060d6:	4b59      	ldr	r3, [pc, #356]	; (800623c <_vfiprintf_r+0x224>)
 80060d8:	2205      	movs	r2, #5
 80060da:	0018      	movs	r0, r3
 80060dc:	7829      	ldrb	r1, [r5, #0]
 80060de:	9305      	str	r3, [sp, #20]
 80060e0:	f000 fb88 	bl	80067f4 <memchr>
 80060e4:	1c6e      	adds	r6, r5, #1
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d11f      	bne.n	800612a <_vfiprintf_r+0x112>
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	06d3      	lsls	r3, r2, #27
 80060ee:	d504      	bpl.n	80060fa <_vfiprintf_r+0xe2>
 80060f0:	2353      	movs	r3, #83	; 0x53
 80060f2:	a904      	add	r1, sp, #16
 80060f4:	185b      	adds	r3, r3, r1
 80060f6:	2120      	movs	r1, #32
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	0713      	lsls	r3, r2, #28
 80060fc:	d504      	bpl.n	8006108 <_vfiprintf_r+0xf0>
 80060fe:	2353      	movs	r3, #83	; 0x53
 8006100:	a904      	add	r1, sp, #16
 8006102:	185b      	adds	r3, r3, r1
 8006104:	212b      	movs	r1, #43	; 0x2b
 8006106:	7019      	strb	r1, [r3, #0]
 8006108:	782b      	ldrb	r3, [r5, #0]
 800610a:	2b2a      	cmp	r3, #42	; 0x2a
 800610c:	d016      	beq.n	800613c <_vfiprintf_r+0x124>
 800610e:	002e      	movs	r6, r5
 8006110:	2100      	movs	r1, #0
 8006112:	200a      	movs	r0, #10
 8006114:	68e3      	ldr	r3, [r4, #12]
 8006116:	7832      	ldrb	r2, [r6, #0]
 8006118:	1c75      	adds	r5, r6, #1
 800611a:	3a30      	subs	r2, #48	; 0x30
 800611c:	2a09      	cmp	r2, #9
 800611e:	d94e      	bls.n	80061be <_vfiprintf_r+0x1a6>
 8006120:	2900      	cmp	r1, #0
 8006122:	d111      	bne.n	8006148 <_vfiprintf_r+0x130>
 8006124:	e017      	b.n	8006156 <_vfiprintf_r+0x13e>
 8006126:	3601      	adds	r6, #1
 8006128:	e7af      	b.n	800608a <_vfiprintf_r+0x72>
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	1ac0      	subs	r0, r0, r3
 8006130:	2301      	movs	r3, #1
 8006132:	4083      	lsls	r3, r0
 8006134:	4313      	orrs	r3, r2
 8006136:	0035      	movs	r5, r6
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	e7cc      	b.n	80060d6 <_vfiprintf_r+0xbe>
 800613c:	9b07      	ldr	r3, [sp, #28]
 800613e:	1d19      	adds	r1, r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	9107      	str	r1, [sp, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db01      	blt.n	800614c <_vfiprintf_r+0x134>
 8006148:	930b      	str	r3, [sp, #44]	; 0x2c
 800614a:	e004      	b.n	8006156 <_vfiprintf_r+0x13e>
 800614c:	425b      	negs	r3, r3
 800614e:	60e3      	str	r3, [r4, #12]
 8006150:	2302      	movs	r3, #2
 8006152:	4313      	orrs	r3, r2
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	7833      	ldrb	r3, [r6, #0]
 8006158:	2b2e      	cmp	r3, #46	; 0x2e
 800615a:	d10a      	bne.n	8006172 <_vfiprintf_r+0x15a>
 800615c:	7873      	ldrb	r3, [r6, #1]
 800615e:	2b2a      	cmp	r3, #42	; 0x2a
 8006160:	d135      	bne.n	80061ce <_vfiprintf_r+0x1b6>
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	3602      	adds	r6, #2
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	9207      	str	r2, [sp, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	db2b      	blt.n	80061c8 <_vfiprintf_r+0x1b0>
 8006170:	9309      	str	r3, [sp, #36]	; 0x24
 8006172:	4d33      	ldr	r5, [pc, #204]	; (8006240 <_vfiprintf_r+0x228>)
 8006174:	2203      	movs	r2, #3
 8006176:	0028      	movs	r0, r5
 8006178:	7831      	ldrb	r1, [r6, #0]
 800617a:	f000 fb3b 	bl	80067f4 <memchr>
 800617e:	2800      	cmp	r0, #0
 8006180:	d006      	beq.n	8006190 <_vfiprintf_r+0x178>
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	1b40      	subs	r0, r0, r5
 8006186:	4083      	lsls	r3, r0
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	3601      	adds	r6, #1
 800618c:	4313      	orrs	r3, r2
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	7831      	ldrb	r1, [r6, #0]
 8006192:	2206      	movs	r2, #6
 8006194:	482b      	ldr	r0, [pc, #172]	; (8006244 <_vfiprintf_r+0x22c>)
 8006196:	1c75      	adds	r5, r6, #1
 8006198:	7621      	strb	r1, [r4, #24]
 800619a:	f000 fb2b 	bl	80067f4 <memchr>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d043      	beq.n	800622a <_vfiprintf_r+0x212>
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <_vfiprintf_r+0x230>)
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d125      	bne.n	80061f4 <_vfiprintf_r+0x1dc>
 80061a8:	2207      	movs	r2, #7
 80061aa:	9b07      	ldr	r3, [sp, #28]
 80061ac:	3307      	adds	r3, #7
 80061ae:	4393      	bics	r3, r2
 80061b0:	3308      	adds	r3, #8
 80061b2:	9307      	str	r3, [sp, #28]
 80061b4:	6963      	ldr	r3, [r4, #20]
 80061b6:	9a04      	ldr	r2, [sp, #16]
 80061b8:	189b      	adds	r3, r3, r2
 80061ba:	6163      	str	r3, [r4, #20]
 80061bc:	e764      	b.n	8006088 <_vfiprintf_r+0x70>
 80061be:	4343      	muls	r3, r0
 80061c0:	002e      	movs	r6, r5
 80061c2:	2101      	movs	r1, #1
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	e7a6      	b.n	8006116 <_vfiprintf_r+0xfe>
 80061c8:	2301      	movs	r3, #1
 80061ca:	425b      	negs	r3, r3
 80061cc:	e7d0      	b.n	8006170 <_vfiprintf_r+0x158>
 80061ce:	2300      	movs	r3, #0
 80061d0:	200a      	movs	r0, #10
 80061d2:	001a      	movs	r2, r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	7831      	ldrb	r1, [r6, #0]
 80061da:	1c75      	adds	r5, r6, #1
 80061dc:	3930      	subs	r1, #48	; 0x30
 80061de:	2909      	cmp	r1, #9
 80061e0:	d903      	bls.n	80061ea <_vfiprintf_r+0x1d2>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0c5      	beq.n	8006172 <_vfiprintf_r+0x15a>
 80061e6:	9209      	str	r2, [sp, #36]	; 0x24
 80061e8:	e7c3      	b.n	8006172 <_vfiprintf_r+0x15a>
 80061ea:	4342      	muls	r2, r0
 80061ec:	002e      	movs	r6, r5
 80061ee:	2301      	movs	r3, #1
 80061f0:	1852      	adds	r2, r2, r1
 80061f2:	e7f1      	b.n	80061d8 <_vfiprintf_r+0x1c0>
 80061f4:	aa07      	add	r2, sp, #28
 80061f6:	9200      	str	r2, [sp, #0]
 80061f8:	0021      	movs	r1, r4
 80061fa:	003a      	movs	r2, r7
 80061fc:	4b13      	ldr	r3, [pc, #76]	; (800624c <_vfiprintf_r+0x234>)
 80061fe:	9803      	ldr	r0, [sp, #12]
 8006200:	e000      	b.n	8006204 <_vfiprintf_r+0x1ec>
 8006202:	bf00      	nop
 8006204:	9004      	str	r0, [sp, #16]
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	3301      	adds	r3, #1
 800620a:	d1d3      	bne.n	80061b4 <_vfiprintf_r+0x19c>
 800620c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800620e:	07db      	lsls	r3, r3, #31
 8006210:	d405      	bmi.n	800621e <_vfiprintf_r+0x206>
 8006212:	89bb      	ldrh	r3, [r7, #12]
 8006214:	059b      	lsls	r3, r3, #22
 8006216:	d402      	bmi.n	800621e <_vfiprintf_r+0x206>
 8006218:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800621a:	f7ff fdd6 	bl	8005dca <__retarget_lock_release_recursive>
 800621e:	89bb      	ldrh	r3, [r7, #12]
 8006220:	065b      	lsls	r3, r3, #25
 8006222:	d500      	bpl.n	8006226 <_vfiprintf_r+0x20e>
 8006224:	e71d      	b.n	8006062 <_vfiprintf_r+0x4a>
 8006226:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006228:	e71d      	b.n	8006066 <_vfiprintf_r+0x4e>
 800622a:	aa07      	add	r2, sp, #28
 800622c:	9200      	str	r2, [sp, #0]
 800622e:	0021      	movs	r1, r4
 8006230:	003a      	movs	r2, r7
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <_vfiprintf_r+0x234>)
 8006234:	9803      	ldr	r0, [sp, #12]
 8006236:	f000 f87b 	bl	8006330 <_printf_i>
 800623a:	e7e3      	b.n	8006204 <_vfiprintf_r+0x1ec>
 800623c:	08006b3c 	.word	0x08006b3c
 8006240:	08006b42 	.word	0x08006b42
 8006244:	08006b46 	.word	0x08006b46
 8006248:	00000000 	.word	0x00000000
 800624c:	08005ff3 	.word	0x08005ff3

08006250 <_printf_common>:
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	0016      	movs	r6, r2
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	688a      	ldr	r2, [r1, #8]
 8006258:	690b      	ldr	r3, [r1, #16]
 800625a:	000c      	movs	r4, r1
 800625c:	9000      	str	r0, [sp, #0]
 800625e:	4293      	cmp	r3, r2
 8006260:	da00      	bge.n	8006264 <_printf_common+0x14>
 8006262:	0013      	movs	r3, r2
 8006264:	0022      	movs	r2, r4
 8006266:	6033      	str	r3, [r6, #0]
 8006268:	3243      	adds	r2, #67	; 0x43
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	2a00      	cmp	r2, #0
 800626e:	d001      	beq.n	8006274 <_printf_common+0x24>
 8006270:	3301      	adds	r3, #1
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	069b      	lsls	r3, r3, #26
 8006278:	d502      	bpl.n	8006280 <_printf_common+0x30>
 800627a:	6833      	ldr	r3, [r6, #0]
 800627c:	3302      	adds	r3, #2
 800627e:	6033      	str	r3, [r6, #0]
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	2306      	movs	r3, #6
 8006284:	0015      	movs	r5, r2
 8006286:	401d      	ands	r5, r3
 8006288:	421a      	tst	r2, r3
 800628a:	d027      	beq.n	80062dc <_printf_common+0x8c>
 800628c:	0023      	movs	r3, r4
 800628e:	3343      	adds	r3, #67	; 0x43
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	1e5a      	subs	r2, r3, #1
 8006294:	4193      	sbcs	r3, r2
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	0692      	lsls	r2, r2, #26
 800629a:	d430      	bmi.n	80062fe <_printf_common+0xae>
 800629c:	0022      	movs	r2, r4
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	9800      	ldr	r0, [sp, #0]
 80062a2:	9d08      	ldr	r5, [sp, #32]
 80062a4:	3243      	adds	r2, #67	; 0x43
 80062a6:	47a8      	blx	r5
 80062a8:	3001      	adds	r0, #1
 80062aa:	d025      	beq.n	80062f8 <_printf_common+0xa8>
 80062ac:	2206      	movs	r2, #6
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	2500      	movs	r5, #0
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	d105      	bne.n	80062c4 <_printf_common+0x74>
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	68e5      	ldr	r5, [r4, #12]
 80062bc:	1aed      	subs	r5, r5, r3
 80062be:	43eb      	mvns	r3, r5
 80062c0:	17db      	asrs	r3, r3, #31
 80062c2:	401d      	ands	r5, r3
 80062c4:	68a3      	ldr	r3, [r4, #8]
 80062c6:	6922      	ldr	r2, [r4, #16]
 80062c8:	4293      	cmp	r3, r2
 80062ca:	dd01      	ble.n	80062d0 <_printf_common+0x80>
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	18ed      	adds	r5, r5, r3
 80062d0:	2600      	movs	r6, #0
 80062d2:	42b5      	cmp	r5, r6
 80062d4:	d120      	bne.n	8006318 <_printf_common+0xc8>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e010      	b.n	80062fc <_printf_common+0xac>
 80062da:	3501      	adds	r5, #1
 80062dc:	68e3      	ldr	r3, [r4, #12]
 80062de:	6832      	ldr	r2, [r6, #0]
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	42ab      	cmp	r3, r5
 80062e4:	ddd2      	ble.n	800628c <_printf_common+0x3c>
 80062e6:	0022      	movs	r2, r4
 80062e8:	2301      	movs	r3, #1
 80062ea:	9901      	ldr	r1, [sp, #4]
 80062ec:	9800      	ldr	r0, [sp, #0]
 80062ee:	9f08      	ldr	r7, [sp, #32]
 80062f0:	3219      	adds	r2, #25
 80062f2:	47b8      	blx	r7
 80062f4:	3001      	adds	r0, #1
 80062f6:	d1f0      	bne.n	80062da <_printf_common+0x8a>
 80062f8:	2001      	movs	r0, #1
 80062fa:	4240      	negs	r0, r0
 80062fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062fe:	2030      	movs	r0, #48	; 0x30
 8006300:	18e1      	adds	r1, r4, r3
 8006302:	3143      	adds	r1, #67	; 0x43
 8006304:	7008      	strb	r0, [r1, #0]
 8006306:	0021      	movs	r1, r4
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	3145      	adds	r1, #69	; 0x45
 800630c:	7809      	ldrb	r1, [r1, #0]
 800630e:	18a2      	adds	r2, r4, r2
 8006310:	3243      	adds	r2, #67	; 0x43
 8006312:	3302      	adds	r3, #2
 8006314:	7011      	strb	r1, [r2, #0]
 8006316:	e7c1      	b.n	800629c <_printf_common+0x4c>
 8006318:	0022      	movs	r2, r4
 800631a:	2301      	movs	r3, #1
 800631c:	9901      	ldr	r1, [sp, #4]
 800631e:	9800      	ldr	r0, [sp, #0]
 8006320:	9f08      	ldr	r7, [sp, #32]
 8006322:	321a      	adds	r2, #26
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	d0e6      	beq.n	80062f8 <_printf_common+0xa8>
 800632a:	3601      	adds	r6, #1
 800632c:	e7d1      	b.n	80062d2 <_printf_common+0x82>
	...

08006330 <_printf_i>:
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006332:	b08b      	sub	sp, #44	; 0x2c
 8006334:	9206      	str	r2, [sp, #24]
 8006336:	000a      	movs	r2, r1
 8006338:	3243      	adds	r2, #67	; 0x43
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	9005      	str	r0, [sp, #20]
 800633e:	9204      	str	r2, [sp, #16]
 8006340:	7e0a      	ldrb	r2, [r1, #24]
 8006342:	000c      	movs	r4, r1
 8006344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006346:	2a78      	cmp	r2, #120	; 0x78
 8006348:	d809      	bhi.n	800635e <_printf_i+0x2e>
 800634a:	2a62      	cmp	r2, #98	; 0x62
 800634c:	d80b      	bhi.n	8006366 <_printf_i+0x36>
 800634e:	2a00      	cmp	r2, #0
 8006350:	d100      	bne.n	8006354 <_printf_i+0x24>
 8006352:	e0be      	b.n	80064d2 <_printf_i+0x1a2>
 8006354:	497c      	ldr	r1, [pc, #496]	; (8006548 <_printf_i+0x218>)
 8006356:	9103      	str	r1, [sp, #12]
 8006358:	2a58      	cmp	r2, #88	; 0x58
 800635a:	d100      	bne.n	800635e <_printf_i+0x2e>
 800635c:	e093      	b.n	8006486 <_printf_i+0x156>
 800635e:	0026      	movs	r6, r4
 8006360:	3642      	adds	r6, #66	; 0x42
 8006362:	7032      	strb	r2, [r6, #0]
 8006364:	e022      	b.n	80063ac <_printf_i+0x7c>
 8006366:	0010      	movs	r0, r2
 8006368:	3863      	subs	r0, #99	; 0x63
 800636a:	2815      	cmp	r0, #21
 800636c:	d8f7      	bhi.n	800635e <_printf_i+0x2e>
 800636e:	f7f9 fec7 	bl	8000100 <__gnu_thumb1_case_shi>
 8006372:	0016      	.short	0x0016
 8006374:	fff6001f 	.word	0xfff6001f
 8006378:	fff6fff6 	.word	0xfff6fff6
 800637c:	001ffff6 	.word	0x001ffff6
 8006380:	fff6fff6 	.word	0xfff6fff6
 8006384:	fff6fff6 	.word	0xfff6fff6
 8006388:	003600a3 	.word	0x003600a3
 800638c:	fff60083 	.word	0xfff60083
 8006390:	00b4fff6 	.word	0x00b4fff6
 8006394:	0036fff6 	.word	0x0036fff6
 8006398:	fff6fff6 	.word	0xfff6fff6
 800639c:	0087      	.short	0x0087
 800639e:	0026      	movs	r6, r4
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	3642      	adds	r6, #66	; 0x42
 80063a4:	1d11      	adds	r1, r2, #4
 80063a6:	6019      	str	r1, [r3, #0]
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	7033      	strb	r3, [r6, #0]
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0a2      	b.n	80064f6 <_printf_i+0x1c6>
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	6809      	ldr	r1, [r1, #0]
 80063b4:	1d02      	adds	r2, r0, #4
 80063b6:	060d      	lsls	r5, r1, #24
 80063b8:	d50b      	bpl.n	80063d2 <_printf_i+0xa2>
 80063ba:	6805      	ldr	r5, [r0, #0]
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	2d00      	cmp	r5, #0
 80063c0:	da03      	bge.n	80063ca <_printf_i+0x9a>
 80063c2:	232d      	movs	r3, #45	; 0x2d
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	426d      	negs	r5, r5
 80063c8:	7013      	strb	r3, [r2, #0]
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <_printf_i+0x218>)
 80063cc:	270a      	movs	r7, #10
 80063ce:	9303      	str	r3, [sp, #12]
 80063d0:	e01b      	b.n	800640a <_printf_i+0xda>
 80063d2:	6805      	ldr	r5, [r0, #0]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	0649      	lsls	r1, r1, #25
 80063d8:	d5f1      	bpl.n	80063be <_printf_i+0x8e>
 80063da:	b22d      	sxth	r5, r5
 80063dc:	e7ef      	b.n	80063be <_printf_i+0x8e>
 80063de:	680d      	ldr	r5, [r1, #0]
 80063e0:	6819      	ldr	r1, [r3, #0]
 80063e2:	1d08      	adds	r0, r1, #4
 80063e4:	6018      	str	r0, [r3, #0]
 80063e6:	062e      	lsls	r6, r5, #24
 80063e8:	d501      	bpl.n	80063ee <_printf_i+0xbe>
 80063ea:	680d      	ldr	r5, [r1, #0]
 80063ec:	e003      	b.n	80063f6 <_printf_i+0xc6>
 80063ee:	066d      	lsls	r5, r5, #25
 80063f0:	d5fb      	bpl.n	80063ea <_printf_i+0xba>
 80063f2:	680d      	ldr	r5, [r1, #0]
 80063f4:	b2ad      	uxth	r5, r5
 80063f6:	4b54      	ldr	r3, [pc, #336]	; (8006548 <_printf_i+0x218>)
 80063f8:	2708      	movs	r7, #8
 80063fa:	9303      	str	r3, [sp, #12]
 80063fc:	2a6f      	cmp	r2, #111	; 0x6f
 80063fe:	d000      	beq.n	8006402 <_printf_i+0xd2>
 8006400:	3702      	adds	r7, #2
 8006402:	0023      	movs	r3, r4
 8006404:	2200      	movs	r2, #0
 8006406:	3343      	adds	r3, #67	; 0x43
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	60a3      	str	r3, [r4, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	db03      	blt.n	800641a <_printf_i+0xea>
 8006412:	2104      	movs	r1, #4
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	438a      	bics	r2, r1
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	2d00      	cmp	r5, #0
 800641c:	d102      	bne.n	8006424 <_printf_i+0xf4>
 800641e:	9e04      	ldr	r6, [sp, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <_printf_i+0x10e>
 8006424:	9e04      	ldr	r6, [sp, #16]
 8006426:	0028      	movs	r0, r5
 8006428:	0039      	movs	r1, r7
 800642a:	f7f9 fef9 	bl	8000220 <__aeabi_uidivmod>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	3e01      	subs	r6, #1
 8006432:	5c5b      	ldrb	r3, [r3, r1]
 8006434:	7033      	strb	r3, [r6, #0]
 8006436:	002b      	movs	r3, r5
 8006438:	0005      	movs	r5, r0
 800643a:	429f      	cmp	r7, r3
 800643c:	d9f3      	bls.n	8006426 <_printf_i+0xf6>
 800643e:	2f08      	cmp	r7, #8
 8006440:	d109      	bne.n	8006456 <_printf_i+0x126>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	07db      	lsls	r3, r3, #31
 8006446:	d506      	bpl.n	8006456 <_printf_i+0x126>
 8006448:	6862      	ldr	r2, [r4, #4]
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	429a      	cmp	r2, r3
 800644e:	dc02      	bgt.n	8006456 <_printf_i+0x126>
 8006450:	2330      	movs	r3, #48	; 0x30
 8006452:	3e01      	subs	r6, #1
 8006454:	7033      	strb	r3, [r6, #0]
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	1b9b      	subs	r3, r3, r6
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	9b07      	ldr	r3, [sp, #28]
 800645e:	0021      	movs	r1, r4
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	9805      	ldr	r0, [sp, #20]
 8006464:	9b06      	ldr	r3, [sp, #24]
 8006466:	aa09      	add	r2, sp, #36	; 0x24
 8006468:	f7ff fef2 	bl	8006250 <_printf_common>
 800646c:	3001      	adds	r0, #1
 800646e:	d147      	bne.n	8006500 <_printf_i+0x1d0>
 8006470:	2001      	movs	r0, #1
 8006472:	4240      	negs	r0, r0
 8006474:	b00b      	add	sp, #44	; 0x2c
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006478:	2220      	movs	r2, #32
 800647a:	6809      	ldr	r1, [r1, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	2278      	movs	r2, #120	; 0x78
 8006482:	4932      	ldr	r1, [pc, #200]	; (800654c <_printf_i+0x21c>)
 8006484:	9103      	str	r1, [sp, #12]
 8006486:	0021      	movs	r1, r4
 8006488:	3145      	adds	r1, #69	; 0x45
 800648a:	700a      	strb	r2, [r1, #0]
 800648c:	6819      	ldr	r1, [r3, #0]
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	c920      	ldmia	r1!, {r5}
 8006492:	0610      	lsls	r0, r2, #24
 8006494:	d402      	bmi.n	800649c <_printf_i+0x16c>
 8006496:	0650      	lsls	r0, r2, #25
 8006498:	d500      	bpl.n	800649c <_printf_i+0x16c>
 800649a:	b2ad      	uxth	r5, r5
 800649c:	6019      	str	r1, [r3, #0]
 800649e:	07d3      	lsls	r3, r2, #31
 80064a0:	d502      	bpl.n	80064a8 <_printf_i+0x178>
 80064a2:	2320      	movs	r3, #32
 80064a4:	4313      	orrs	r3, r2
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	2710      	movs	r7, #16
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	d1a9      	bne.n	8006402 <_printf_i+0xd2>
 80064ae:	2220      	movs	r2, #32
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	4393      	bics	r3, r2
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	e7a4      	b.n	8006402 <_printf_i+0xd2>
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	680d      	ldr	r5, [r1, #0]
 80064bc:	1d10      	adds	r0, r2, #4
 80064be:	6949      	ldr	r1, [r1, #20]
 80064c0:	6018      	str	r0, [r3, #0]
 80064c2:	6813      	ldr	r3, [r2, #0]
 80064c4:	062e      	lsls	r6, r5, #24
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0x19c>
 80064c8:	6019      	str	r1, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0x1a2>
 80064cc:	066d      	lsls	r5, r5, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0x198>
 80064d0:	8019      	strh	r1, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9e04      	ldr	r6, [sp, #16]
 80064d6:	6123      	str	r3, [r4, #16]
 80064d8:	e7c0      	b.n	800645c <_printf_i+0x12c>
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	1d11      	adds	r1, r2, #4
 80064de:	6019      	str	r1, [r3, #0]
 80064e0:	6816      	ldr	r6, [r2, #0]
 80064e2:	2100      	movs	r1, #0
 80064e4:	0030      	movs	r0, r6
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	f000 f984 	bl	80067f4 <memchr>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d001      	beq.n	80064f4 <_printf_i+0x1c4>
 80064f0:	1b80      	subs	r0, r0, r6
 80064f2:	6060      	str	r0, [r4, #4]
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	6123      	str	r3, [r4, #16]
 80064f8:	2300      	movs	r3, #0
 80064fa:	9a04      	ldr	r2, [sp, #16]
 80064fc:	7013      	strb	r3, [r2, #0]
 80064fe:	e7ad      	b.n	800645c <_printf_i+0x12c>
 8006500:	0032      	movs	r2, r6
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	9906      	ldr	r1, [sp, #24]
 8006506:	9805      	ldr	r0, [sp, #20]
 8006508:	9d07      	ldr	r5, [sp, #28]
 800650a:	47a8      	blx	r5
 800650c:	3001      	adds	r0, #1
 800650e:	d0af      	beq.n	8006470 <_printf_i+0x140>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	079b      	lsls	r3, r3, #30
 8006514:	d415      	bmi.n	8006542 <_printf_i+0x212>
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	4298      	cmp	r0, r3
 800651c:	daaa      	bge.n	8006474 <_printf_i+0x144>
 800651e:	0018      	movs	r0, r3
 8006520:	e7a8      	b.n	8006474 <_printf_i+0x144>
 8006522:	0022      	movs	r2, r4
 8006524:	2301      	movs	r3, #1
 8006526:	9906      	ldr	r1, [sp, #24]
 8006528:	9805      	ldr	r0, [sp, #20]
 800652a:	9e07      	ldr	r6, [sp, #28]
 800652c:	3219      	adds	r2, #25
 800652e:	47b0      	blx	r6
 8006530:	3001      	adds	r0, #1
 8006532:	d09d      	beq.n	8006470 <_printf_i+0x140>
 8006534:	3501      	adds	r5, #1
 8006536:	68e3      	ldr	r3, [r4, #12]
 8006538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	42ab      	cmp	r3, r5
 800653e:	dcf0      	bgt.n	8006522 <_printf_i+0x1f2>
 8006540:	e7e9      	b.n	8006516 <_printf_i+0x1e6>
 8006542:	2500      	movs	r5, #0
 8006544:	e7f7      	b.n	8006536 <_printf_i+0x206>
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	08006b4d 	.word	0x08006b4d
 800654c:	08006b5e 	.word	0x08006b5e

08006550 <__sflush_r>:
 8006550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006552:	898b      	ldrh	r3, [r1, #12]
 8006554:	0005      	movs	r5, r0
 8006556:	000c      	movs	r4, r1
 8006558:	071a      	lsls	r2, r3, #28
 800655a:	d45c      	bmi.n	8006616 <__sflush_r+0xc6>
 800655c:	684a      	ldr	r2, [r1, #4]
 800655e:	2a00      	cmp	r2, #0
 8006560:	dc04      	bgt.n	800656c <__sflush_r+0x1c>
 8006562:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006564:	2a00      	cmp	r2, #0
 8006566:	dc01      	bgt.n	800656c <__sflush_r+0x1c>
 8006568:	2000      	movs	r0, #0
 800656a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800656c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800656e:	2f00      	cmp	r7, #0
 8006570:	d0fa      	beq.n	8006568 <__sflush_r+0x18>
 8006572:	2200      	movs	r2, #0
 8006574:	2080      	movs	r0, #128	; 0x80
 8006576:	682e      	ldr	r6, [r5, #0]
 8006578:	602a      	str	r2, [r5, #0]
 800657a:	001a      	movs	r2, r3
 800657c:	0140      	lsls	r0, r0, #5
 800657e:	6a21      	ldr	r1, [r4, #32]
 8006580:	4002      	ands	r2, r0
 8006582:	4203      	tst	r3, r0
 8006584:	d034      	beq.n	80065f0 <__sflush_r+0xa0>
 8006586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	075b      	lsls	r3, r3, #29
 800658c:	d506      	bpl.n	800659c <__sflush_r+0x4c>
 800658e:	6863      	ldr	r3, [r4, #4]
 8006590:	1ac0      	subs	r0, r0, r3
 8006592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <__sflush_r+0x4c>
 8006598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800659a:	1ac0      	subs	r0, r0, r3
 800659c:	0002      	movs	r2, r0
 800659e:	2300      	movs	r3, #0
 80065a0:	0028      	movs	r0, r5
 80065a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065a4:	6a21      	ldr	r1, [r4, #32]
 80065a6:	47b8      	blx	r7
 80065a8:	89a2      	ldrh	r2, [r4, #12]
 80065aa:	1c43      	adds	r3, r0, #1
 80065ac:	d106      	bne.n	80065bc <__sflush_r+0x6c>
 80065ae:	6829      	ldr	r1, [r5, #0]
 80065b0:	291d      	cmp	r1, #29
 80065b2:	d82c      	bhi.n	800660e <__sflush_r+0xbe>
 80065b4:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <__sflush_r+0x110>)
 80065b6:	410b      	asrs	r3, r1
 80065b8:	07db      	lsls	r3, r3, #31
 80065ba:	d428      	bmi.n	800660e <__sflush_r+0xbe>
 80065bc:	2300      	movs	r3, #0
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	04d2      	lsls	r2, r2, #19
 80065c6:	d505      	bpl.n	80065d4 <__sflush_r+0x84>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <__sflush_r+0x82>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d100      	bne.n	80065d4 <__sflush_r+0x84>
 80065d2:	6560      	str	r0, [r4, #84]	; 0x54
 80065d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065d6:	602e      	str	r6, [r5, #0]
 80065d8:	2900      	cmp	r1, #0
 80065da:	d0c5      	beq.n	8006568 <__sflush_r+0x18>
 80065dc:	0023      	movs	r3, r4
 80065de:	3344      	adds	r3, #68	; 0x44
 80065e0:	4299      	cmp	r1, r3
 80065e2:	d002      	beq.n	80065ea <__sflush_r+0x9a>
 80065e4:	0028      	movs	r0, r5
 80065e6:	f7ff fbf1 	bl	8005dcc <_free_r>
 80065ea:	2000      	movs	r0, #0
 80065ec:	6360      	str	r0, [r4, #52]	; 0x34
 80065ee:	e7bc      	b.n	800656a <__sflush_r+0x1a>
 80065f0:	2301      	movs	r3, #1
 80065f2:	0028      	movs	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d1c6      	bne.n	8006588 <__sflush_r+0x38>
 80065fa:	682b      	ldr	r3, [r5, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0c3      	beq.n	8006588 <__sflush_r+0x38>
 8006600:	2b1d      	cmp	r3, #29
 8006602:	d001      	beq.n	8006608 <__sflush_r+0xb8>
 8006604:	2b16      	cmp	r3, #22
 8006606:	d101      	bne.n	800660c <__sflush_r+0xbc>
 8006608:	602e      	str	r6, [r5, #0]
 800660a:	e7ad      	b.n	8006568 <__sflush_r+0x18>
 800660c:	89a2      	ldrh	r2, [r4, #12]
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	4313      	orrs	r3, r2
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	e7a9      	b.n	800656a <__sflush_r+0x1a>
 8006616:	690e      	ldr	r6, [r1, #16]
 8006618:	2e00      	cmp	r6, #0
 800661a:	d0a5      	beq.n	8006568 <__sflush_r+0x18>
 800661c:	680f      	ldr	r7, [r1, #0]
 800661e:	600e      	str	r6, [r1, #0]
 8006620:	1bba      	subs	r2, r7, r6
 8006622:	9201      	str	r2, [sp, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	079b      	lsls	r3, r3, #30
 8006628:	d100      	bne.n	800662c <__sflush_r+0xdc>
 800662a:	694a      	ldr	r2, [r1, #20]
 800662c:	60a2      	str	r2, [r4, #8]
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dd99      	ble.n	8006568 <__sflush_r+0x18>
 8006634:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006636:	0032      	movs	r2, r6
 8006638:	001f      	movs	r7, r3
 800663a:	0028      	movs	r0, r5
 800663c:	9b01      	ldr	r3, [sp, #4]
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	47b8      	blx	r7
 8006642:	2800      	cmp	r0, #0
 8006644:	dc06      	bgt.n	8006654 <__sflush_r+0x104>
 8006646:	2340      	movs	r3, #64	; 0x40
 8006648:	2001      	movs	r0, #1
 800664a:	89a2      	ldrh	r2, [r4, #12]
 800664c:	4240      	negs	r0, r0
 800664e:	4313      	orrs	r3, r2
 8006650:	81a3      	strh	r3, [r4, #12]
 8006652:	e78a      	b.n	800656a <__sflush_r+0x1a>
 8006654:	9b01      	ldr	r3, [sp, #4]
 8006656:	1836      	adds	r6, r6, r0
 8006658:	1a1b      	subs	r3, r3, r0
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	e7e7      	b.n	800662e <__sflush_r+0xde>
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	dfbffffe 	.word	0xdfbffffe

08006664 <_fflush_r>:
 8006664:	690b      	ldr	r3, [r1, #16]
 8006666:	b570      	push	{r4, r5, r6, lr}
 8006668:	0005      	movs	r5, r0
 800666a:	000c      	movs	r4, r1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <_fflush_r+0x12>
 8006670:	2500      	movs	r5, #0
 8006672:	0028      	movs	r0, r5
 8006674:	bd70      	pop	{r4, r5, r6, pc}
 8006676:	2800      	cmp	r0, #0
 8006678:	d004      	beq.n	8006684 <_fflush_r+0x20>
 800667a:	6a03      	ldr	r3, [r0, #32]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <_fflush_r+0x20>
 8006680:	f7ff f98c 	bl	800599c <__sinit>
 8006684:	220c      	movs	r2, #12
 8006686:	5ea3      	ldrsh	r3, [r4, r2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f1      	beq.n	8006670 <_fflush_r+0xc>
 800668c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800668e:	07d2      	lsls	r2, r2, #31
 8006690:	d404      	bmi.n	800669c <_fflush_r+0x38>
 8006692:	059b      	lsls	r3, r3, #22
 8006694:	d402      	bmi.n	800669c <_fflush_r+0x38>
 8006696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006698:	f7ff fb96 	bl	8005dc8 <__retarget_lock_acquire_recursive>
 800669c:	0028      	movs	r0, r5
 800669e:	0021      	movs	r1, r4
 80066a0:	f7ff ff56 	bl	8006550 <__sflush_r>
 80066a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066a6:	0005      	movs	r5, r0
 80066a8:	07db      	lsls	r3, r3, #31
 80066aa:	d4e2      	bmi.n	8006672 <_fflush_r+0xe>
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	059b      	lsls	r3, r3, #22
 80066b0:	d4df      	bmi.n	8006672 <_fflush_r+0xe>
 80066b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066b4:	f7ff fb89 	bl	8005dca <__retarget_lock_release_recursive>
 80066b8:	e7db      	b.n	8006672 <_fflush_r+0xe>
	...

080066bc <__swhatbuf_r>:
 80066bc:	b570      	push	{r4, r5, r6, lr}
 80066be:	000e      	movs	r6, r1
 80066c0:	001d      	movs	r5, r3
 80066c2:	230e      	movs	r3, #14
 80066c4:	5ec9      	ldrsh	r1, [r1, r3]
 80066c6:	0014      	movs	r4, r2
 80066c8:	b096      	sub	sp, #88	; 0x58
 80066ca:	2900      	cmp	r1, #0
 80066cc:	da0c      	bge.n	80066e8 <__swhatbuf_r+0x2c>
 80066ce:	89b2      	ldrh	r2, [r6, #12]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	0011      	movs	r1, r2
 80066d4:	4019      	ands	r1, r3
 80066d6:	421a      	tst	r2, r3
 80066d8:	d013      	beq.n	8006702 <__swhatbuf_r+0x46>
 80066da:	2100      	movs	r1, #0
 80066dc:	3b40      	subs	r3, #64	; 0x40
 80066de:	2000      	movs	r0, #0
 80066e0:	6029      	str	r1, [r5, #0]
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	b016      	add	sp, #88	; 0x58
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	466a      	mov	r2, sp
 80066ea:	f000 f84d 	bl	8006788 <_fstat_r>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	dbed      	blt.n	80066ce <__swhatbuf_r+0x12>
 80066f2:	23f0      	movs	r3, #240	; 0xf0
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	4019      	ands	r1, r3
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <__swhatbuf_r+0x4c>)
 80066fc:	18c9      	adds	r1, r1, r3
 80066fe:	424b      	negs	r3, r1
 8006700:	4159      	adcs	r1, r3
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	e7ea      	b.n	80066de <__swhatbuf_r+0x22>
 8006708:	ffffe000 	.word	0xffffe000

0800670c <__smakebuf_r>:
 800670c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800670e:	2602      	movs	r6, #2
 8006710:	898b      	ldrh	r3, [r1, #12]
 8006712:	0005      	movs	r5, r0
 8006714:	000c      	movs	r4, r1
 8006716:	4233      	tst	r3, r6
 8006718:	d006      	beq.n	8006728 <__smakebuf_r+0x1c>
 800671a:	0023      	movs	r3, r4
 800671c:	3347      	adds	r3, #71	; 0x47
 800671e:	6023      	str	r3, [r4, #0]
 8006720:	6123      	str	r3, [r4, #16]
 8006722:	2301      	movs	r3, #1
 8006724:	6163      	str	r3, [r4, #20]
 8006726:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006728:	466a      	mov	r2, sp
 800672a:	ab01      	add	r3, sp, #4
 800672c:	f7ff ffc6 	bl	80066bc <__swhatbuf_r>
 8006730:	9900      	ldr	r1, [sp, #0]
 8006732:	0007      	movs	r7, r0
 8006734:	0028      	movs	r0, r5
 8006736:	f7ff fbb5 	bl	8005ea4 <_malloc_r>
 800673a:	2800      	cmp	r0, #0
 800673c:	d108      	bne.n	8006750 <__smakebuf_r+0x44>
 800673e:	220c      	movs	r2, #12
 8006740:	5ea3      	ldrsh	r3, [r4, r2]
 8006742:	059a      	lsls	r2, r3, #22
 8006744:	d4ef      	bmi.n	8006726 <__smakebuf_r+0x1a>
 8006746:	2203      	movs	r2, #3
 8006748:	4393      	bics	r3, r2
 800674a:	431e      	orrs	r6, r3
 800674c:	81a6      	strh	r6, [r4, #12]
 800674e:	e7e4      	b.n	800671a <__smakebuf_r+0xe>
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	89a2      	ldrh	r2, [r4, #12]
 8006754:	6020      	str	r0, [r4, #0]
 8006756:	4313      	orrs	r3, r2
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	6120      	str	r0, [r4, #16]
 800675e:	6163      	str	r3, [r4, #20]
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00c      	beq.n	8006780 <__smakebuf_r+0x74>
 8006766:	0028      	movs	r0, r5
 8006768:	230e      	movs	r3, #14
 800676a:	5ee1      	ldrsh	r1, [r4, r3]
 800676c:	f000 f81e 	bl	80067ac <_isatty_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d005      	beq.n	8006780 <__smakebuf_r+0x74>
 8006774:	2303      	movs	r3, #3
 8006776:	89a2      	ldrh	r2, [r4, #12]
 8006778:	439a      	bics	r2, r3
 800677a:	3b02      	subs	r3, #2
 800677c:	4313      	orrs	r3, r2
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	433b      	orrs	r3, r7
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	e7ce      	b.n	8006726 <__smakebuf_r+0x1a>

08006788 <_fstat_r>:
 8006788:	2300      	movs	r3, #0
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	4d06      	ldr	r5, [pc, #24]	; (80067a8 <_fstat_r+0x20>)
 800678e:	0004      	movs	r4, r0
 8006790:	0008      	movs	r0, r1
 8006792:	0011      	movs	r1, r2
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	f7fc f9a8 	bl	8002aea <_fstat>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d103      	bne.n	80067a6 <_fstat_r+0x1e>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d000      	beq.n	80067a6 <_fstat_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	20000598 	.word	0x20000598

080067ac <_isatty_r>:
 80067ac:	2300      	movs	r3, #0
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	4d06      	ldr	r5, [pc, #24]	; (80067cc <_isatty_r+0x20>)
 80067b2:	0004      	movs	r4, r0
 80067b4:	0008      	movs	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fc f9a5 	bl	8002b06 <_isatty>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d103      	bne.n	80067c8 <_isatty_r+0x1c>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d000      	beq.n	80067c8 <_isatty_r+0x1c>
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	20000598 	.word	0x20000598

080067d0 <_sbrk_r>:
 80067d0:	2300      	movs	r3, #0
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_sbrk_r+0x20>)
 80067d6:	0004      	movs	r4, r0
 80067d8:	0008      	movs	r0, r1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	f7fc f9a8 	bl	8002b30 <_sbrk>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d103      	bne.n	80067ec <_sbrk_r+0x1c>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d000      	beq.n	80067ec <_sbrk_r+0x1c>
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	20000598 	.word	0x20000598

080067f4 <memchr>:
 80067f4:	b2c9      	uxtb	r1, r1
 80067f6:	1882      	adds	r2, r0, r2
 80067f8:	4290      	cmp	r0, r2
 80067fa:	d101      	bne.n	8006800 <memchr+0xc>
 80067fc:	2000      	movs	r0, #0
 80067fe:	4770      	bx	lr
 8006800:	7803      	ldrb	r3, [r0, #0]
 8006802:	428b      	cmp	r3, r1
 8006804:	d0fb      	beq.n	80067fe <memchr+0xa>
 8006806:	3001      	adds	r0, #1
 8006808:	e7f6      	b.n	80067f8 <memchr+0x4>

0800680a <sqrt>:
 800680a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680c:	0004      	movs	r4, r0
 800680e:	000d      	movs	r5, r1
 8006810:	f000 f822 	bl	8006858 <__ieee754_sqrt>
 8006814:	0022      	movs	r2, r4
 8006816:	0006      	movs	r6, r0
 8006818:	000f      	movs	r7, r1
 800681a:	002b      	movs	r3, r5
 800681c:	0020      	movs	r0, r4
 800681e:	0029      	movs	r1, r5
 8006820:	f7fb fc80 	bl	8002124 <__aeabi_dcmpun>
 8006824:	2800      	cmp	r0, #0
 8006826:	d113      	bne.n	8006850 <sqrt+0x46>
 8006828:	2200      	movs	r2, #0
 800682a:	2300      	movs	r3, #0
 800682c:	0020      	movs	r0, r4
 800682e:	0029      	movs	r1, r5
 8006830:	f7f9 fd12 	bl	8000258 <__aeabi_dcmplt>
 8006834:	2800      	cmp	r0, #0
 8006836:	d00b      	beq.n	8006850 <sqrt+0x46>
 8006838:	f7ff fa9c 	bl	8005d74 <__errno>
 800683c:	2321      	movs	r3, #33	; 0x21
 800683e:	2200      	movs	r2, #0
 8006840:	6003      	str	r3, [r0, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	0010      	movs	r0, r2
 8006846:	0019      	movs	r1, r3
 8006848:	f7fa fa2e 	bl	8000ca8 <__aeabi_ddiv>
 800684c:	0006      	movs	r6, r0
 800684e:	000f      	movs	r7, r1
 8006850:	0030      	movs	r0, r6
 8006852:	0039      	movs	r1, r7
 8006854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006858 <__ieee754_sqrt>:
 8006858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685a:	000a      	movs	r2, r1
 800685c:	000c      	movs	r4, r1
 800685e:	496f      	ldr	r1, [pc, #444]	; (8006a1c <__ieee754_sqrt+0x1c4>)
 8006860:	0005      	movs	r5, r0
 8006862:	0003      	movs	r3, r0
 8006864:	0008      	movs	r0, r1
 8006866:	b087      	sub	sp, #28
 8006868:	4020      	ands	r0, r4
 800686a:	4288      	cmp	r0, r1
 800686c:	d111      	bne.n	8006892 <__ieee754_sqrt+0x3a>
 800686e:	002a      	movs	r2, r5
 8006870:	0023      	movs	r3, r4
 8006872:	0028      	movs	r0, r5
 8006874:	0021      	movs	r1, r4
 8006876:	f7fa fe11 	bl	800149c <__aeabi_dmul>
 800687a:	0002      	movs	r2, r0
 800687c:	000b      	movs	r3, r1
 800687e:	0028      	movs	r0, r5
 8006880:	0021      	movs	r1, r4
 8006882:	f7f9 feb1 	bl	80005e8 <__aeabi_dadd>
 8006886:	0005      	movs	r5, r0
 8006888:	000c      	movs	r4, r1
 800688a:	0028      	movs	r0, r5
 800688c:	0021      	movs	r1, r4
 800688e:	b007      	add	sp, #28
 8006890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006892:	2c00      	cmp	r4, #0
 8006894:	dc12      	bgt.n	80068bc <__ieee754_sqrt+0x64>
 8006896:	0061      	lsls	r1, r4, #1
 8006898:	0849      	lsrs	r1, r1, #1
 800689a:	4329      	orrs	r1, r5
 800689c:	d0f5      	beq.n	800688a <__ieee754_sqrt+0x32>
 800689e:	2100      	movs	r1, #0
 80068a0:	428c      	cmp	r4, r1
 80068a2:	d100      	bne.n	80068a6 <__ieee754_sqrt+0x4e>
 80068a4:	e09f      	b.n	80069e6 <__ieee754_sqrt+0x18e>
 80068a6:	002a      	movs	r2, r5
 80068a8:	0023      	movs	r3, r4
 80068aa:	0028      	movs	r0, r5
 80068ac:	0021      	movs	r1, r4
 80068ae:	f7fb f8b7 	bl	8001a20 <__aeabi_dsub>
 80068b2:	0002      	movs	r2, r0
 80068b4:	000b      	movs	r3, r1
 80068b6:	f7fa f9f7 	bl	8000ca8 <__aeabi_ddiv>
 80068ba:	e7e4      	b.n	8006886 <__ieee754_sqrt+0x2e>
 80068bc:	1521      	asrs	r1, r4, #20
 80068be:	d100      	bne.n	80068c2 <__ieee754_sqrt+0x6a>
 80068c0:	e091      	b.n	80069e6 <__ieee754_sqrt+0x18e>
 80068c2:	4857      	ldr	r0, [pc, #348]	; (8006a20 <__ieee754_sqrt+0x1c8>)
 80068c4:	0312      	lsls	r2, r2, #12
 80068c6:	180c      	adds	r4, r1, r0
 80068c8:	2080      	movs	r0, #128	; 0x80
 80068ca:	0b12      	lsrs	r2, r2, #12
 80068cc:	0340      	lsls	r0, r0, #13
 80068ce:	4310      	orrs	r0, r2
 80068d0:	07c9      	lsls	r1, r1, #31
 80068d2:	d403      	bmi.n	80068dc <__ieee754_sqrt+0x84>
 80068d4:	0fda      	lsrs	r2, r3, #31
 80068d6:	0040      	lsls	r0, r0, #1
 80068d8:	1810      	adds	r0, r2, r0
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	2500      	movs	r5, #0
 80068de:	1062      	asrs	r2, r4, #1
 80068e0:	0040      	lsls	r0, r0, #1
 80068e2:	2480      	movs	r4, #128	; 0x80
 80068e4:	9205      	str	r2, [sp, #20]
 80068e6:	0fda      	lsrs	r2, r3, #31
 80068e8:	1812      	adds	r2, r2, r0
 80068ea:	0029      	movs	r1, r5
 80068ec:	2016      	movs	r0, #22
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	03a4      	lsls	r4, r4, #14
 80068f2:	190e      	adds	r6, r1, r4
 80068f4:	4296      	cmp	r6, r2
 80068f6:	dc02      	bgt.n	80068fe <__ieee754_sqrt+0xa6>
 80068f8:	1931      	adds	r1, r6, r4
 80068fa:	1b92      	subs	r2, r2, r6
 80068fc:	192d      	adds	r5, r5, r4
 80068fe:	0fde      	lsrs	r6, r3, #31
 8006900:	0052      	lsls	r2, r2, #1
 8006902:	3801      	subs	r0, #1
 8006904:	18b2      	adds	r2, r6, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	0864      	lsrs	r4, r4, #1
 800690a:	2800      	cmp	r0, #0
 800690c:	d1f1      	bne.n	80068f2 <__ieee754_sqrt+0x9a>
 800690e:	2620      	movs	r6, #32
 8006910:	2780      	movs	r7, #128	; 0x80
 8006912:	0004      	movs	r4, r0
 8006914:	9604      	str	r6, [sp, #16]
 8006916:	063f      	lsls	r7, r7, #24
 8006918:	183e      	adds	r6, r7, r0
 800691a:	46b4      	mov	ip, r6
 800691c:	428a      	cmp	r2, r1
 800691e:	dc02      	bgt.n	8006926 <__ieee754_sqrt+0xce>
 8006920:	d114      	bne.n	800694c <__ieee754_sqrt+0xf4>
 8006922:	429e      	cmp	r6, r3
 8006924:	d812      	bhi.n	800694c <__ieee754_sqrt+0xf4>
 8006926:	4660      	mov	r0, ip
 8006928:	4666      	mov	r6, ip
 800692a:	19c0      	adds	r0, r0, r7
 800692c:	9100      	str	r1, [sp, #0]
 800692e:	2e00      	cmp	r6, #0
 8006930:	da03      	bge.n	800693a <__ieee754_sqrt+0xe2>
 8006932:	43c6      	mvns	r6, r0
 8006934:	0ff6      	lsrs	r6, r6, #31
 8006936:	198e      	adds	r6, r1, r6
 8006938:	9600      	str	r6, [sp, #0]
 800693a:	1a52      	subs	r2, r2, r1
 800693c:	4563      	cmp	r3, ip
 800693e:	4189      	sbcs	r1, r1
 8006940:	4249      	negs	r1, r1
 8006942:	1a52      	subs	r2, r2, r1
 8006944:	4661      	mov	r1, ip
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	9900      	ldr	r1, [sp, #0]
 800694a:	19e4      	adds	r4, r4, r7
 800694c:	0fde      	lsrs	r6, r3, #31
 800694e:	0052      	lsls	r2, r2, #1
 8006950:	18b2      	adds	r2, r6, r2
 8006952:	9e04      	ldr	r6, [sp, #16]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	3e01      	subs	r6, #1
 8006958:	087f      	lsrs	r7, r7, #1
 800695a:	9604      	str	r6, [sp, #16]
 800695c:	2e00      	cmp	r6, #0
 800695e:	d1db      	bne.n	8006918 <__ieee754_sqrt+0xc0>
 8006960:	431a      	orrs	r2, r3
 8006962:	d01f      	beq.n	80069a4 <__ieee754_sqrt+0x14c>
 8006964:	4e2f      	ldr	r6, [pc, #188]	; (8006a24 <__ieee754_sqrt+0x1cc>)
 8006966:	4f30      	ldr	r7, [pc, #192]	; (8006a28 <__ieee754_sqrt+0x1d0>)
 8006968:	6830      	ldr	r0, [r6, #0]
 800696a:	6871      	ldr	r1, [r6, #4]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	9200      	str	r2, [sp, #0]
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	6832      	ldr	r2, [r6, #0]
 8006976:	6873      	ldr	r3, [r6, #4]
 8006978:	9202      	str	r2, [sp, #8]
 800697a:	9303      	str	r3, [sp, #12]
 800697c:	9a00      	ldr	r2, [sp, #0]
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	f7fb f84e 	bl	8001a20 <__aeabi_dsub>
 8006984:	0002      	movs	r2, r0
 8006986:	000b      	movs	r3, r1
 8006988:	9802      	ldr	r0, [sp, #8]
 800698a:	9903      	ldr	r1, [sp, #12]
 800698c:	f7f9 fc6e 	bl	800026c <__aeabi_dcmple>
 8006990:	2800      	cmp	r0, #0
 8006992:	d007      	beq.n	80069a4 <__ieee754_sqrt+0x14c>
 8006994:	6830      	ldr	r0, [r6, #0]
 8006996:	6871      	ldr	r1, [r6, #4]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	1c67      	adds	r7, r4, #1
 800699e:	d127      	bne.n	80069f0 <__ieee754_sqrt+0x198>
 80069a0:	9c04      	ldr	r4, [sp, #16]
 80069a2:	3501      	adds	r5, #1
 80069a4:	4b21      	ldr	r3, [pc, #132]	; (8006a2c <__ieee754_sqrt+0x1d4>)
 80069a6:	1069      	asrs	r1, r5, #1
 80069a8:	18c9      	adds	r1, r1, r3
 80069aa:	0864      	lsrs	r4, r4, #1
 80069ac:	07ed      	lsls	r5, r5, #31
 80069ae:	d502      	bpl.n	80069b6 <__ieee754_sqrt+0x15e>
 80069b0:	2380      	movs	r3, #128	; 0x80
 80069b2:	061b      	lsls	r3, r3, #24
 80069b4:	431c      	orrs	r4, r3
 80069b6:	9b05      	ldr	r3, [sp, #20]
 80069b8:	0025      	movs	r5, r4
 80069ba:	0518      	lsls	r0, r3, #20
 80069bc:	1843      	adds	r3, r0, r1
 80069be:	001c      	movs	r4, r3
 80069c0:	e763      	b.n	800688a <__ieee754_sqrt+0x32>
 80069c2:	0ada      	lsrs	r2, r3, #11
 80069c4:	3815      	subs	r0, #21
 80069c6:	055b      	lsls	r3, r3, #21
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	d0fa      	beq.n	80069c2 <__ieee754_sqrt+0x16a>
 80069cc:	2480      	movs	r4, #128	; 0x80
 80069ce:	0364      	lsls	r4, r4, #13
 80069d0:	4222      	tst	r2, r4
 80069d2:	d00a      	beq.n	80069ea <__ieee754_sqrt+0x192>
 80069d4:	2420      	movs	r4, #32
 80069d6:	001e      	movs	r6, r3
 80069d8:	1a64      	subs	r4, r4, r1
 80069da:	40e6      	lsrs	r6, r4
 80069dc:	1e4d      	subs	r5, r1, #1
 80069de:	408b      	lsls	r3, r1
 80069e0:	4332      	orrs	r2, r6
 80069e2:	1b41      	subs	r1, r0, r5
 80069e4:	e76d      	b.n	80068c2 <__ieee754_sqrt+0x6a>
 80069e6:	2000      	movs	r0, #0
 80069e8:	e7ee      	b.n	80069c8 <__ieee754_sqrt+0x170>
 80069ea:	0052      	lsls	r2, r2, #1
 80069ec:	3101      	adds	r1, #1
 80069ee:	e7ef      	b.n	80069d0 <__ieee754_sqrt+0x178>
 80069f0:	f7f9 fdfa 	bl	80005e8 <__aeabi_dadd>
 80069f4:	6877      	ldr	r7, [r6, #4]
 80069f6:	6836      	ldr	r6, [r6, #0]
 80069f8:	0002      	movs	r2, r0
 80069fa:	000b      	movs	r3, r1
 80069fc:	0030      	movs	r0, r6
 80069fe:	0039      	movs	r1, r7
 8006a00:	f7f9 fc2a 	bl	8000258 <__aeabi_dcmplt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d004      	beq.n	8006a12 <__ieee754_sqrt+0x1ba>
 8006a08:	3402      	adds	r4, #2
 8006a0a:	4263      	negs	r3, r4
 8006a0c:	4163      	adcs	r3, r4
 8006a0e:	18ed      	adds	r5, r5, r3
 8006a10:	e7c8      	b.n	80069a4 <__ieee754_sqrt+0x14c>
 8006a12:	2301      	movs	r3, #1
 8006a14:	3401      	adds	r4, #1
 8006a16:	439c      	bics	r4, r3
 8006a18:	e7c4      	b.n	80069a4 <__ieee754_sqrt+0x14c>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	7ff00000 	.word	0x7ff00000
 8006a20:	fffffc01 	.word	0xfffffc01
 8006a24:	20000068 	.word	0x20000068
 8006a28:	20000070 	.word	0x20000070
 8006a2c:	3fe00000 	.word	0x3fe00000

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
