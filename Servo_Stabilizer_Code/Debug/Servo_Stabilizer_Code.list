
Servo_Stabilizer_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad4  08002ad4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad4  08002ad4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad4  08002ad4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08002ae8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002ae8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b4af  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aa5  00000000  00000000  0002b526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002cfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000075c  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015517  00000000  00000000  0002e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bba1  00000000  00000000  000435c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b62  00000000  00000000  0004f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002168  00000000  00000000  000d7cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d9e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002a44 	.word	0x08002a44

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002a44 	.word	0x08002a44

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa84 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f809 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f92e 	bl	8000484 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f90e 	bl	8000448 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f84c 	bl	80002c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8d6 	bl	80003e0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x1c>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b093      	sub	sp, #76	; 0x4c
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	2414      	movs	r4, #20
 800023e:	193b      	adds	r3, r7, r4
 8000240:	0018      	movs	r0, r3
 8000242:	2334      	movs	r3, #52	; 0x34
 8000244:	001a      	movs	r2, r3
 8000246:	2100      	movs	r1, #0
 8000248:	f002 fbd0 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	0018      	movs	r0, r3
 8000250:	2310      	movs	r3, #16
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f002 fbc9 	bl	80029ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	0018      	movs	r0, r3
 8000260:	f001 fb34 	bl	80018cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000264:	193b      	adds	r3, r7, r4
 8000266:	2202      	movs	r2, #2
 8000268:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2280      	movs	r2, #128	; 0x80
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	2200      	movs	r2, #0
 8000276:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2200      	movs	r2, #0
 8000282:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	f001 fb6c 	bl	8001964 <HAL_RCC_OscConfig>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000290:	f000 f90e 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2207      	movs	r2, #7
 8000298:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2200      	movs	r2, #0
 80002aa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2100      	movs	r1, #0
 80002b0:	0018      	movs	r0, r3
 80002b2:	f001 fe67 	bl	8001f84 <HAL_RCC_ClockConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ba:	f000 f8f9 	bl	80004b0 <Error_Handler>
  }
}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	46bd      	mov	sp, r7
 80002c2:	b013      	add	sp, #76	; 0x4c
 80002c4:	bd90      	pop	{r4, r7, pc}
	...

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	230c      	movs	r3, #12
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fb88 	bl	80029ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80002dc:	4b3c      	ldr	r3, [pc, #240]	; (80003d0 <MX_ADC1_Init+0x108>)
 80002de:	4a3d      	ldr	r2, [pc, #244]	; (80003d4 <MX_ADC1_Init+0x10c>)
 80002e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002e2:	4b3b      	ldr	r3, [pc, #236]	; (80003d0 <MX_ADC1_Init+0x108>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	05d2      	lsls	r2, r2, #23
 80002e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ea:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <MX_ADC1_Init+0x108>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b37      	ldr	r3, [pc, #220]	; (80003d0 <MX_ADC1_Init+0x108>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002f6:	4b36      	ldr	r3, [pc, #216]	; (80003d0 <MX_ADC1_Init+0x108>)
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0392      	lsls	r2, r2, #14
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000300:	2204      	movs	r2, #4
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000304:	4b32      	ldr	r3, [pc, #200]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000306:	2200      	movs	r2, #0
 8000308:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800030a:	4b31      	ldr	r3, [pc, #196]	; (80003d0 <MX_ADC1_Init+0x108>)
 800030c:	2200      	movs	r2, #0
 800030e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000312:	2201      	movs	r2, #1
 8000314:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000316:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000318:	2203      	movs	r2, #3
 800031a:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_ADC1_Init+0x108>)
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000324:	2200      	movs	r2, #0
 8000326:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000328:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_ADC1_Init+0x108>)
 800032a:	222c      	movs	r2, #44	; 0x2c
 800032c:	2100      	movs	r1, #0
 800032e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000332:	2200      	movs	r2, #0
 8000334:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000336:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000338:	2203      	movs	r2, #3
 800033a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_3CYCLES_5;
 800033c:	4b24      	ldr	r3, [pc, #144]	; (80003d0 <MX_ADC1_Init+0x108>)
 800033e:	2201      	movs	r2, #1
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000342:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000344:	223c      	movs	r2, #60	; 0x3c
 8000346:	2100      	movs	r1, #0
 8000348:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <MX_ADC1_Init+0x108>)
 800034c:	2200      	movs	r2, #0
 800034e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	4b1f      	ldr	r3, [pc, #124]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fb6c 	bl	8000a30 <HAL_ADC_Init>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800035c:	f000 f8a8 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000372:	1d3a      	adds	r2, r7, #4
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000376:	0011      	movs	r1, r2
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fd01 	bl	8000d80 <HAL_ADC_ConfigChannel>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000382:	f000 f895 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <MX_ADC1_Init+0x110>)
 800038a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2204      	movs	r2, #4
 8000390:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000392:	1d3a      	adds	r2, r7, #4
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_ADC1_Init+0x108>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fcf1 	bl	8000d80 <HAL_ADC_ConfigChannel>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003a2:	f000 f885 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <MX_ADC1_Init+0x114>)
 80003aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2208      	movs	r2, #8
 80003b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b2:	1d3a      	adds	r2, r7, #4
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_ADC1_Init+0x108>)
 80003b6:	0011      	movs	r1, r2
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fce1 	bl	8000d80 <HAL_ADC_ConfigChannel>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80003c2:	f000 f875 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b004      	add	sp, #16
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40012400 	.word	0x40012400
 80003d8:	04000002 	.word	0x04000002
 80003dc:	08000004 	.word	0x08000004

080003e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_USART2_UART_Init+0x60>)
 80003e6:	4a17      	ldr	r2, [pc, #92]	; (8000444 <MX_USART2_UART_Init+0x64>)
 80003e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_USART2_UART_Init+0x60>)
 80003ec:	22e1      	movs	r2, #225	; 0xe1
 80003ee:	0252      	lsls	r2, r2, #9
 80003f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_USART2_UART_Init+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART2_UART_Init+0x60>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fe:	4b10      	ldr	r3, [pc, #64]	; (8000440 <MX_USART2_UART_Init+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000404:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART2_UART_Init+0x60>)
 8000406:	220c      	movs	r2, #12
 8000408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040a:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <MX_USART2_UART_Init+0x60>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART2_UART_Init+0x60>)
 8000412:	2200      	movs	r2, #0
 8000414:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_USART2_UART_Init+0x60>)
 8000418:	2200      	movs	r2, #0
 800041a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART2_UART_Init+0x60>)
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_USART2_UART_Init+0x60>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MX_USART2_UART_Init+0x60>)
 800042a:	0018      	movs	r0, r3
 800042c:	f001 ff54 	bl	80022d8 <HAL_UART_Init>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000434:	f000 f83c 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	200000e8 	.word	0x200000e8
 8000444:	40004400 	.word	0x40004400

08000448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_DMA_Init+0x38>)
 8000450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_DMA_Init+0x38>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	639a      	str	r2, [r3, #56]	; 0x38
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_DMA_Init+0x38>)
 800045c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2009      	movs	r0, #9
 800046c:	f000 ff0c 	bl	8001288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000470:	2009      	movs	r0, #9
 8000472:	f000 ff1e 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_GPIO_Init+0x28>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_GPIO_Init+0x28>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <MX_GPIO_Init+0x28>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40021000 	.word	0x40021000

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	641a      	str	r2, [r3, #64]	; 0x40
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0549      	lsls	r1, r1, #21
 80004e4:	430a      	orrs	r2, r1
 80004e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <HAL_MspInit+0x44>)
 80004ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	055b      	lsls	r3, r3, #21
 80004f0:	4013      	ands	r3, r2
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b08b      	sub	sp, #44	; 0x2c
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	2414      	movs	r4, #20
 800050e:	193b      	adds	r3, r7, r4
 8000510:	0018      	movs	r0, r3
 8000512:	2314      	movs	r3, #20
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 fa68 	bl	80029ec <memset>
  if(hadc->Instance==ADC1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <HAL_ADC_MspInit+0xd4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d154      	bne.n	80005d0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 8000528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0349      	lsls	r1, r1, #13
 8000530:	430a      	orrs	r2, r1
 8000532:	641a      	str	r2, [r3, #64]	; 0x40
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 8000536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	035b      	lsls	r3, r3, #13
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 8000544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <HAL_ADC_MspInit+0xd8>)
 8000550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2207      	movs	r2, #7
 800055e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2203      	movs	r2, #3
 8000564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	193a      	adds	r2, r7, r4
 800056e:	23a0      	movs	r3, #160	; 0xa0
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f845 	bl	8001604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <HAL_ADC_MspInit+0xe0>)
 800057e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 8000582:	2205      	movs	r2, #5
 8000584:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fe98 	bl	80012ec <HAL_DMA_Init>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80005c0:	f7ff ff76 	bl	80004b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005c8:	651a      	str	r2, [r3, #80]	; 0x50
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <HAL_ADC_MspInit+0xdc>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b00b      	add	sp, #44	; 0x2c
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40012400 	.word	0x40012400
 80005dc:	40021000 	.word	0x40021000
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	40020008 	.word	0x40020008

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b08b      	sub	sp, #44	; 0x2c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	2414      	movs	r4, #20
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	0018      	movs	r0, r3
 80005f6:	2314      	movs	r3, #20
 80005f8:	001a      	movs	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f002 f9f6 	bl	80029ec <memset>
  if(huart->Instance==USART2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <HAL_UART_MspInit+0x8c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d130      	bne.n	800066c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_UART_MspInit+0x90>)
 800060c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0289      	lsls	r1, r1, #10
 8000614:	430a      	orrs	r2, r1
 8000616:	63da      	str	r2, [r3, #60]	; 0x3c
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_UART_MspInit+0x90>)
 800061a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	029b      	lsls	r3, r3, #10
 8000620:	4013      	ands	r3, r2
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_UART_MspInit+0x90>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_UART_MspInit+0x90>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA14-BOOT0     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_14;
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_UART_MspInit+0x94>)
 8000644:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	187a      	adds	r2, r7, r1
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 ffcc 	bl	8001604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b00b      	add	sp, #44	; 0x2c
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40004400 	.word	0x40004400
 8000678:	40021000 	.word	0x40021000
 800067c:	00004008 	.word	0x00004008

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <NMI_Handler+0x4>

08000686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <HardFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f8aa 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	46c0      	nop			; (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <DMA1_Channel1_IRQHandler+0x14>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fea2 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	2000008c 	.word	0x2000008c

080006c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d8:	f7ff fff6 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000702:	f002 f97b 	bl	80029fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000706:	f7ff fd87 	bl	8000218 <main>

0800070a <LoopForever>:

LoopForever:
  b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   r0, =_estack
 800070c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002adc 	.word	0x08002adc
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	20000180 	.word	0x20000180

08000724 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_IRQHandler>
	...

08000728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_Init+0x3c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_Init+0x3c>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0049      	lsls	r1, r1, #1
 800073e:	430a      	orrs	r2, r1
 8000740:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	2003      	movs	r0, #3
 8000744:	f000 f810 	bl	8000768 <HAL_InitTick>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d003      	beq.n	8000754 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	e001      	b.n	8000758 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff feb2 	bl	80004bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	781b      	ldrb	r3, [r3, #0]
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_InitTick+0x88>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d02b      	beq.n	80007d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_InitTick+0x8c>)
 8000782:	681c      	ldr	r4, [r3, #0]
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_InitTick+0x88>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	0019      	movs	r1, r3
 800078a:	23fa      	movs	r3, #250	; 0xfa
 800078c:	0098      	lsls	r0, r3, #2
 800078e:	f7ff fcb7 	bl	8000100 <__udivsi3>
 8000792:	0003      	movs	r3, r0
 8000794:	0019      	movs	r1, r3
 8000796:	0020      	movs	r0, r4
 8000798:	f7ff fcb2 	bl	8000100 <__udivsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fd97 	bl	80012d2 <HAL_SYSTICK_Config>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d112      	bne.n	80007ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80a      	bhi.n	80007c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fd66 	bl	8001288 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_InitTick+0x90>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e00d      	b.n	80007e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e008      	b.n	80007e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e003      	b.n	80007e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d8:	230f      	movs	r3, #15
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b005      	add	sp, #20
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	18d2      	adds	r2, r2, r3
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	20000008 	.word	0x20000008
 800081c:	2000017c 	.word	0x2000017c

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	2000017c 	.word	0x2000017c

08000834 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000844:	401a      	ands	r2, r3
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	431a      	orrs	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	fe3fffff 	.word	0xfe3fffff

0800085c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	23e0      	movs	r3, #224	; 0xe0
 800086a:	045b      	lsls	r3, r3, #17
 800086c:	4013      	ands	r3, r2
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}

08000876 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	2104      	movs	r1, #4
 800088a:	400a      	ands	r2, r1
 800088c:	2107      	movs	r1, #7
 800088e:	4091      	lsls	r1, r2
 8000890:	000a      	movs	r2, r1
 8000892:	43d2      	mvns	r2, r2
 8000894:	401a      	ands	r2, r3
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2104      	movs	r1, #4
 800089a:	400b      	ands	r3, r1
 800089c:	6879      	ldr	r1, [r7, #4]
 800089e:	4099      	lsls	r1, r3
 80008a0:	000b      	movs	r3, r1
 80008a2:	431a      	orrs	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b004      	add	sp, #16
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	2104      	movs	r1, #4
 80008c2:	400a      	ands	r2, r1
 80008c4:	2107      	movs	r1, #7
 80008c6:	4091      	lsls	r1, r2
 80008c8:	000a      	movs	r2, r1
 80008ca:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	2104      	movs	r1, #4
 80008d0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008d2:	40da      	lsrs	r2, r3
 80008d4:	0013      	movs	r3, r2
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}

080008de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	211f      	movs	r1, #31
 80008f2:	400a      	ands	r2, r1
 80008f4:	210f      	movs	r1, #15
 80008f6:	4091      	lsls	r1, r2
 80008f8:	000a      	movs	r2, r1
 80008fa:	43d2      	mvns	r2, r2
 80008fc:	401a      	ands	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0e9b      	lsrs	r3, r3, #26
 8000902:	210f      	movs	r1, #15
 8000904:	4019      	ands	r1, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	201f      	movs	r0, #31
 800090a:	4003      	ands	r3, r0
 800090c:	4099      	lsls	r1, r3
 800090e:	000b      	movs	r3, r1
 8000910:	431a      	orrs	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b004      	add	sp, #16
 800091c:	bd80      	pop	{r7, pc}

0800091e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	035b      	lsls	r3, r3, #13
 8000930:	0b5b      	lsrs	r3, r3, #13
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b002      	add	sp, #8
 800093e:	bd80      	pop	{r7, pc}

08000940 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	0352      	lsls	r2, r2, #13
 8000952:	0b52      	lsrs	r2, r2, #13
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	0212      	lsls	r2, r2, #8
 8000978:	43d2      	mvns	r2, r2
 800097a:	401a      	ands	r2, r3
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	400b      	ands	r3, r1
 8000984:	4904      	ldr	r1, [pc, #16]	; (8000998 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000986:	400b      	ands	r3, r1
 8000988:	431a      	orrs	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	07ffff00 	.word	0x07ffff00

0800099c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	0552      	lsls	r2, r2, #21
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	6fffffe8 	.word	0x6fffffe8

080009c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	055b      	lsls	r3, r3, #21
 80009d4:	401a      	ands	r2, r3
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	055b      	lsls	r3, r3, #21
 80009da:	429a      	cmp	r2, r3
 80009dc:	d101      	bne.n	80009e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b002      	add	sp, #8
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2201      	movs	r2, #1
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d101      	bne.n	8000a04 <LL_ADC_IsEnabled+0x18>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <LL_ADC_IsEnabled+0x1a>
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d101      	bne.n	8000a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b002      	add	sp, #8
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	231f      	movs	r3, #31
 8000a3a:	18fb      	adds	r3, r7, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e17f      	b.n	8000d56 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10a      	bne.n	8000a74 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fd4f 	bl	8000504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2254      	movs	r2, #84	; 0x54
 8000a70:	2100      	movs	r1, #0
 8000a72:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ffa3 	bl	80009c4 <LL_ADC_IsInternalRegulatorEnabled>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d115      	bne.n	8000aae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff ff88 	bl	800099c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a8c:	4bb4      	ldr	r3, [pc, #720]	; (8000d60 <HAL_ADC_Init+0x330>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	49b4      	ldr	r1, [pc, #720]	; (8000d64 <HAL_ADC_Init+0x334>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fb34 	bl	8000100 <__udivsi3>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000aa0:	e002      	b.n	8000aa8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f9      	bne.n	8000aa2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f7ff ff86 	bl	80009c4 <LL_ADC_IsInternalRegulatorEnabled>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d10f      	bne.n	8000adc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000acc:	2201      	movs	r2, #1
 8000ace:	431a      	orrs	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ad4:	231f      	movs	r3, #31
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff ff94 	bl	8000a0e <LL_ADC_REG_IsConversionOngoing>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	2210      	movs	r2, #16
 8000af0:	4013      	ands	r3, r2
 8000af2:	d000      	beq.n	8000af6 <HAL_ADC_Init+0xc6>
 8000af4:	e122      	b.n	8000d3c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d000      	beq.n	8000afe <HAL_ADC_Init+0xce>
 8000afc:	e11e      	b.n	8000d3c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	4a99      	ldr	r2, [pc, #612]	; (8000d68 <HAL_ADC_Init+0x338>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	2202      	movs	r2, #2
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ff6a 	bl	80009ec <LL_ADC_IsEnabled>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d000      	beq.n	8000b1e <HAL_ADC_Init+0xee>
 8000b1c:	e0ad      	b.n	8000c7a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7e1b      	ldrb	r3, [r3, #24]
 8000b26:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000b28:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7e5b      	ldrb	r3, [r3, #25]
 8000b2e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b30:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7e9b      	ldrb	r3, [r3, #26]
 8000b36:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b38:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_ADC_Init+0x118>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	e000      	b.n	8000b4a <HAL_ADC_Init+0x11a>
 8000b48:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000b4a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000b50:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	da04      	bge.n	8000b64 <HAL_ADC_Init+0x134>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	e001      	b.n	8000b68 <HAL_ADC_Init+0x138>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000b68:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	212c      	movs	r1, #44	; 0x2c
 8000b6e:	5c5b      	ldrb	r3, [r3, r1]
 8000b70:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000b72:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	5c9b      	ldrb	r3, [r3, r2]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d115      	bne.n	8000bb0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e9b      	ldrb	r3, [r3, #26]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	0252      	lsls	r2, r2, #9
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	e00b      	b.n	8000bb0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	2220      	movs	r2, #32
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba8:	2201      	movs	r2, #1
 8000baa:	431a      	orrs	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00a      	beq.n	8000bce <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bbc:	23e0      	movs	r3, #224	; 0xe0
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4a65      	ldr	r2, [pc, #404]	; (8000d6c <HAL_ADC_Init+0x33c>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	0019      	movs	r1, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	0f9b      	lsrs	r3, r3, #30
 8000bea:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	223c      	movs	r2, #60	; 0x3c
 8000bfc:	5c9b      	ldrb	r3, [r3, r2]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d111      	bne.n	8000c26 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	0f9b      	lsrs	r3, r3, #30
 8000c08:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c0e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000c14:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000c1a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	2201      	movs	r2, #1
 8000c22:	4313      	orrs	r3, r2
 8000c24:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <HAL_ADC_Init+0x340>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	0019      	movs	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	23c0      	movs	r3, #192	; 0xc0
 8000c42:	061b      	lsls	r3, r3, #24
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d018      	beq.n	8000c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d012      	beq.n	8000c7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	061b      	lsls	r3, r3, #24
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d00c      	beq.n	8000c7a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <HAL_ADC_Init+0x344>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <HAL_ADC_Init+0x348>)
 8000c66:	4013      	ands	r3, r2
 8000c68:	0019      	movs	r1, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	23f0      	movs	r3, #240	; 0xf0
 8000c70:	039b      	lsls	r3, r3, #14
 8000c72:	401a      	ands	r2, r3
 8000c74:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_ADC_Init+0x344>)
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c82:	001a      	movs	r2, r3
 8000c84:	2100      	movs	r1, #0
 8000c86:	f7ff fdf6 	bl	8000876 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c92:	493a      	ldr	r1, [pc, #232]	; (8000d7c <HAL_ADC_Init+0x34c>)
 8000c94:	001a      	movs	r2, r3
 8000c96:	f7ff fdee 	bl	8000876 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d109      	bne.n	8000cb6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2110      	movs	r1, #16
 8000cae:	4249      	negs	r1, r1
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8000cb4:	e018      	b.n	8000ce8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691a      	ldr	r2, [r3, #16]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	039b      	lsls	r3, r3, #14
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d112      	bne.n	8000ce8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	221c      	movs	r2, #28
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	4252      	negs	r2, r2
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0011      	movs	r1, r2
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2100      	movs	r1, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fdde 	bl	80008b0 <LL_ADC_GetSamplingTimeCommonChannels>
 8000cf4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d10b      	bne.n	8000d16 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4393      	bics	r3, r2
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d14:	e01c      	b.n	8000d50 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	2212      	movs	r2, #18
 8000d1c:	4393      	bics	r3, r2
 8000d1e:	2210      	movs	r2, #16
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000d32:	231f      	movs	r3, #31
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d3a:	e009      	b.n	8000d50 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	2210      	movs	r2, #16
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d48:	231f      	movs	r3, #31
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000d50:	231f      	movs	r3, #31
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	781b      	ldrb	r3, [r3, #0]
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b008      	add	sp, #32
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000000 	.word	0x20000000
 8000d64:	00030d40 	.word	0x00030d40
 8000d68:	fffffefd 	.word	0xfffffefd
 8000d6c:	fffe0201 	.word	0xfffe0201
 8000d70:	1ffffc02 	.word	0x1ffffc02
 8000d74:	40012708 	.word	0x40012708
 8000d78:	ffc3ffff 	.word	0xffc3ffff
 8000d7c:	07ffff04 	.word	0x07ffff04

08000d80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d8a:	2317      	movs	r3, #23
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2254      	movs	r2, #84	; 0x54
 8000d9a:	5c9b      	ldrb	r3, [r3, r2]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d101      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x24>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e1c0      	b.n	8001126 <HAL_ADC_ConfigChannel+0x3a6>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2254      	movs	r2, #84	; 0x54
 8000da8:	2101      	movs	r1, #1
 8000daa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fe2c 	bl	8000a0e <LL_ADC_REG_IsConversionOngoing>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d000      	beq.n	8000dbc <HAL_ADC_ConfigChannel+0x3c>
 8000dba:	e1a3      	b.n	8001104 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d100      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x46>
 8000dc4:	e143      	b.n	800104e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	061b      	lsls	r3, r3, #24
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d004      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8000dd6:	4ac1      	ldr	r2, [pc, #772]	; (80010dc <HAL_ADC_ConfigChannel+0x35c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d108      	bne.n	8000dee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	0019      	movs	r1, r3
 8000de6:	0010      	movs	r0, r2
 8000de8:	f7ff fd99 	bl	800091e <LL_ADC_REG_SetSequencerChAdd>
 8000dec:	e0c9      	b.n	8000f82 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	211f      	movs	r1, #31
 8000df8:	400b      	ands	r3, r1
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	4099      	lsls	r1, r3
 8000dfe:	000b      	movs	r3, r1
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4013      	ands	r3, r2
 8000e04:	0019      	movs	r1, r3
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	035b      	lsls	r3, r3, #13
 8000e0c:	0b5b      	lsrs	r3, r3, #13
 8000e0e:	d105      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x9c>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	0e9b      	lsrs	r3, r3, #26
 8000e16:	221f      	movs	r2, #31
 8000e18:	4013      	ands	r3, r2
 8000e1a:	e098      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2201      	movs	r2, #1
 8000e22:	4013      	ands	r3, r2
 8000e24:	d000      	beq.n	8000e28 <HAL_ADC_ConfigChannel+0xa8>
 8000e26:	e091      	b.n	8000f4c <HAL_ADC_ConfigChannel+0x1cc>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d000      	beq.n	8000e34 <HAL_ADC_ConfigChannel+0xb4>
 8000e32:	e089      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x1c8>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d000      	beq.n	8000e40 <HAL_ADC_ConfigChannel+0xc0>
 8000e3e:	e081      	b.n	8000f44 <HAL_ADC_ConfigChannel+0x1c4>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2208      	movs	r2, #8
 8000e46:	4013      	ands	r3, r2
 8000e48:	d000      	beq.n	8000e4c <HAL_ADC_ConfigChannel+0xcc>
 8000e4a:	e079      	b.n	8000f40 <HAL_ADC_ConfigChannel+0x1c0>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2210      	movs	r2, #16
 8000e52:	4013      	ands	r3, r2
 8000e54:	d000      	beq.n	8000e58 <HAL_ADC_ConfigChannel+0xd8>
 8000e56:	e071      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x1bc>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d000      	beq.n	8000e64 <HAL_ADC_ConfigChannel+0xe4>
 8000e62:	e069      	b.n	8000f38 <HAL_ADC_ConfigChannel+0x1b8>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d000      	beq.n	8000e70 <HAL_ADC_ConfigChannel+0xf0>
 8000e6e:	e061      	b.n	8000f34 <HAL_ADC_ConfigChannel+0x1b4>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	4013      	ands	r3, r2
 8000e78:	d000      	beq.n	8000e7c <HAL_ADC_ConfigChannel+0xfc>
 8000e7a:	e059      	b.n	8000f30 <HAL_ADC_ConfigChannel+0x1b0>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	d151      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1ac>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	d149      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x1a8>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d141      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1a4>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2380      	movs	r3, #128	; 0x80
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d139      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x1a0>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	015b      	lsls	r3, r3, #5
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d131      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x19c>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	019b      	lsls	r3, r3, #6
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d129      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x198>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d121      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x194>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d119      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x190>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	025b      	lsls	r3, r3, #9
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d111      	bne.n	8000f0c <HAL_ADC_ConfigChannel+0x18c>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d109      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x188>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	02db      	lsls	r3, r3, #11
 8000efc:	4013      	ands	r3, r2
 8000efe:	d001      	beq.n	8000f04 <HAL_ADC_ConfigChannel+0x184>
 8000f00:	2312      	movs	r3, #18
 8000f02:	e024      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f04:	2300      	movs	r3, #0
 8000f06:	e022      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f08:	2311      	movs	r3, #17
 8000f0a:	e020      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	e01e      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f10:	230f      	movs	r3, #15
 8000f12:	e01c      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f14:	230e      	movs	r3, #14
 8000f16:	e01a      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f18:	230d      	movs	r3, #13
 8000f1a:	e018      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	e016      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f20:	230b      	movs	r3, #11
 8000f22:	e014      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f24:	230a      	movs	r3, #10
 8000f26:	e012      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f28:	2309      	movs	r3, #9
 8000f2a:	e010      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	e00e      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f30:	2307      	movs	r3, #7
 8000f32:	e00c      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f34:	2306      	movs	r3, #6
 8000f36:	e00a      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f38:	2305      	movs	r3, #5
 8000f3a:	e008      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	e006      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e004      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e002      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x1ce>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	6852      	ldr	r2, [r2, #4]
 8000f52:	201f      	movs	r0, #31
 8000f54:	4002      	ands	r2, r0
 8000f56:	4093      	lsls	r3, r2
 8000f58:	000a      	movs	r2, r1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d808      	bhi.n	8000f82 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	f7ff fcae 	bl	80008de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	6819      	ldr	r1, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	f7ff fce8 	bl	8000964 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db00      	blt.n	8000f9e <HAL_ADC_ConfigChannel+0x21e>
 8000f9c:	e0bc      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff fc5b 	bl	800085c <LL_ADC_GetCommonPathInternalCh>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_ADC_ConfigChannel+0x364>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d122      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	041b      	lsls	r3, r3, #16
 8000fba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000fbc:	d11d      	bne.n	8000ffa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0412      	lsls	r2, r2, #16
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	4a46      	ldr	r2, [pc, #280]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f7ff fc32 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_ADC_ConfigChannel+0x368>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4945      	ldr	r1, [pc, #276]	; (80010ec <HAL_ADC_ConfigChannel+0x36c>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff f892 	bl	8000100 <__udivsi3>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	189b      	adds	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8000fea:	e002      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f9      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ff8:	e08e      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <HAL_ADC_ConfigChannel+0x370>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d10e      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	045b      	lsls	r3, r3, #17
 800100a:	4013      	ands	r3, r2
 800100c:	d109      	bne.n	8001022 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0452      	lsls	r2, r2, #17
 8001014:	4313      	orrs	r3, r2
 8001016:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 8001018:	0019      	movs	r1, r3
 800101a:	0010      	movs	r0, r2
 800101c:	f7ff fc0a 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
 8001020:	e07a      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a33      	ldr	r2, [pc, #204]	; (80010f4 <HAL_ADC_ConfigChannel+0x374>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d000      	beq.n	800102e <HAL_ADC_ConfigChannel+0x2ae>
 800102c:	e074      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	03db      	lsls	r3, r3, #15
 8001034:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001036:	d000      	beq.n	800103a <HAL_ADC_ConfigChannel+0x2ba>
 8001038:	e06e      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	03d2      	lsls	r2, r2, #15
 8001040:	4313      	orrs	r3, r2
 8001042:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 8001044:	0019      	movs	r1, r3
 8001046:	0010      	movs	r0, r2
 8001048:	f7ff fbf4 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
 800104c:	e064      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691a      	ldr	r2, [r3, #16]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	429a      	cmp	r2, r3
 8001058:	d004      	beq.n	8001064 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_ADC_ConfigChannel+0x35c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d107      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0019      	movs	r1, r3
 800106e:	0010      	movs	r0, r2
 8001070:	f7ff fc66 	bl	8000940 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	da4d      	bge.n	8001118 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff fbec 	bl	800085c <LL_ADC_GetCommonPathInternalCh>
 8001084:	0003      	movs	r3, r0
 8001086:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_ADC_ConfigChannel+0x364>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d108      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_ADC_ConfigChannel+0x378>)
 8001096:	4013      	ands	r3, r2
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f7ff fbc9 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
 80010a2:	e039      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <HAL_ADC_ConfigChannel+0x370>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d108      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_ADC_ConfigChannel+0x37c>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 80010b6:	0019      	movs	r1, r3
 80010b8:	0010      	movs	r0, r2
 80010ba:	f7ff fbbb 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
 80010be:	e02b      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_ADC_ConfigChannel+0x374>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d126      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_ADC_ConfigChannel+0x380>)
 80010ce:	4013      	ands	r3, r2
 80010d0:	4a03      	ldr	r2, [pc, #12]	; (80010e0 <HAL_ADC_ConfigChannel+0x360>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f7ff fbad 	bl	8000834 <LL_ADC_SetCommonPathInternalCh>
 80010da:	e01d      	b.n	8001118 <HAL_ADC_ConfigChannel+0x398>
 80010dc:	80000004 	.word	0x80000004
 80010e0:	40012708 	.word	0x40012708
 80010e4:	b0001000 	.word	0xb0001000
 80010e8:	20000000 	.word	0x20000000
 80010ec:	00030d40 	.word	0x00030d40
 80010f0:	b8004000 	.word	0xb8004000
 80010f4:	b4002000 	.word	0xb4002000
 80010f8:	ff7fffff 	.word	0xff7fffff
 80010fc:	feffffff 	.word	0xfeffffff
 8001100:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	2220      	movs	r2, #32
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001110:	2317      	movs	r3, #23
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2254      	movs	r2, #84	; 0x54
 800111c:	2100      	movs	r1, #0
 800111e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001120:	2317      	movs	r3, #23
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	781b      	ldrb	r3, [r3, #0]
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b006      	add	sp, #24
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b7f      	cmp	r3, #127	; 0x7f
 8001142:	d809      	bhi.n	8001158 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	001a      	movs	r2, r3
 800114a:	231f      	movs	r3, #31
 800114c:	401a      	ands	r2, r3
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_EnableIRQ+0x30>)
 8001150:	2101      	movs	r1, #1
 8001152:	4091      	lsls	r1, r2
 8001154:	000a      	movs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	0002      	movs	r2, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b7f      	cmp	r3, #127	; 0x7f
 8001178:	d828      	bhi.n	80011cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117a:	4a2f      	ldr	r2, [pc, #188]	; (8001238 <__NVIC_SetPriority+0xd4>)
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b25b      	sxtb	r3, r3
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	33c0      	adds	r3, #192	; 0xc0
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	589b      	ldr	r3, [r3, r2]
 800118a:	1dfa      	adds	r2, r7, #7
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	0011      	movs	r1, r2
 8001190:	2203      	movs	r2, #3
 8001192:	400a      	ands	r2, r1
 8001194:	00d2      	lsls	r2, r2, #3
 8001196:	21ff      	movs	r1, #255	; 0xff
 8001198:	4091      	lsls	r1, r2
 800119a:	000a      	movs	r2, r1
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	019b      	lsls	r3, r3, #6
 80011a6:	22ff      	movs	r2, #255	; 0xff
 80011a8:	401a      	ands	r2, r3
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	2303      	movs	r3, #3
 80011b2:	4003      	ands	r3, r0
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b8:	481f      	ldr	r0, [pc, #124]	; (8001238 <__NVIC_SetPriority+0xd4>)
 80011ba:	1dfb      	adds	r3, r7, #7
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	430a      	orrs	r2, r1
 80011c4:	33c0      	adds	r3, #192	; 0xc0
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ca:	e031      	b.n	8001230 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <__NVIC_SetPriority+0xd8>)
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0019      	movs	r1, r3
 80011d4:	230f      	movs	r3, #15
 80011d6:	400b      	ands	r3, r1
 80011d8:	3b08      	subs	r3, #8
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3306      	adds	r3, #6
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	18d3      	adds	r3, r2, r3
 80011e2:	3304      	adds	r3, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	1dfa      	adds	r2, r7, #7
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	0011      	movs	r1, r2
 80011ec:	2203      	movs	r2, #3
 80011ee:	400a      	ands	r2, r1
 80011f0:	00d2      	lsls	r2, r2, #3
 80011f2:	21ff      	movs	r1, #255	; 0xff
 80011f4:	4091      	lsls	r1, r2
 80011f6:	000a      	movs	r2, r1
 80011f8:	43d2      	mvns	r2, r2
 80011fa:	401a      	ands	r2, r3
 80011fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	019b      	lsls	r3, r3, #6
 8001202:	22ff      	movs	r2, #255	; 0xff
 8001204:	401a      	ands	r2, r3
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	2303      	movs	r3, #3
 800120e:	4003      	ands	r3, r0
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <__NVIC_SetPriority+0xd8>)
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	001c      	movs	r4, r3
 800121c:	230f      	movs	r3, #15
 800121e:	4023      	ands	r3, r4
 8001220:	3b08      	subs	r3, #8
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	430a      	orrs	r2, r1
 8001226:	3306      	adds	r3, #6
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	18c3      	adds	r3, r0, r3
 800122c:	3304      	adds	r3, #4
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b003      	add	sp, #12
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	045b      	lsls	r3, r3, #17
 8001250:	429a      	cmp	r2, r3
 8001252:	d301      	bcc.n	8001258 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001254:	2301      	movs	r3, #1
 8001256:	e010      	b.n	800127a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <SysTick_Config+0x44>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	3a01      	subs	r2, #1
 800125e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001260:	2301      	movs	r3, #1
 8001262:	425b      	negs	r3, r3
 8001264:	2103      	movs	r1, #3
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff ff7c 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x44>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x44>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	210f      	movs	r1, #15
 8001294:	187b      	adds	r3, r7, r1
 8001296:	1c02      	adds	r2, r0, #0
 8001298:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	187b      	adds	r3, r7, r1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	0002      	movs	r2, r0
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff33 	bl	8001130 <__NVIC_EnableIRQ>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff ffaf 	bl	8001240 <SysTick_Config>
 80012e2:	0003      	movs	r3, r0
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e077      	b.n	80013ee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3d      	ldr	r2, [pc, #244]	; (80013f8 <HAL_DMA_Init+0x10c>)
 8001304:	4694      	mov	ip, r2
 8001306:	4463      	add	r3, ip
 8001308:	2114      	movs	r1, #20
 800130a:	0018      	movs	r0, r3
 800130c:	f7fe fef8 	bl	8000100 <__udivsi3>
 8001310:	0003      	movs	r3, r0
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2225      	movs	r2, #37	; 0x25
 800131c:	2102      	movs	r1, #2
 800131e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4934      	ldr	r1, [pc, #208]	; (80013fc <HAL_DMA_Init+0x110>)
 800132c:	400a      	ands	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6819      	ldr	r1, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	431a      	orrs	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f000 f8fb 	bl	8001564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	01db      	lsls	r3, r3, #7
 8001376:	429a      	cmp	r2, r3
 8001378:	d102      	bne.n	8001380 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	213f      	movs	r1, #63	; 0x3f
 800138a:	400a      	ands	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001396:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d011      	beq.n	80013c4 <HAL_DMA_Init+0xd8>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d80d      	bhi.n	80013c4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f906 	bl	80015bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	e008      	b.n	80013d6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2225      	movs	r2, #37	; 0x25
 80013e0:	2101      	movs	r1, #1
 80013e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	; 0x24
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	bffdfff8 	.word	0xbffdfff8
 80013fc:	ffff800f 	.word	0xffff800f

08001400 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	221c      	movs	r2, #28
 800141c:	4013      	ands	r3, r2
 800141e:	2204      	movs	r2, #4
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4013      	ands	r3, r2
 8001428:	d027      	beq.n	800147a <HAL_DMA_IRQHandler+0x7a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2204      	movs	r2, #4
 800142e:	4013      	ands	r3, r2
 8001430:	d023      	beq.n	800147a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2220      	movs	r2, #32
 800143a:	4013      	ands	r3, r2
 800143c:	d107      	bne.n	800144e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2104      	movs	r1, #4
 800144a:	438a      	bics	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 8001450:	6859      	ldr	r1, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	221c      	movs	r2, #28
 8001458:	4013      	ands	r3, r2
 800145a:	2204      	movs	r2, #4
 800145c:	409a      	lsls	r2, r3
 800145e:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <HAL_DMA_IRQHandler+0x6e>
 800146c:	e073      	b.n	8001556 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	0010      	movs	r0, r2
 8001476:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001478:	e06d      	b.n	8001556 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	221c      	movs	r2, #28
 8001480:	4013      	ands	r3, r2
 8001482:	2202      	movs	r2, #2
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	d02e      	beq.n	80014ec <HAL_DMA_IRQHandler+0xec>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d02a      	beq.n	80014ec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2220      	movs	r2, #32
 800149e:	4013      	ands	r3, r2
 80014a0:	d10b      	bne.n	80014ba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	210a      	movs	r1, #10
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2225      	movs	r2, #37	; 0x25
 80014b6:	2101      	movs	r1, #1
 80014b8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	221c      	movs	r2, #28
 80014c4:	4013      	ands	r3, r2
 80014c6:	2202      	movs	r2, #2
 80014c8:	409a      	lsls	r2, r3
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	2100      	movs	r1, #0
 80014d6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d03a      	beq.n	8001556 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	0010      	movs	r0, r2
 80014e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80014ea:	e034      	b.n	8001556 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	221c      	movs	r2, #28
 80014f2:	4013      	ands	r3, r2
 80014f4:	2208      	movs	r2, #8
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	d02b      	beq.n	8001558 <HAL_DMA_IRQHandler+0x158>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2208      	movs	r2, #8
 8001504:	4013      	ands	r3, r2
 8001506:	d027      	beq.n	8001558 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	210e      	movs	r1, #14
 8001514:	438a      	bics	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	221c      	movs	r2, #28
 8001522:	4013      	ands	r3, r2
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_DMA_IRQHandler+0x160>)
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2225      	movs	r2, #37	; 0x25
 8001538:	2101      	movs	r1, #1
 800153a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	0010      	movs	r0, r2
 8001554:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46c0      	nop			; (mov r8, r8)
}
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020000 	.word	0x40020000

08001564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001574:	4694      	mov	ip, r2
 8001576:	4463      	add	r3, ip
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	001a      	movs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	001a      	movs	r2, r3
 8001586:	23ff      	movs	r3, #255	; 0xff
 8001588:	4013      	ands	r3, r2
 800158a:	3b08      	subs	r3, #8
 800158c:	2114      	movs	r1, #20
 800158e:	0018      	movs	r0, r3
 8001590:	f7fe fdb6 	bl	8000100 <__udivsi3>
 8001594:	0003      	movs	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800159c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	221f      	movs	r2, #31
 80015a2:	4013      	ands	r3, r2
 80015a4:	2201      	movs	r2, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	10008200 	.word	0x10008200
 80015b8:	40020880 	.word	0x40020880

080015bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	223f      	movs	r2, #63	; 0x3f
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015d2:	4694      	mov	ip, r2
 80015d4:	4463      	add	r3, ip
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	001a      	movs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	4013      	ands	r3, r2
 80015ec:	2201      	movs	r2, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	1000823f 	.word	0x1000823f
 8001600:	40020940 	.word	0x40020940

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e147      	b.n	80018a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4091      	lsls	r1, r2
 800161e:	000a      	movs	r2, r1
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <HAL_GPIO_Init+0x28>
 800162a:	e138      	b.n	800189e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	4013      	ands	r3, r2
 8001634:	2b01      	cmp	r3, #1
 8001636:	d005      	beq.n	8001644 <HAL_GPIO_Init+0x40>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	4013      	ands	r3, r2
 8001640:	2b02      	cmp	r3, #2
 8001642:	d130      	bne.n	80016a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	409a      	lsls	r2, r3
 8001652:	0013      	movs	r3, r2
 8001654:	43da      	mvns	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167a:	2201      	movs	r2, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	2201      	movs	r2, #1
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d017      	beq.n	80016e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	43da      	mvns	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d123      	bne.n	8001736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	58d3      	ldr	r3, [r2, r3]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2207      	movs	r2, #7
 8001700:	4013      	ands	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	691a      	ldr	r2, [r3, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2107      	movs	r1, #7
 800171a:	400b      	ands	r3, r1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	6939      	ldr	r1, [r7, #16]
 8001734:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	401a      	ands	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4013      	ands	r3, r2
 8001774:	d100      	bne.n	8001778 <HAL_GPIO_Init+0x174>
 8001776:	e092      	b.n	800189e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3318      	adds	r3, #24
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	589b      	ldr	r3, [r3, r2]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	220f      	movs	r2, #15
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	23a0      	movs	r3, #160	; 0xa0
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x1ca>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a45      	ldr	r2, [pc, #276]	; (80018c0 <HAL_GPIO_Init+0x2bc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x1c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a44      	ldr	r2, [pc, #272]	; (80018c4 <HAL_GPIO_Init+0x2c0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x1c2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a43      	ldr	r2, [pc, #268]	; (80018c8 <HAL_GPIO_Init+0x2c4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x1be>
 80017be:	2303      	movs	r3, #3
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x1cc>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x1cc>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x1cc>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x1cc>
 80017ce:	2300      	movs	r3, #0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	2103      	movs	r1, #3
 80017d4:	400a      	ands	r2, r1
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	4093      	lsls	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017e0:	4936      	ldr	r1, [pc, #216]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3318      	adds	r3, #24
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	035b      	lsls	r3, r3, #13
 8001806:	4013      	ands	r3, r2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001818:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43da      	mvns	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	039b      	lsls	r3, r3, #14
 8001830:	4013      	ands	r3, r2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001844:	2384      	movs	r3, #132	; 0x84
 8001846:	58d3      	ldr	r3, [r2, r3]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43da      	mvns	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	4013      	ands	r3, r2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001868:	4914      	ldr	r1, [pc, #80]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 800186a:	2284      	movs	r2, #132	; 0x84
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001870:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	58d3      	ldr	r3, [r2, r3]
 8001876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43da      	mvns	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4013      	ands	r3, r2
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001896:	4909      	ldr	r1, [pc, #36]	; (80018bc <HAL_GPIO_Init+0x2b8>)
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	40da      	lsrs	r2, r3
 80018ac:	1e13      	subs	r3, r2, #0
 80018ae:	d000      	beq.n	80018b2 <HAL_GPIO_Init+0x2ae>
 80018b0:	e6b0      	b.n	8001614 <HAL_GPIO_Init+0x10>
  }
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b006      	add	sp, #24
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021800 	.word	0x40021800
 80018c0:	50000400 	.word	0x50000400
 80018c4:	50000800 	.word	0x50000800
 80018c8:	50000c00 	.word	0x50000c00

080018cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018da:	4013      	ands	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d11f      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	0013      	movs	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	189b      	adds	r3, r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018fe:	0018      	movs	r0, r3
 8001900:	f7fe fbfe 	bl	8000100 <__udivsi3>
 8001904:	0003      	movs	r3, r0
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190a:	e008      	b.n	800191e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3b01      	subs	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e001      	b.n	800191e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e009      	b.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	401a      	ands	r2, r3
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	429a      	cmp	r2, r3
 800192e:	d0ed      	beq.n	800190c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40007000 	.word	0x40007000
 8001940:	fffff9ff 	.word	0xfffff9ff
 8001944:	20000000 	.word	0x20000000
 8001948:	000f4240 	.word	0x000f4240

0800194c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	23e0      	movs	r3, #224	; 0xe0
 8001956:	01db      	lsls	r3, r3, #7
 8001958:	4013      	ands	r3, r2
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e2f3      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x1e>
 8001980:	e07c      	b.n	8001a7c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001982:	4bc3      	ldr	r3, [pc, #780]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2238      	movs	r2, #56	; 0x38
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198c:	4bc0      	ldr	r3, [pc, #768]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b10      	cmp	r3, #16
 800199a:	d102      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3e>
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d10b      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	4bb9      	ldr	r3, [pc, #740]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	029b      	lsls	r3, r3, #10
 80019b0:	4013      	ands	r3, r2
 80019b2:	d062      	beq.n	8001a7a <HAL_RCC_OscConfig+0x116>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d15e      	bne.n	8001a7a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e2ce      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	025b      	lsls	r3, r3, #9
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x78>
 80019cc:	4bb0      	ldr	r3, [pc, #704]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4baf      	ldr	r3, [pc, #700]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	0249      	lsls	r1, r1, #9
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e020      	b.n	8001a1e <HAL_RCC_OscConfig+0xba>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	23a0      	movs	r3, #160	; 0xa0
 80019e2:	02db      	lsls	r3, r3, #11
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10e      	bne.n	8001a06 <HAL_RCC_OscConfig+0xa2>
 80019e8:	4ba9      	ldr	r3, [pc, #676]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4ba8      	ldr	r3, [pc, #672]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	02c9      	lsls	r1, r1, #11
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	4ba6      	ldr	r3, [pc, #664]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4ba5      	ldr	r3, [pc, #660]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0249      	lsls	r1, r1, #9
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e00b      	b.n	8001a1e <HAL_RCC_OscConfig+0xba>
 8001a06:	4ba2      	ldr	r3, [pc, #648]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4ba1      	ldr	r3, [pc, #644]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	49a1      	ldr	r1, [pc, #644]	; (8001c94 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	4b9f      	ldr	r3, [pc, #636]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b9e      	ldr	r3, [pc, #632]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	499f      	ldr	r1, [pc, #636]	; (8001c98 <HAL_RCC_OscConfig+0x334>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d014      	beq.n	8001a50 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7fe fefb 	bl	8000820 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7fe fef6 	bl	8000820 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e28d      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4b93      	ldr	r3, [pc, #588]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	029b      	lsls	r3, r3, #10
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xcc>
 8001a4e:	e015      	b.n	8001a7c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7fe fee6 	bl	8000820 <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7fe fee1 	bl	8000820 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	; 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e278      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	029b      	lsls	r3, r3, #10
 8001a74:	4013      	ands	r3, r2
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0xf6>
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d100      	bne.n	8001a88 <HAL_RCC_OscConfig+0x124>
 8001a86:	e099      	b.n	8001bbc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2238      	movs	r2, #56	; 0x38
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a92:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2203      	movs	r2, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d102      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x144>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d002      	beq.n	8001aae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d135      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aae:	4b78      	ldr	r3, [pc, #480]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x162>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e24b      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a74      	ldr	r2, [pc, #464]	; (8001c9c <HAL_RCC_OscConfig+0x338>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	0019      	movs	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	021a      	lsls	r2, r3, #8
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d112      	bne.n	8001b08 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ae2:	4b6b      	ldr	r3, [pc, #428]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_RCC_OscConfig+0x33c>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0adb      	lsrs	r3, r3, #11
 8001afc:	2207      	movs	r2, #7
 8001afe:	4013      	ands	r3, r2
 8001b00:	4a68      	ldr	r2, [pc, #416]	; (8001ca4 <HAL_RCC_OscConfig+0x340>)
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	4b68      	ldr	r3, [pc, #416]	; (8001ca8 <HAL_RCC_OscConfig+0x344>)
 8001b06:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x348>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe fe2b 	bl	8000768 <HAL_InitTick>
 8001b12:	1e03      	subs	r3, r0, #0
 8001b14:	d051      	beq.n	8001bba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e221      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d030      	beq.n	8001b84 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b22:	4b5b      	ldr	r3, [pc, #364]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x33c>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0049      	lsls	r1, r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7fe fe6c 	bl	8000820 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7fe fe67 	bl	8000820 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1fe      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x338>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	021a      	lsls	r2, r3, #8
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	e01b      	b.n	8001bbc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	4949      	ldr	r1, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x34c>)
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe46 	bl	8000820 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7fe fe41 	bl	8000820 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1d8      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x236>
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d047      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2238      	movs	r2, #56	; 0x38
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b18      	cmp	r3, #24
 8001bd0:	d10a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d03c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d138      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e1ba      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d019      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe fe10 	bl	8000820 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7fe fe0b 	bl	8000820 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a2      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d0f1      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2a2>
 8001c22:	e018      	b.n	8001c56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe fdf6 	bl	8000820 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3a:	f7fe fdf1 	bl	8000820 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e188      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f1      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d100      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2fe>
 8001c60:	e0c6      	b.n	8001df0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	231f      	movs	r3, #31
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2238      	movs	r2, #56	; 0x38
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b20      	cmp	r3, #32
 8001c74:	d11e      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <HAL_RCC_OscConfig+0x31e>
 8001c80:	e0b6      	b.n	8001df0 <HAL_RCC_OscConfig+0x48c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d000      	beq.n	8001c8c <HAL_RCC_OscConfig+0x328>
 8001c8a:	e0b1      	b.n	8001df0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e166      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	fffeffff 	.word	0xfffeffff
 8001c98:	fffbffff 	.word	0xfffbffff
 8001c9c:	ffff80ff 	.word	0xffff80ff
 8001ca0:	ffffc7ff 	.word	0xffffc7ff
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cb4:	4bac      	ldr	r3, [pc, #688]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x360>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_RCC_OscConfig+0x362>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d011      	beq.n	8001cee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4ba7      	ldr	r3, [pc, #668]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cce:	4ba6      	ldr	r3, [pc, #664]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	0549      	lsls	r1, r1, #21
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd8:	4ba3      	ldr	r3, [pc, #652]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	055b      	lsls	r3, r3, #21
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cee:	4b9f      	ldr	r3, [pc, #636]	; (8001f6c <HAL_RCC_OscConfig+0x608>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d11a      	bne.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfa:	4b9c      	ldr	r3, [pc, #624]	; (8001f6c <HAL_RCC_OscConfig+0x608>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b9b      	ldr	r3, [pc, #620]	; (8001f6c <HAL_RCC_OscConfig+0x608>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0049      	lsls	r1, r1, #1
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d08:	f7fe fd8a 	bl	8000820 <HAL_GetTick>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7fe fd85 	bl	8000820 <HAL_GetTick>
 8001d16:	0002      	movs	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e11c      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d24:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_OscConfig+0x608>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3e2>
 8001d38:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d3e:	2101      	movs	r1, #1
 8001d40:	430a      	orrs	r2, r1
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x404>
 8001d4e:	4b86      	ldr	r3, [pc, #536]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d54:	2104      	movs	r1, #4
 8001d56:	430a      	orrs	r2, r1
 8001d58:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5e:	4b82      	ldr	r3, [pc, #520]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
 8001d68:	4b7f      	ldr	r3, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	438a      	bics	r2, r1
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d74:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d78:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7fe fd4a 	bl	8000820 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe fd45 	bl	8000820 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4a74      	ldr	r2, [pc, #464]	; (8001f70 <HAL_RCC_OscConfig+0x60c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0db      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x42e>
 8001db0:	e013      	b.n	8001dda <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7fe fd35 	bl	8000820 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dba:	e009      	b.n	8001dd0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7fe fd30 	bl	8000820 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x60c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0c6      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dda:	231f      	movs	r3, #31
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b60      	ldr	r3, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de8:	4b5f      	ldr	r3, [pc, #380]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001dea:	4962      	ldr	r1, [pc, #392]	; (8001f74 <HAL_RCC_OscConfig+0x610>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x496>
 8001df8:	e0b0      	b.n	8001f5c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2238      	movs	r2, #56	; 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d100      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4a4>
 8001e06:	e078      	b.n	8001efa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d153      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e10:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e16:	4958      	ldr	r1, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x614>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7fe fd00 	bl	8000820 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe fcfb 	bl	8000820 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e092      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	049b      	lsls	r3, r3, #18
 8001e40:	4013      	ands	r3, r2
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x618>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0449      	lsls	r1, r1, #17
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e80:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0549      	lsls	r1, r1, #21
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fcc7 	bl	8000820 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fcc2 	bl	8000820 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e059      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	049b      	lsls	r3, r3, #18
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x534>
 8001eb6:	e051      	b.n	8001f5c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001ebe:	492e      	ldr	r1, [pc, #184]	; (8001f78 <HAL_RCC_OscConfig+0x614>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fcac 	bl	8000820 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fca7 	bl	8000820 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03e      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b21      	ldr	r3, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	049b      	lsls	r3, r3, #18
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001ef2:	4923      	ldr	r1, [pc, #140]	; (8001f80 <HAL_RCC_OscConfig+0x61c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	e030      	b.n	8001f5c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02b      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_RCC_OscConfig+0x604>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	401a      	ands	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d11e      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2270      	movs	r2, #112	; 0x70
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d117      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	23fe      	movs	r3, #254	; 0xfe
 8001f2c:	01db      	lsls	r3, r3, #7
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d10e      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	23f8      	movs	r3, #248	; 0xf8
 8001f3e:	039b      	lsls	r3, r3, #14
 8001f40:	401a      	ands	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	0f5b      	lsrs	r3, r3, #29
 8001f4e:	075a      	lsls	r2, r3, #29
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b008      	add	sp, #32
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	00001388 	.word	0x00001388
 8001f74:	efffffff 	.word	0xefffffff
 8001f78:	feffffff 	.word	0xfeffffff
 8001f7c:	1fc1808c 	.word	0x1fc1808c
 8001f80:	effefffc 	.word	0xeffefffc

08001f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0e9      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f98:	4b76      	ldr	r3, [pc, #472]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d91e      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b73      	ldr	r3, [pc, #460]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2207      	movs	r2, #7
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fc32 	bl	8000820 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fc0:	e009      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc2:	f7fe fc2d 	bl	8000820 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <HAL_RCC_ClockConfig+0x1f4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e0ca      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2207      	movs	r2, #7
 8001fdc:	4013      	ands	r3, r2
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d015      	beq.n	800201a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d006      	beq.n	8002006 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ff8:	4b60      	ldr	r3, [pc, #384]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8001ffe:	21e0      	movs	r1, #224	; 0xe0
 8002000:	01c9      	lsls	r1, r1, #7
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_RCC_ClockConfig+0x1fc>)
 800200c:	4013      	ands	r3, r2
 800200e:	0019      	movs	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	d057      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202c:	4b53      	ldr	r3, [pc, #332]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	d12b      	bne.n	8002090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e097      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d107      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002044:	4b4d      	ldr	r3, [pc, #308]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	049b      	lsls	r3, r3, #18
 800204c:	4013      	ands	r3, r2
 800204e:	d11f      	bne.n	8002090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e08b      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205c:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4013      	ands	r3, r2
 8002066:	d113      	bne.n	8002090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e07f      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002074:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d108      	bne.n	8002090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e074      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e06d      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2207      	movs	r2, #7
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a4:	f7fe fbbc 	bl	8000820 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ae:	f7fe fbb7 	bl	8000820 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <HAL_RCC_ClockConfig+0x1f4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e054      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2238      	movs	r2, #56	; 0x38
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1ec      	bne.n	80020ae <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d21e      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2207      	movs	r2, #7
 80020e8:	4393      	bics	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fb94 	bl	8000820 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fe:	f7fe fb8f 	bl	8000820 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_RCC_ClockConfig+0x1f4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e02c      	b.n	800216c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d1ee      	bne.n	80020fe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2204      	movs	r2, #4
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800212a:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_RCC_ClockConfig+0x200>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800213e:	f000 f829 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002142:	0001      	movs	r1, r0
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_ClockConfig+0x1f8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	220f      	movs	r2, #15
 800214c:	401a      	ands	r2, r3
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x204>)
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	58d3      	ldr	r3, [r2, r3]
 8002154:	221f      	movs	r2, #31
 8002156:	4013      	ands	r3, r2
 8002158:	000a      	movs	r2, r1
 800215a:	40da      	lsrs	r2, r3
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x208>)
 800215e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x20c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe faff 	bl	8000768 <HAL_InitTick>
 800216a:	0003      	movs	r3, r0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b004      	add	sp, #16
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40022000 	.word	0x40022000
 8002178:	00001388 	.word	0x00001388
 800217c:	40021000 	.word	0x40021000
 8002180:	fffff0ff 	.word	0xfffff0ff
 8002184:	ffff8fff 	.word	0xffff8fff
 8002188:	08002a5c 	.word	0x08002a5c
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2238      	movs	r2, #56	; 0x38
 80021a0:	4013      	ands	r3, r2
 80021a2:	d10f      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0adb      	lsrs	r3, r3, #11
 80021aa:	2207      	movs	r2, #7
 80021ac:	4013      	ands	r3, r2
 80021ae:	2201      	movs	r2, #1
 80021b0:	409a      	lsls	r2, r3
 80021b2:	0013      	movs	r3, r2
 80021b4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	4835      	ldr	r0, [pc, #212]	; (8002290 <HAL_RCC_GetSysClockFreq+0xfc>)
 80021ba:	f7fd ffa1 	bl	8000100 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e05d      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2238      	movs	r2, #56	; 0x38
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d102      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCC_GetSysClockFreq+0x100>)
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e054      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2238      	movs	r2, #56	; 0x38
 80021dc:	4013      	ands	r3, r2
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d138      	bne.n	8002254 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2203      	movs	r2, #3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	3301      	adds	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d10d      	bne.n	800221c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	4824      	ldr	r0, [pc, #144]	; (8002294 <HAL_RCC_GetSysClockFreq+0x100>)
 8002204:	f7fd ff7c 	bl	8000100 <__udivsi3>
 8002208:	0003      	movs	r3, r0
 800220a:	0019      	movs	r1, r3
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	227f      	movs	r2, #127	; 0x7f
 8002214:	4013      	ands	r3, r2
 8002216:	434b      	muls	r3, r1
 8002218:	617b      	str	r3, [r7, #20]
        break;
 800221a:	e00d      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002220:	f7fd ff6e 	bl	8000100 <__udivsi3>
 8002224:	0003      	movs	r3, r0
 8002226:	0019      	movs	r1, r3
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	227f      	movs	r2, #127	; 0x7f
 8002230:	4013      	ands	r3, r2
 8002232:	434b      	muls	r3, r1
 8002234:	617b      	str	r3, [r7, #20]
        break;
 8002236:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0f5b      	lsrs	r3, r3, #29
 800223e:	2207      	movs	r2, #7
 8002240:	4013      	ands	r3, r2
 8002242:	3301      	adds	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7fd ff59 	bl	8000100 <__udivsi3>
 800224e:	0003      	movs	r3, r0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e015      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2238      	movs	r2, #56	; 0x38
 800225a:	4013      	ands	r3, r2
 800225c:	2b20      	cmp	r3, #32
 800225e:	d103      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	e00b      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_GetSysClockFreq+0xf8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2238      	movs	r2, #56	; 0x38
 800226e:	4013      	ands	r3, r2
 8002270:	2b18      	cmp	r3, #24
 8002272:	d103      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002274:	23fa      	movs	r3, #250	; 0xfa
 8002276:	01db      	lsls	r3, r3, #7
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e001      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002280:	693b      	ldr	r3, [r7, #16]
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b006      	add	sp, #24
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	00f42400 	.word	0x00f42400
 8002294:	007a1200 	.word	0x007a1200

08002298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	20000000 	.word	0x20000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022b0:	f7ff fff2 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b4:	0004      	movs	r4, r0
 80022b6:	f7ff fb49 	bl	800194c <LL_RCC_GetAPB1Prescaler>
 80022ba:	0003      	movs	r3, r0
 80022bc:	0b1a      	lsrs	r2, r3, #12
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	58d3      	ldr	r3, [r2, r3]
 80022c4:	221f      	movs	r2, #31
 80022c6:	4013      	ands	r3, r2
 80022c8:	40dc      	lsrs	r4, r3
 80022ca:	0023      	movs	r3, r4
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bdb0      	pop	{r4, r5, r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	08002a9c 	.word	0x08002a9c

080022d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e046      	b.n	8002378 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2288      	movs	r2, #136	; 0x88
 80022ee:	589b      	ldr	r3, [r3, r2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2284      	movs	r2, #132	; 0x84
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	0018      	movs	r0, r3
 8002300:	f7fe f972 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2288      	movs	r2, #136	; 0x88
 8002308:	2124      	movs	r1, #36	; 0x24
 800230a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	438a      	bics	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 f830 	bl	8002384 <UART_SetConfig>
 8002324:	0003      	movs	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e024      	b.n	8002378 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 f98d 	bl	8002658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	490d      	ldr	r1, [pc, #52]	; (8002380 <HAL_UART_Init+0xa8>)
 800234a:	400a      	ands	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	212a      	movs	r1, #42	; 0x2a
 800235a:	438a      	bics	r2, r1
 800235c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	430a      	orrs	r2, r1
 800236c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fa25 	bl	80027c0 <UART_CheckIdleState>
 8002376:	0003      	movs	r3, r0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	ffffb7ff 	.word	0xffffb7ff

08002384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800238c:	231a      	movs	r3, #26
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4aa1      	ldr	r2, [pc, #644]	; (8002638 <UART_SetConfig+0x2b4>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a9c      	ldr	r2, [pc, #624]	; (800263c <UART_SetConfig+0x2b8>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a93      	ldr	r2, [pc, #588]	; (8002640 <UART_SetConfig+0x2bc>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	220f      	movs	r2, #15
 8002408:	4393      	bics	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a89      	ldr	r2, [pc, #548]	; (8002644 <UART_SetConfig+0x2c0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d127      	bne.n	8002472 <UART_SetConfig+0xee>
 8002422:	4b89      	ldr	r3, [pc, #548]	; (8002648 <UART_SetConfig+0x2c4>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	2203      	movs	r2, #3
 8002428:	4013      	ands	r3, r2
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <UART_SetConfig+0xda>
 800242e:	d81b      	bhi.n	8002468 <UART_SetConfig+0xe4>
 8002430:	2b02      	cmp	r3, #2
 8002432:	d00a      	beq.n	800244a <UART_SetConfig+0xc6>
 8002434:	d818      	bhi.n	8002468 <UART_SetConfig+0xe4>
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <UART_SetConfig+0xbc>
 800243a:	2b01      	cmp	r3, #1
 800243c:	d00a      	beq.n	8002454 <UART_SetConfig+0xd0>
 800243e:	e013      	b.n	8002468 <UART_SetConfig+0xe4>
 8002440:	231b      	movs	r3, #27
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
 8002448:	e021      	b.n	800248e <UART_SetConfig+0x10a>
 800244a:	231b      	movs	r3, #27
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	2202      	movs	r2, #2
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	e01c      	b.n	800248e <UART_SetConfig+0x10a>
 8002454:	231b      	movs	r3, #27
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	2204      	movs	r2, #4
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e017      	b.n	800248e <UART_SetConfig+0x10a>
 800245e:	231b      	movs	r3, #27
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2208      	movs	r2, #8
 8002464:	701a      	strb	r2, [r3, #0]
 8002466:	e012      	b.n	800248e <UART_SetConfig+0x10a>
 8002468:	231b      	movs	r3, #27
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2210      	movs	r2, #16
 800246e:	701a      	strb	r2, [r3, #0]
 8002470:	e00d      	b.n	800248e <UART_SetConfig+0x10a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a75      	ldr	r2, [pc, #468]	; (800264c <UART_SetConfig+0x2c8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d104      	bne.n	8002486 <UART_SetConfig+0x102>
 800247c:	231b      	movs	r3, #27
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	e003      	b.n	800248e <UART_SetConfig+0x10a>
 8002486:	231b      	movs	r3, #27
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	2210      	movs	r2, #16
 800248c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	429a      	cmp	r2, r3
 8002498:	d000      	beq.n	800249c <UART_SetConfig+0x118>
 800249a:	e065      	b.n	8002568 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 800249c:	231b      	movs	r3, #27
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d015      	beq.n	80024d2 <UART_SetConfig+0x14e>
 80024a6:	dc18      	bgt.n	80024da <UART_SetConfig+0x156>
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00d      	beq.n	80024c8 <UART_SetConfig+0x144>
 80024ac:	dc15      	bgt.n	80024da <UART_SetConfig+0x156>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <UART_SetConfig+0x134>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d005      	beq.n	80024c2 <UART_SetConfig+0x13e>
 80024b6:	e010      	b.n	80024da <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024b8:	f7ff fef8 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 80024bc:	0003      	movs	r3, r0
 80024be:	617b      	str	r3, [r7, #20]
        break;
 80024c0:	e012      	b.n	80024e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <UART_SetConfig+0x2cc>)
 80024c4:	617b      	str	r3, [r7, #20]
        break;
 80024c6:	e00f      	b.n	80024e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024c8:	f7ff fe64 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 80024cc:	0003      	movs	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]
        break;
 80024d0:	e00a      	b.n	80024e8 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	617b      	str	r3, [r7, #20]
        break;
 80024d8:	e006      	b.n	80024e8 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80024de:	231a      	movs	r3, #26
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
        break;
 80024e6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d100      	bne.n	80024f0 <UART_SetConfig+0x16c>
 80024ee:	e08d      	b.n	800260c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	4b57      	ldr	r3, [pc, #348]	; (8002654 <UART_SetConfig+0x2d0>)
 80024f6:	0052      	lsls	r2, r2, #1
 80024f8:	5ad3      	ldrh	r3, [r2, r3]
 80024fa:	0019      	movs	r1, r3
 80024fc:	6978      	ldr	r0, [r7, #20]
 80024fe:	f7fd fdff 	bl	8000100 <__udivsi3>
 8002502:	0003      	movs	r3, r0
 8002504:	005a      	lsls	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	18d2      	adds	r2, r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f7fd fdf3 	bl	8000100 <__udivsi3>
 800251a:	0003      	movs	r3, r0
 800251c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b0f      	cmp	r3, #15
 8002522:	d91c      	bls.n	800255e <UART_SetConfig+0x1da>
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	025b      	lsls	r3, r3, #9
 800252a:	429a      	cmp	r2, r3
 800252c:	d217      	bcs.n	800255e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	b29a      	uxth	r2, r3
 8002532:	200e      	movs	r0, #14
 8002534:	183b      	adds	r3, r7, r0
 8002536:	210f      	movs	r1, #15
 8002538:	438a      	bics	r2, r1
 800253a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	b29b      	uxth	r3, r3
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	b299      	uxth	r1, r3
 8002548:	183b      	adds	r3, r7, r0
 800254a:	183a      	adds	r2, r7, r0
 800254c:	8812      	ldrh	r2, [r2, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	183a      	adds	r2, r7, r0
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	60da      	str	r2, [r3, #12]
 800255c:	e056      	b.n	800260c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800255e:	231a      	movs	r3, #26
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e051      	b.n	800260c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002568:	231b      	movs	r3, #27
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b08      	cmp	r3, #8
 8002570:	d015      	beq.n	800259e <UART_SetConfig+0x21a>
 8002572:	dc18      	bgt.n	80025a6 <UART_SetConfig+0x222>
 8002574:	2b04      	cmp	r3, #4
 8002576:	d00d      	beq.n	8002594 <UART_SetConfig+0x210>
 8002578:	dc15      	bgt.n	80025a6 <UART_SetConfig+0x222>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <UART_SetConfig+0x200>
 800257e:	2b02      	cmp	r3, #2
 8002580:	d005      	beq.n	800258e <UART_SetConfig+0x20a>
 8002582:	e010      	b.n	80025a6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff fe92 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8002588:	0003      	movs	r3, r0
 800258a:	617b      	str	r3, [r7, #20]
        break;
 800258c:	e012      	b.n	80025b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <UART_SetConfig+0x2cc>)
 8002590:	617b      	str	r3, [r7, #20]
        break;
 8002592:	e00f      	b.n	80025b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002594:	f7ff fdfe 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002598:	0003      	movs	r3, r0
 800259a:	617b      	str	r3, [r7, #20]
        break;
 800259c:	e00a      	b.n	80025b4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	617b      	str	r3, [r7, #20]
        break;
 80025a4:	e006      	b.n	80025b4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025aa:	231a      	movs	r3, #26
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
        break;
 80025b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d028      	beq.n	800260c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <UART_SetConfig+0x2d0>)
 80025c0:	0052      	lsls	r2, r2, #1
 80025c2:	5ad3      	ldrh	r3, [r2, r3]
 80025c4:	0019      	movs	r1, r3
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7fd fd9a 	bl	8000100 <__udivsi3>
 80025cc:	0003      	movs	r3, r0
 80025ce:	001a      	movs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	18d2      	adds	r2, r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0019      	movs	r1, r3
 80025de:	0010      	movs	r0, r2
 80025e0:	f7fd fd8e 	bl	8000100 <__udivsi3>
 80025e4:	0003      	movs	r3, r0
 80025e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	d90a      	bls.n	8002604 <UART_SetConfig+0x280>
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d205      	bcs.n	8002604 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e003      	b.n	800260c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002604:	231a      	movs	r3, #26
 8002606:	18fb      	adds	r3, r7, r3
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	226a      	movs	r2, #106	; 0x6a
 8002610:	2101      	movs	r1, #1
 8002612:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2268      	movs	r2, #104	; 0x68
 8002618:	2101      	movs	r1, #1
 800261a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002628:	231a      	movs	r3, #26
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	781b      	ldrb	r3, [r3, #0]
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b008      	add	sp, #32
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	cfff69f3 	.word	0xcfff69f3
 800263c:	ffffcfff 	.word	0xffffcfff
 8002640:	11fff4ff 	.word	0x11fff4ff
 8002644:	40013800 	.word	0x40013800
 8002648:	40021000 	.word	0x40021000
 800264c:	40004400 	.word	0x40004400
 8002650:	00f42400 	.word	0x00f42400
 8002654:	08002abc 	.word	0x08002abc

08002658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d00b      	beq.n	8002682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a4a      	ldr	r2, [pc, #296]	; (800279c <UART_AdvFeatureConfig+0x144>)
 8002672:	4013      	ands	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	2202      	movs	r2, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d00b      	beq.n	80026a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a43      	ldr	r2, [pc, #268]	; (80027a0 <UART_AdvFeatureConfig+0x148>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	2204      	movs	r2, #4
 80026aa:	4013      	ands	r3, r2
 80026ac:	d00b      	beq.n	80026c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <UART_AdvFeatureConfig+0x14c>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	0019      	movs	r1, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	2208      	movs	r2, #8
 80026cc:	4013      	ands	r3, r2
 80026ce:	d00b      	beq.n	80026e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <UART_AdvFeatureConfig+0x150>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	2210      	movs	r2, #16
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00b      	beq.n	800270a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <UART_AdvFeatureConfig+0x154>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	2220      	movs	r2, #32
 8002710:	4013      	ands	r3, r2
 8002712:	d00b      	beq.n	800272c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <UART_AdvFeatureConfig+0x158>)
 800271c:	4013      	ands	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	4013      	ands	r3, r2
 8002734:	d01d      	beq.n	8002772 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <UART_AdvFeatureConfig+0x15c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	035b      	lsls	r3, r3, #13
 8002756:	429a      	cmp	r2, r3
 8002758:	d10b      	bne.n	8002772 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <UART_AdvFeatureConfig+0x160>)
 8002762:	4013      	ands	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	4013      	ands	r3, r2
 800277a:	d00b      	beq.n	8002794 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <UART_AdvFeatureConfig+0x164>)
 8002784:	4013      	ands	r3, r2
 8002786:	0019      	movs	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	fffdffff 	.word	0xfffdffff
 80027a0:	fffeffff 	.word	0xfffeffff
 80027a4:	fffbffff 	.word	0xfffbffff
 80027a8:	ffff7fff 	.word	0xffff7fff
 80027ac:	ffffefff 	.word	0xffffefff
 80027b0:	ffffdfff 	.word	0xffffdfff
 80027b4:	ffefffff 	.word	0xffefffff
 80027b8:	ff9fffff 	.word	0xff9fffff
 80027bc:	fff7ffff 	.word	0xfff7ffff

080027c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2290      	movs	r2, #144	; 0x90
 80027cc:	2100      	movs	r1, #0
 80027ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027d0:	f7fe f826 	bl	8000820 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d10c      	bne.n	8002800 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	0391      	lsls	r1, r2, #14
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4a1a      	ldr	r2, [pc, #104]	; (8002858 <UART_CheckIdleState+0x98>)
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f000 f832 	bl	800285c <UART_WaitOnFlagUntilTimeout>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e026      	b.n	800284e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	2b04      	cmp	r3, #4
 800280c:	d10c      	bne.n	8002828 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	03d1      	lsls	r1, r2, #15
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <UART_CheckIdleState+0x98>)
 8002818:	9200      	str	r2, [sp, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	f000 f81e 	bl	800285c <UART_WaitOnFlagUntilTimeout>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e012      	b.n	800284e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2288      	movs	r2, #136	; 0x88
 800282c:	2120      	movs	r1, #32
 800282e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	228c      	movs	r2, #140	; 0x8c
 8002834:	2120      	movs	r1, #32
 8002836:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2284      	movs	r2, #132	; 0x84
 8002848:	2100      	movs	r1, #0
 800284a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b004      	add	sp, #16
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	01ffffff 	.word	0x01ffffff

0800285c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	; 0x50
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286c:	e0a7      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800286e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002870:	3301      	adds	r3, #1
 8002872:	d100      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002874:	e0a3      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7fd ffd3 	bl	8000820 <HAL_GetTick>
 800287a:	0002      	movs	r2, r0
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <UART_WaitOnFlagUntilTimeout+0x30>
 8002886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13f      	bne.n	800290c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8310 	mrs	r3, PRIMASK
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
 8002896:	2301      	movs	r3, #1
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	494e      	ldr	r1, [pc, #312]	; (80029e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	f383 8810 	msr	PRIMASK, r3
}
 80028bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
 80028c8:	2301      	movs	r3, #1
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	f383 8810 	msr	PRIMASK, r3
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2288      	movs	r2, #136	; 0x88
 80028f4:	2120      	movs	r1, #32
 80028f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	228c      	movs	r2, #140	; 0x8c
 80028fc:	2120      	movs	r1, #32
 80028fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2284      	movs	r2, #132	; 0x84
 8002904:	2100      	movs	r1, #0
 8002906:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e069      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2204      	movs	r2, #4
 8002914:	4013      	ands	r3, r2
 8002916:	d052      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	401a      	ands	r2, r3
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	429a      	cmp	r2, r3
 800292a:	d148      	bne.n	80029be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2280      	movs	r2, #128	; 0x80
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002936:	f3ef 8310 	mrs	r3, PRIMASK
 800293a:	613b      	str	r3, [r7, #16]
  return(result);
 800293c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800293e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f383 8810 	msr	PRIMASK, r3
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002958:	400a      	ands	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8310 	mrs	r3, PRIMASK
 800296c:	61fb      	str	r3, [r7, #28]
  return(result);
 800296e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	64bb      	str	r3, [r7, #72]	; 0x48
 8002972:	2301      	movs	r3, #1
 8002974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2101      	movs	r1, #1
 800298a:	438a      	bics	r2, r1
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2288      	movs	r2, #136	; 0x88
 800299e:	2120      	movs	r1, #32
 80029a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	228c      	movs	r2, #140	; 0x8c
 80029a6:	2120      	movs	r1, #32
 80029a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2290      	movs	r2, #144	; 0x90
 80029ae:	2120      	movs	r1, #32
 80029b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2284      	movs	r2, #132	; 0x84
 80029b6:	2100      	movs	r1, #0
 80029b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e010      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	425a      	negs	r2, r3
 80029ce:	4153      	adcs	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	001a      	movs	r2, r3
 80029d4:	1dfb      	adds	r3, r7, #7
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d100      	bne.n	80029de <UART_WaitOnFlagUntilTimeout+0x182>
 80029dc:	e747      	b.n	800286e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b014      	add	sp, #80	; 0x50
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	fffffe5f 	.word	0xfffffe5f

080029ec <memset>:
 80029ec:	0003      	movs	r3, r0
 80029ee:	1882      	adds	r2, r0, r2
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	7019      	strb	r1, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4c0c      	ldr	r4, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4d0d      	ldr	r5, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	f000 f819 	bl	8002a44 <_init>
 8002a12:	4c0a      	ldr	r4, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4d0a      	ldr	r5, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	00b3      	lsls	r3, r6, #2
 8002a22:	58eb      	ldr	r3, [r5, r3]
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	00b3      	lsls	r3, r6, #2
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002ad4 	.word	0x08002ad4
 8002a38:	08002ad4 	.word	0x08002ad4
 8002a3c:	08002ad8 	.word	0x08002ad8
 8002a40:	08002ad4 	.word	0x08002ad4

08002a44 <_init>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4a:	bc08      	pop	{r3}
 8002a4c:	469e      	mov	lr, r3
 8002a4e:	4770      	bx	lr

08002a50 <_fini>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr
