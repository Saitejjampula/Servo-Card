
Lcdtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e64  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001f1c  08001f1c  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001fa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001fa8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a11  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000185f  00000000  00000000  00028a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002a2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e2  00000000  00000000  0002ad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013f51  00000000  00000000  0002b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba32  00000000  00000000  0003f44b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000802aa  00000000  00000000  0004ae7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000242c  00000000  00000000  000cb128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000cd554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001f04 	.word	0x08001f04

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001f04 	.word	0x08001f04

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <LCD_SendCommand>:
 *  Created on: Sep 11, 2023
 *      Author: fervi
 */
// Function to send a command to the LCD
#include "lcd1.h"
void LCD_SendCommand(uint8_t cmd) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	0002      	movs	r2, r0
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) low for command mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000224:	4b44      	ldr	r3, [pc, #272]	; (8000338 <LCD_SendCommand+0x120>)
 8000226:	2200      	movs	r2, #0
 8000228:	2108      	movs	r1, #8
 800022a:	0018      	movs	r0, r3
 800022c:	f000 fe94 	bl	8000f58 <HAL_GPIO_WritePin>

    // Send the higher nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 4) & 0x01);
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	091b      	lsrs	r3, r3, #4
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2201      	movs	r2, #1
 800023a:	4013      	ands	r3, r2
 800023c:	b2db      	uxtb	r3, r3
 800023e:	483f      	ldr	r0, [pc, #252]	; (800033c <LCD_SendCommand+0x124>)
 8000240:	001a      	movs	r2, r3
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	f000 fe88 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 5) & 0x01);
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	095b      	lsrs	r3, r3, #5
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2201      	movs	r2, #1
 8000252:	4013      	ands	r3, r2
 8000254:	b2db      	uxtb	r3, r3
 8000256:	4839      	ldr	r0, [pc, #228]	; (800033c <LCD_SendCommand+0x124>)
 8000258:	001a      	movs	r2, r3
 800025a:	2180      	movs	r1, #128	; 0x80
 800025c:	f000 fe7c 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 6) & 0x01);
 8000260:	1dfb      	adds	r3, r7, #7
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	099b      	lsrs	r3, r3, #6
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2201      	movs	r2, #1
 800026a:	4013      	ands	r3, r2
 800026c:	b2da      	uxtb	r2, r3
 800026e:	2380      	movs	r3, #128	; 0x80
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4832      	ldr	r0, [pc, #200]	; (800033c <LCD_SendCommand+0x124>)
 8000274:	0019      	movs	r1, r3
 8000276:	f000 fe6f 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 7) & 0x01);
 800027a:	1dfb      	adds	r3, r7, #7
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	09db      	lsrs	r3, r3, #7
 8000280:	b2da      	uxtb	r2, r3
 8000282:	2380      	movs	r3, #128	; 0x80
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	482d      	ldr	r0, [pc, #180]	; (800033c <LCD_SendCommand+0x124>)
 8000288:	0019      	movs	r1, r3
 800028a:	f000 fe65 	bl	8000f58 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <LCD_SendCommand+0x124>)
 8000290:	2201      	movs	r2, #1
 8000292:	2120      	movs	r1, #32
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fe5f 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800029a:	2001      	movs	r0, #1
 800029c:	f000 fc20 	bl	8000ae0 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80002a0:	4b26      	ldr	r3, [pc, #152]	; (800033c <LCD_SendCommand+0x124>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	2120      	movs	r1, #32
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fe56 	bl	8000f58 <HAL_GPIO_WritePin>

    // Send the lower nibble of the command
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (cmd >> 0) & 0x01);
 80002ac:	1dfb      	adds	r3, r7, #7
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2201      	movs	r2, #1
 80002b2:	4013      	ands	r3, r2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4821      	ldr	r0, [pc, #132]	; (800033c <LCD_SendCommand+0x124>)
 80002b8:	001a      	movs	r2, r3
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	f000 fe4c 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (cmd >> 1) & 0x01);
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	085b      	lsrs	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2201      	movs	r2, #1
 80002ca:	4013      	ands	r3, r2
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	481b      	ldr	r0, [pc, #108]	; (800033c <LCD_SendCommand+0x124>)
 80002d0:	001a      	movs	r2, r3
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	f000 fe40 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (cmd >> 2) & 0x01);
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	089b      	lsrs	r3, r3, #2
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2201      	movs	r2, #1
 80002e2:	4013      	ands	r3, r2
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	2380      	movs	r3, #128	; 0x80
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <LCD_SendCommand+0x124>)
 80002ec:	0019      	movs	r1, r3
 80002ee:	f000 fe33 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (cmd >> 3) & 0x01);
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	08db      	lsrs	r3, r3, #3
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2201      	movs	r2, #1
 80002fc:	4013      	ands	r3, r2
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LCD_SendCommand+0x124>)
 8000306:	0019      	movs	r1, r3
 8000308:	f000 fe26 	bl	8000f58 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <LCD_SendCommand+0x124>)
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fe20 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000318:	2001      	movs	r0, #1
 800031a:	f000 fbe1 	bl	8000ae0 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <LCD_SendCommand+0x124>)
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fe17 	bl	8000f58 <HAL_GPIO_WritePin>

    // Delay for the command to complete
    HAL_Delay(2);
 800032a:	2002      	movs	r0, #2
 800032c:	f000 fbd8 	bl	8000ae0 <HAL_Delay>
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}
 8000338:	50000c00 	.word	0x50000c00
 800033c:	50000400 	.word	0x50000400

08000340 <LCD_SendData>:

// Function to send data to the LCD
void LCD_SendData(uint8_t data) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	0002      	movs	r2, r0
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	701a      	strb	r2, [r3, #0]
    // Set RS (Register Select) high for data mode
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800034c:	4b44      	ldr	r3, [pc, #272]	; (8000460 <LCD_SendData+0x120>)
 800034e:	2201      	movs	r2, #1
 8000350:	2108      	movs	r1, #8
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fe00 	bl	8000f58 <HAL_GPIO_WritePin>

    // Send the higher nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 4) & 0x01);
 8000358:	1dfb      	adds	r3, r7, #7
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	091b      	lsrs	r3, r3, #4
 800035e:	b2db      	uxtb	r3, r3
 8000360:	2201      	movs	r2, #1
 8000362:	4013      	ands	r3, r2
 8000364:	b2db      	uxtb	r3, r3
 8000366:	483f      	ldr	r0, [pc, #252]	; (8000464 <LCD_SendData+0x124>)
 8000368:	001a      	movs	r2, r3
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	f000 fdf4 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 5) & 0x01);
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	095b      	lsrs	r3, r3, #5
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2201      	movs	r2, #1
 800037a:	4013      	ands	r3, r2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	4839      	ldr	r0, [pc, #228]	; (8000464 <LCD_SendData+0x124>)
 8000380:	001a      	movs	r2, r3
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	f000 fde8 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 6) & 0x01);
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	099b      	lsrs	r3, r3, #6
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2201      	movs	r2, #1
 8000392:	4013      	ands	r3, r2
 8000394:	b2da      	uxtb	r2, r3
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	4832      	ldr	r0, [pc, #200]	; (8000464 <LCD_SendData+0x124>)
 800039c:	0019      	movs	r1, r3
 800039e:	f000 fddb 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 7) & 0x01);
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	09db      	lsrs	r3, r3, #7
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	482d      	ldr	r0, [pc, #180]	; (8000464 <LCD_SendData+0x124>)
 80003b0:	0019      	movs	r1, r3
 80003b2:	f000 fdd1 	bl	8000f58 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80003b6:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <LCD_SendData+0x124>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	2120      	movs	r1, #32
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fdcb 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 fb8c 	bl	8000ae0 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80003c8:	4b26      	ldr	r3, [pc, #152]	; (8000464 <LCD_SendData+0x124>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	2120      	movs	r1, #32
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fdc2 	bl	8000f58 <HAL_GPIO_WritePin>

    // Send the lower nibble of the data
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data >> 0) & 0x01);
 80003d4:	1dfb      	adds	r3, r7, #7
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2201      	movs	r2, #1
 80003da:	4013      	ands	r3, r2
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <LCD_SendData+0x124>)
 80003e0:	001a      	movs	r2, r3
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	f000 fdb8 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data >> 1) & 0x01);
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	085b      	lsrs	r3, r3, #1
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	2201      	movs	r2, #1
 80003f2:	4013      	ands	r3, r2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	481b      	ldr	r0, [pc, #108]	; (8000464 <LCD_SendData+0x124>)
 80003f8:	001a      	movs	r2, r3
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	f000 fdac 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data >> 2) & 0x01);
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	089b      	lsrs	r3, r3, #2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	2201      	movs	r2, #1
 800040a:	4013      	ands	r3, r2
 800040c:	b2da      	uxtb	r2, r3
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4814      	ldr	r0, [pc, #80]	; (8000464 <LCD_SendData+0x124>)
 8000414:	0019      	movs	r1, r3
 8000416:	f000 fd9f 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data >> 3) & 0x01);
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	b2da      	uxtb	r2, r3
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LCD_SendData+0x124>)
 800042e:	0019      	movs	r1, r3
 8000430:	f000 fd92 	bl	8000f58 <HAL_GPIO_WritePin>

    // Toggle the EN (Enable) Pin
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <LCD_SendData+0x124>)
 8000436:	2201      	movs	r2, #1
 8000438:	2120      	movs	r1, #32
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fd8c 	bl	8000f58 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fb4d 	bl	8000ae0 <HAL_Delay>
    HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <LCD_SendData+0x124>)
 8000448:	2200      	movs	r2, #0
 800044a:	2120      	movs	r1, #32
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fd83 	bl	8000f58 <HAL_GPIO_WritePin>

    // Delay for data to be written
    HAL_Delay(2);
 8000452:	2002      	movs	r0, #2
 8000454:	f000 fb44 	bl	8000ae0 <HAL_Delay>
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}
 8000460:	50000c00 	.word	0x50000c00
 8000464:	50000400 	.word	0x50000400

08000468 <LCD_Init>:

// Initialize the LCD
void LCD_Init(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    HAL_GPIO_Init(LCD_GPIO_Port, &GPIO_InitStruct);

    // Initialize the LCD in 4-bit mode
    HAL_Delay(15); // Wait for power-up
 800046c:	200f      	movs	r0, #15
 800046e:	f000 fb37 	bl	8000ae0 <HAL_Delay>
    LCD_SendCommand(0x33); // Initialize
 8000472:	2033      	movs	r0, #51	; 0x33
 8000474:	f7ff fed0 	bl	8000218 <LCD_SendCommand>
    LCD_SendCommand(0x32); // Set to 4-bit mode
 8000478:	2032      	movs	r0, #50	; 0x32
 800047a:	f7ff fecd 	bl	8000218 <LCD_SendCommand>
    LCD_SendCommand(0x28); // 2 lines, 5x8 font
 800047e:	2028      	movs	r0, #40	; 0x28
 8000480:	f7ff feca 	bl	8000218 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off, blink off
 8000484:	200c      	movs	r0, #12
 8000486:	f7ff fec7 	bl	8000218 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 800048a:	2001      	movs	r0, #1
 800048c:	f7ff fec4 	bl	8000218 <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 8000490:	2002      	movs	r0, #2
 8000492:	f000 fb25 	bl	8000ae0 <HAL_Delay>
    LCD_SendCommand(0x06); // Entry mode: Increment cursor position, no display shift
 8000496:	2006      	movs	r0, #6
 8000498:	f7ff febe 	bl	8000218 <LCD_SendCommand>
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <LCD_Clear>:

// Clear the LCD display
void LCD_Clear(void) {
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff feb6 	bl	8000218 <LCD_SendCommand>
    HAL_Delay(2); // Clear display delay
 80004ac:	2002      	movs	r0, #2
 80004ae:	f000 fb17 	bl	8000ae0 <HAL_Delay>
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LCD_SetCursor>:

// Set the cursor position (row and column)
void LCD_SetCursor(uint8_t row, uint8_t col) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]
    uint8_t row_offsets[] = {0x00, 0x40};
 80004ca:	230c      	movs	r3, #12
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	01d2      	lsls	r2, r2, #7
 80004d2:	801a      	strh	r2, [r3, #0]
    if (row >= 2) {
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d902      	bls.n	80004e2 <LCD_SetCursor+0x2a>
        row = 1; // Avoid out-of-bounds access
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]
    }
    LCD_SendCommand(0x80 | (col + row_offsets[row]));
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	220c      	movs	r2, #12
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	5cd2      	ldrb	r2, [r2, r3]
 80004ec:	1dbb      	adds	r3, r7, #6
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	18d3      	adds	r3, r2, r3
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	4252      	negs	r2, r2
 80004fa:	4313      	orrs	r3, r2
 80004fc:	b25b      	sxtb	r3, r3
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	0018      	movs	r0, r3
 8000502:	f7ff fe89 	bl	8000218 <LCD_SendCommand>
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b004      	add	sp, #16
 800050c:	bd80      	pop	{r7, pc}

0800050e <LCD_Print>:

// Print a string to the LCD
void LCD_Print(char *str) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000516:	e007      	b.n	8000528 <LCD_Print+0x1a>
        LCD_SendData(*str);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff ff0f 	bl	8000340 <LCD_SendData>
        str++;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f3      	bne.n	8000518 <LCD_Print+0xa>
    }
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fa47 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f87d 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f933 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800054e:	f000 f8d5 	bl	80006fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000552:	f7ff ff89 	bl	8000468 <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	4833      	ldr	r0, [pc, #204]	; (8000628 <main+0xec>)
 800055c:	2200      	movs	r2, #0
 800055e:	0019      	movs	r1, r3
 8000560:	f000 fcfa 	bl	8000f58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_RV_GPIO_Port, M_RV_Pin, GPIO_PIN_RESET);
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	482f      	ldr	r0, [pc, #188]	; (8000628 <main+0xec>)
 800056a:	2200      	movs	r2, #0
 800056c:	0019      	movs	r1, r3
 800056e:	f000 fcf3 	bl	8000f58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_FW_GPIO_Port, M_FW_Pin, GPIO_PIN_SET);
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	01db      	lsls	r3, r3, #7
 8000576:	482c      	ldr	r0, [pc, #176]	; (8000628 <main+0xec>)
 8000578:	2201      	movs	r2, #1
 800057a:	0019      	movs	r1, r3
 800057c:	f000 fcec 	bl	8000f58 <HAL_GPIO_WritePin>
	  //HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
	  LCD_Clear();
 8000580:	f7ff ff8f 	bl	80004a2 <LCD_Clear>
	  LCD_SetCursor(0, 0);
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ff96 	bl	80004b8 <LCD_SetCursor>
	  LCD_Print("Hello, STM32!");
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <main+0xf0>)
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ffbd 	bl	800050e <LCD_Print>
	  LCD_SetCursor(1, 0);
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f7ff ff8e 	bl	80004b8 <LCD_SetCursor>
	  LCD_Print("So tHeN ");
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <main+0xf4>)
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ffb5 	bl	800050e <LCD_Print>
	  HAL_Delay(5000);
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <main+0xf8>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fa9a 	bl	8000ae0 <HAL_Delay>
//	  for(uint32_t id =0;id<=20000;id++)
//	  {
//
//	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <main+0xec>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	0019      	movs	r1, r3
 80005b6:	f000 fccf 	bl	8000f58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_RV_GPIO_Port, M_RV_Pin, GPIO_PIN_SET);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <main+0xec>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	0019      	movs	r1, r3
 80005c4:	f000 fcc8 	bl	8000f58 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M_FW_GPIO_Port, M_FW_Pin, GPIO_PIN_RESET);
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	01db      	lsls	r3, r3, #7
 80005cc:	4816      	ldr	r0, [pc, #88]	; (8000628 <main+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	0019      	movs	r1, r3
 80005d2:	f000 fcc1 	bl	8000f58 <HAL_GPIO_WritePin>
	  for(uint32_t id =0;id<=20000;id++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e002      	b.n	80005e2 <main+0xa6>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <main+0xfc>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d9f8      	bls.n	80005dc <main+0xa0>
	  {

	  }
	  HAL_GPIO_TogglePin(Relay_GPIO_Port, Relay_Pin);
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <main+0xec>)
 80005f0:	0019      	movs	r1, r3
 80005f2:	0010      	movs	r0, r2
 80005f4:	f000 fccd 	bl	8000f92 <HAL_GPIO_TogglePin>
	  LCD_Clear();
 80005f8:	f7ff ff53 	bl	80004a2 <LCD_Clear>
	  LCD_SetCursor(0, 0);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff5a 	bl	80004b8 <LCD_SetCursor>
	  LCD_Print("_!@#$%^^&*)_");
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x100>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff81 	bl	800050e <LCD_Print>
	  LCD_SetCursor(1, 0);
 800060c:	2100      	movs	r1, #0
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff ff52 	bl	80004b8 <LCD_SetCursor>
	  LCD_Print("_+&%#@&_");
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x104>)
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff79 	bl	800050e <LCD_Print>
	  HAL_Delay(5000);
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <main+0xf8>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fa5e 	bl	8000ae0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000624:	e797      	b.n	8000556 <main+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	50000400 	.word	0x50000400
 800062c:	08001f1c 	.word	0x08001f1c
 8000630:	08001f2c 	.word	0x08001f2c
 8000634:	00001388 	.word	0x00001388
 8000638:	00004e20 	.word	0x00004e20
 800063c:	08001f38 	.word	0x08001f38
 8000640:	08001f48 	.word	0x08001f48

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b093      	sub	sp, #76	; 0x4c
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	2414      	movs	r4, #20
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2334      	movs	r3, #52	; 0x34
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f001 fc29 	bl	8001eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	2310      	movs	r3, #16
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f001 fc22 	bl	8001eac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fcab 	bl	8000fc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000680:	0021      	movs	r1, r4
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2240      	movs	r2, #64	; 0x40
 800068c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2202      	movs	r2, #2
 8000692:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2208      	movs	r2, #8
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	0292      	lsls	r2, r2, #10
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0592      	lsls	r2, r2, #22
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fcc5 	bl	8001048 <HAL_RCC_OscConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006c2:	f000 f8f7 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2202      	movs	r2, #2
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	22b0      	movs	r2, #176	; 0xb0
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2100      	movs	r1, #0
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 ffbf 	bl	8001668 <HAL_RCC_ClockConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f8e1 	bl	80008b4 <Error_Handler>
  }
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b013      	add	sp, #76	; 0x4c
 80006f8:	bd90      	pop	{r4, r7, pc}
	...

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	2310      	movs	r3, #16
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	2310      	movs	r3, #16
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f001 fbcd 	bl	8001eac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	0018      	movs	r0, r3
 8000716:	230c      	movs	r3, #12
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f001 fbc6 	bl	8001eac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000722:	4a22      	ldr	r2, [pc, #136]	; (80007ac <MX_TIM1_Init+0xb0>)
 8000724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000728:	223f      	movs	r2, #63	; 0x3f
 800072a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_TIM1_Init+0xac>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_TIM1_Init+0xb4>)
 8000736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_TIM1_Init+0xac>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_TIM1_Init+0xac>)
 800074c:	0018      	movs	r0, r3
 800074e:	f001 f915 	bl	800197c <HAL_TIM_Base_Init>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 f8ad 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075a:	2110      	movs	r1, #16
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0152      	lsls	r2, r2, #5
 8000762:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000764:	187a      	adds	r2, r7, r1
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_TIM1_Init+0xac>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f95e 	bl	8001a2c <HAL_TIM_ConfigClockSource>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 f89e 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_TIM1_Init+0xac>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fb29 	bl	8001de8 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800079a:	f000 f88b 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b008      	add	sp, #32
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	20000028 	.word	0x20000028
 80007ac:	40012c00 	.word	0x40012c00
 80007b0:	0000ffff 	.word	0x0000ffff

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	240c      	movs	r4, #12
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f001 fb71 	bl	8001eac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ce:	4b35      	ldr	r3, [pc, #212]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007d0:	2102      	movs	r1, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	2202      	movs	r2, #2
 80007dc:	4013      	ands	r3, r2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007e8:	2101      	movs	r1, #1
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	2201      	movs	r2, #1
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_GPIO_Init+0xf0>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_GPIO_Init+0xf0>)
 8000800:	2108      	movs	r1, #8
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_GPIO_Init+0xf0>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2208      	movs	r2, #8
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Relay_Pin|M_FW_Pin|M_RV_Pin|RW_Pin
 8000812:	4925      	ldr	r1, [pc, #148]	; (80008a8 <MX_GPIO_Init+0xf4>)
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_GPIO_Init+0xf8>)
 8000816:	2200      	movs	r2, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb9d 	bl	8000f58 <HAL_GPIO_WritePin>
                          |E_Pin|D4_Pin|D5_Pin|D6_Pin
                          |D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xfc>)
 8000820:	2200      	movs	r2, #0
 8000822:	2108      	movs	r1, #8
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fb97 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay_Pin M_FW_Pin M_RV_Pin */
  GPIO_InitStruct.Pin = Relay_Pin|M_FW_Pin|M_RV_Pin;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	22e0      	movs	r2, #224	; 0xe0
 800082e:	0212      	lsls	r2, r2, #8
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	193b      	adds	r3, r7, r4
 8000834:	2201      	movs	r2, #1
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2202      	movs	r2, #2
 800083c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	193b      	adds	r3, r7, r4
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <MX_GPIO_Init+0xf8>)
 8000848:	0019      	movs	r1, r3
 800084a:	0010      	movs	r0, r2
 800084c:	f000 fa20 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2208      	movs	r2, #8
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000868:	193b      	adds	r3, r7, r4
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <MX_GPIO_Init+0xfc>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 fa0e 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RW_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RW_Pin|E_Pin|D4_Pin|D5_Pin
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	22fa      	movs	r2, #250	; 0xfa
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	601a      	str	r2, [r3, #0]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2201      	movs	r2, #1
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	187b      	adds	r3, r7, r1
 8000892:	4a06      	ldr	r2, [pc, #24]	; (80008ac <MX_GPIO_Init+0xf8>)
 8000894:	0019      	movs	r1, r3
 8000896:	0010      	movs	r0, r2
 8000898:	f000 f9fa 	bl	8000c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b009      	add	sp, #36	; 0x24
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	0000e3e8 	.word	0x0000e3e8
 80008ac:	50000400 	.word	0x50000400
 80008b0:	50000c00 	.word	0x50000c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x44>)
 80008c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_MspInit+0x44>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x44>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_MspInit+0x44>)
 80008e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_MspInit+0x44>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0549      	lsls	r1, r1, #21
 80008e8:	430a      	orrs	r2, r1
 80008ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_MspInit+0x44>)
 80008ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	055b      	lsls	r3, r3, #21
 80008f4:	4013      	ands	r3, r2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_TIM_Base_MspInit+0x38>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10d      	bne.n	8000936 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0109      	lsls	r1, r1, #4
 8000924:	430a      	orrs	r2, r1
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_TIM_Base_MspInit+0x3c>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b004      	add	sp, #16
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40012c00 	.word	0x40012c00
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 f89c 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000984:	f7ff fff7 	bl	8000976 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ae:	f001 fa85 	bl	8001ebc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009b2:	f7ff fdc3 	bl	800053c <main>

080009b6 <LoopForever>:

LoopForever:
  b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c4:	08001f9c 	.word	0x08001f9c
  ldr r2, =_sbss
 80009c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009cc:	20000078 	.word	0x20000078

080009d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x3c>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Init+0x3c>)
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	0049      	lsls	r1, r1, #1
 80009ea:	430a      	orrs	r2, r1
 80009ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f810 	bl	8000a14 <HAL_InitTick>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d003      	beq.n	8000a00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e001      	b.n	8000a04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff ff5e 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_InitTick+0x88>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d02b      	beq.n	8000a84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <HAL_InitTick+0x8c>)
 8000a2e:	681c      	ldr	r4, [r3, #0]
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_InitTick+0x88>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0019      	movs	r1, r3
 8000a36:	23fa      	movs	r3, #250	; 0xfa
 8000a38:	0098      	lsls	r0, r3, #2
 8000a3a:	f7ff fb61 	bl	8000100 <__udivsi3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0019      	movs	r1, r3
 8000a42:	0020      	movs	r0, r4
 8000a44:	f7ff fb5c 	bl	8000100 <__udivsi3>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f913 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d112      	bne.n	8000a7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d80a      	bhi.n	8000a70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8f2 	bl	8000c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_InitTick+0x90>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	e00d      	b.n	8000a8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e008      	b.n	8000a8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e003      	b.n	8000a8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a84:	230f      	movs	r3, #15
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b005      	add	sp, #20
 8000a98:	bd90      	pop	{r4, r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000074 	.word	0x20000074

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000074 	.word	0x20000074

08000ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae8:	f7ff fff0 	bl	8000acc <HAL_GetTick>
 8000aec:	0003      	movs	r3, r0
 8000aee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	d005      	beq.n	8000b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_Delay+0x44>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	001a      	movs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	f7ff ffe0 	bl	8000acc <HAL_GetTick>
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d8f7      	bhi.n	8000b08 <HAL_Delay+0x28>
  {
  }
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b004      	add	sp, #16
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000008 	.word	0x20000008

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	d828      	bhi.n	8000b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	589b      	ldr	r3, [r3, r2]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	430a      	orrs	r2, r1
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8e:	e031      	b.n	8000bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0019      	movs	r1, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001c      	movs	r4, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	4023      	ands	r3, r4
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	3306      	adds	r3, #6
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d301      	bcc.n	8000c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e010      	b.n	8000c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SysTick_Config+0x44>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3a01      	subs	r2, #1
 8000c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2103      	movs	r1, #3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff7c 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x44>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x44>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ffbf 	bl	8000c04 <SysTick_Config>
 8000c86:	0003      	movs	r3, r0
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	e147      	b.n	8000f30 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <HAL_GPIO_Init+0x28>
 8000cb6:	e138      	b.n	8000f2a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x40>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	0013      	movs	r3, r2
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2107      	movs	r1, #7
 8000da6:	400b      	ands	r3, r1
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	6939      	ldr	r1, [r7, #16]
 8000dc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	401a      	ands	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	029b      	lsls	r3, r3, #10
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d100      	bne.n	8000e04 <HAL_GPIO_Init+0x174>
 8000e02:	e092      	b.n	8000f2a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e04:	4a50      	ldr	r2, [pc, #320]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	589b      	ldr	r3, [r3, r2]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2203      	movs	r2, #3
 8000e16:	4013      	ands	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	05db      	lsls	r3, r3, #23
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0x1ca>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a45      	ldr	r2, [pc, #276]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00d      	beq.n	8000e56 <HAL_GPIO_Init+0x1c6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <HAL_GPIO_Init+0x2c0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d007      	beq.n	8000e52 <HAL_GPIO_Init+0x1c2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_GPIO_Init+0x1be>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x1cc>
 8000e4e:	2305      	movs	r3, #5
 8000e50:	e004      	b.n	8000e5c <HAL_GPIO_Init+0x1cc>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_Init+0x1cc>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <HAL_GPIO_Init+0x1cc>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	2103      	movs	r1, #3
 8000e60:	400a      	ands	r2, r1
 8000e62:	00d2      	lsls	r2, r2, #3
 8000e64:	4093      	lsls	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e6c:	4936      	ldr	r1, [pc, #216]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	3318      	adds	r3, #24
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	035b      	lsls	r3, r3, #13
 8000e92:	4013      	ands	r3, r2
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	039b      	lsls	r3, r3, #14
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000ed0:	2384      	movs	r3, #132	; 0x84
 8000ed2:	58d3      	ldr	r3, [r2, r3]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	029b      	lsls	r3, r3, #10
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef4:	4914      	ldr	r1, [pc, #80]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000ef6:	2284      	movs	r2, #132	; 0x84
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	58d3      	ldr	r3, [r2, r3]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f22:	4909      	ldr	r1, [pc, #36]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	40da      	lsrs	r2, r3
 8000f38:	1e13      	subs	r3, r2, #0
 8000f3a:	d000      	beq.n	8000f3e <HAL_GPIO_Init+0x2ae>
 8000f3c:	e6b0      	b.n	8000ca0 <HAL_GPIO_Init+0x10>
  }
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b006      	add	sp, #24
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	50000400 	.word	0x50000400
 8000f50:	50000800 	.word	0x50000800
 8000f54:	50000c00 	.word	0x50000c00

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	0008      	movs	r0, r1
 8000f62:	0011      	movs	r1, r2
 8000f64:	1cbb      	adds	r3, r7, #2
 8000f66:	1c02      	adds	r2, r0, #0
 8000f68:	801a      	strh	r2, [r3, #0]
 8000f6a:	1c7b      	adds	r3, r7, #1
 8000f6c:	1c0a      	adds	r2, r1, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f70:	1c7b      	adds	r3, r7, #1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f80:	e003      	b.n	8000f8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f82:	1cbb      	adds	r3, r7, #2
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	1cbb      	adds	r3, r7, #2
 8000f9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695b      	ldr	r3, [r3, #20]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4013      	ands	r3, r2
 8000fae:	041a      	lsls	r2, r3, #16
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	1cb9      	adds	r1, r7, #2
 8000fb6:	8809      	ldrh	r1, [r1, #0]
 8000fb8:	400b      	ands	r3, r1
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
}
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b004      	add	sp, #16
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	0019      	movs	r1, r3
 8000fda:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d11f      	bne.n	800102c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	189b      	adds	r3, r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4912      	ldr	r1, [pc, #72]	; (8001044 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff f880 	bl	8000100 <__udivsi3>
 8001000:	0003      	movs	r3, r0
 8001002:	3301      	adds	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001006:	e008      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3b01      	subs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	e001      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e009      	b.n	800102e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	401a      	ands	r2, r3
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	429a      	cmp	r2, r3
 800102a:	d0ed      	beq.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40007000 	.word	0x40007000
 800103c:	fffff9ff 	.word	0xfffff9ff
 8001040:	20000000 	.word	0x20000000
 8001044:	000f4240 	.word	0x000f4240

08001048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e2f3      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_RCC_OscConfig+0x1e>
 8001064:	e07c      	b.n	8001160 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001066:	4bc3      	ldr	r3, [pc, #780]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2238      	movs	r2, #56	; 0x38
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001070:	4bc0      	ldr	r3, [pc, #768]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b10      	cmp	r3, #16
 800107e:	d102      	bne.n	8001086 <HAL_RCC_OscConfig+0x3e>
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d002      	beq.n	800108c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d10b      	bne.n	80010a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	4bb9      	ldr	r3, [pc, #740]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	4013      	ands	r3, r2
 8001096:	d062      	beq.n	800115e <HAL_RCC_OscConfig+0x116>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d15e      	bne.n	800115e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e2ce      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	025b      	lsls	r3, r3, #9
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d107      	bne.n	80010c0 <HAL_RCC_OscConfig+0x78>
 80010b0:	4bb0      	ldr	r3, [pc, #704]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4baf      	ldr	r3, [pc, #700]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0249      	lsls	r1, r1, #9
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e020      	b.n	8001102 <HAL_RCC_OscConfig+0xba>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	02db      	lsls	r3, r3, #11
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d10e      	bne.n	80010ea <HAL_RCC_OscConfig+0xa2>
 80010cc:	4ba9      	ldr	r3, [pc, #676]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	02c9      	lsls	r1, r1, #11
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	4ba6      	ldr	r3, [pc, #664]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4ba5      	ldr	r3, [pc, #660]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	0249      	lsls	r1, r1, #9
 80010e4:	430a      	orrs	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e00b      	b.n	8001102 <HAL_RCC_OscConfig+0xba>
 80010ea:	4ba2      	ldr	r3, [pc, #648]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4ba1      	ldr	r3, [pc, #644]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	49a1      	ldr	r1, [pc, #644]	; (8001378 <HAL_RCC_OscConfig+0x330>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b9f      	ldr	r3, [pc, #636]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	499f      	ldr	r1, [pc, #636]	; (800137c <HAL_RCC_OscConfig+0x334>)
 80010fe:	400a      	ands	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d014      	beq.n	8001134 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fcdf 	bl	8000acc <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fcda 	bl	8000acc <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e28d      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001126:	4b93      	ldr	r3, [pc, #588]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d0f0      	beq.n	8001114 <HAL_RCC_OscConfig+0xcc>
 8001132:	e015      	b.n	8001160 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fcca 	bl	8000acc <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113e:	f7ff fcc5 	bl	8000acc <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b64      	cmp	r3, #100	; 0x64
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e278      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	029b      	lsls	r3, r3, #10
 8001158:	4013      	ands	r3, r2
 800115a:	d1f0      	bne.n	800113e <HAL_RCC_OscConfig+0xf6>
 800115c:	e000      	b.n	8001160 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2202      	movs	r2, #2
 8001166:	4013      	ands	r3, r2
 8001168:	d100      	bne.n	800116c <HAL_RCC_OscConfig+0x124>
 800116a:	e099      	b.n	80012a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116c:	4b81      	ldr	r3, [pc, #516]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2238      	movs	r2, #56	; 0x38
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001176:	4b7f      	ldr	r3, [pc, #508]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2203      	movs	r2, #3
 800117c:	4013      	ands	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b10      	cmp	r3, #16
 8001184:	d102      	bne.n	800118c <HAL_RCC_OscConfig+0x144>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d002      	beq.n	8001192 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d135      	bne.n	80011fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001192:	4b78      	ldr	r3, [pc, #480]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4013      	ands	r3, r2
 800119c:	d005      	beq.n	80011aa <HAL_RCC_OscConfig+0x162>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e24b      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011aa:	4b72      	ldr	r3, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a74      	ldr	r2, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	0019      	movs	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	021a      	lsls	r2, r3, #8
 80011ba:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011c6:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6e      	ldr	r2, [pc, #440]	; (8001384 <HAL_RCC_OscConfig+0x33c>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011da:	4b66      	ldr	r3, [pc, #408]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	0adb      	lsrs	r3, r3, #11
 80011e0:	2207      	movs	r2, #7
 80011e2:	4013      	ands	r3, r2
 80011e4:	4a68      	ldr	r2, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x340>)
 80011e6:	40da      	lsrs	r2, r3
 80011e8:	4b68      	ldr	r3, [pc, #416]	; (800138c <HAL_RCC_OscConfig+0x344>)
 80011ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x348>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fc0f 	bl	8000a14 <HAL_InitTick>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d051      	beq.n	800129e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e221      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d030      	beq.n	8001268 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001206:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a5e      	ldr	r2, [pc, #376]	; (8001384 <HAL_RCC_OscConfig+0x33c>)
 800120c:	4013      	ands	r3, r2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800121a:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0049      	lsls	r1, r1, #1
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc50 	bl	8000acc <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fc4b 	bl	8000acc <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1fe      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001244:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4013      	ands	r3, r2
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_RCC_OscConfig+0x338>)
 8001256:	4013      	ands	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	021a      	lsls	r2, r3, #8
 8001260:	4b44      	ldr	r3, [pc, #272]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001262:	430a      	orrs	r2, r1
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	e01b      	b.n	80012a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800126e:	4949      	ldr	r1, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x34c>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001274:	f7ff fc2a 	bl	8000acc <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fc25 	bl	8000acc <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1d8      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4013      	ands	r3, r2
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x236>
 800129c:	e000      	b.n	80012a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2208      	movs	r2, #8
 80012a6:	4013      	ands	r3, r2
 80012a8:	d047      	beq.n	800133a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2238      	movs	r2, #56	; 0x38
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b18      	cmp	r3, #24
 80012b4:	d10a      	bne.n	80012cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d03c      	beq.n	800133a <HAL_RCC_OscConfig+0x2f2>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d138      	bne.n	800133a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e1ba      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d019      	beq.n	8001308 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012da:	2101      	movs	r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbf4 	bl	8000acc <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff fbef 	bl	8000acc <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e1a2      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	d0f1      	beq.n	80012ea <HAL_RCC_OscConfig+0x2a2>
 8001306:	e018      	b.n	800133a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800130a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800130e:	2101      	movs	r1, #1
 8001310:	438a      	bics	r2, r1
 8001312:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fbda 	bl	8000acc <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fbd5 	bl	8000acc <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e188      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001334:	2202      	movs	r2, #2
 8001336:	4013      	ands	r3, r2
 8001338:	d1f1      	bne.n	800131e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2204      	movs	r2, #4
 8001340:	4013      	ands	r3, r2
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x2fe>
 8001344:	e0c6      	b.n	80014d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001346:	231f      	movs	r3, #31
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2238      	movs	r2, #56	; 0x38
 8001354:	4013      	ands	r3, r2
 8001356:	2b20      	cmp	r3, #32
 8001358:	d11e      	bne.n	8001398 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_RCC_OscConfig+0x32c>)
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x31e>
 8001364:	e0b6      	b.n	80014d4 <HAL_RCC_OscConfig+0x48c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <HAL_RCC_OscConfig+0x328>
 800136e:	e0b1      	b.n	80014d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e166      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
 8001374:	40021000 	.word	0x40021000
 8001378:	fffeffff 	.word	0xfffeffff
 800137c:	fffbffff 	.word	0xfffbffff
 8001380:	ffff80ff 	.word	0xffff80ff
 8001384:	ffffc7ff 	.word	0xffffc7ff
 8001388:	00f42400 	.word	0x00f42400
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004
 8001394:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001398:	4bac      	ldr	r3, [pc, #688]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800139a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	055b      	lsls	r3, r3, #21
 80013a0:	4013      	ands	r3, r2
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x360>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x362>
 80013a8:	2300      	movs	r3, #0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d011      	beq.n	80013d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4ba7      	ldr	r3, [pc, #668]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80013b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013b2:	4ba6      	ldr	r3, [pc, #664]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	0549      	lsls	r1, r1, #21
 80013b8:	430a      	orrs	r2, r1
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80013bc:	4ba3      	ldr	r3, [pc, #652]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80013be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	055b      	lsls	r3, r3, #21
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013ca:	231f      	movs	r3, #31
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d2:	4b9f      	ldr	r3, [pc, #636]	; (8001650 <HAL_RCC_OscConfig+0x608>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d11a      	bne.n	8001414 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013de:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <HAL_RCC_OscConfig+0x608>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4b9b      	ldr	r3, [pc, #620]	; (8001650 <HAL_RCC_OscConfig+0x608>)
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	0049      	lsls	r1, r1, #1
 80013e8:	430a      	orrs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb6e 	bl	8000acc <HAL_GetTick>
 80013f0:	0003      	movs	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f6:	f7ff fb69 	bl	8000acc <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e11c      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001408:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x608>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x3e2>
 800141c:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800141e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001420:	4b8a      	ldr	r3, [pc, #552]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001422:	2101      	movs	r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	65da      	str	r2, [r3, #92]	; 0x5c
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x41c>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x404>
 8001432:	4b86      	ldr	r3, [pc, #536]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001438:	2104      	movs	r1, #4
 800143a:	430a      	orrs	r2, r1
 800143c:	65da      	str	r2, [r3, #92]	; 0x5c
 800143e:	4b83      	ldr	r3, [pc, #524]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001442:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	65da      	str	r2, [r3, #92]	; 0x5c
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0x41c>
 800144c:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800144e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001450:	4b7e      	ldr	r3, [pc, #504]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001452:	2101      	movs	r1, #1
 8001454:	438a      	bics	r2, r1
 8001456:	65da      	str	r2, [r3, #92]	; 0x5c
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800145a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800145e:	2104      	movs	r1, #4
 8001460:	438a      	bics	r2, r1
 8001462:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d014      	beq.n	8001496 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fb2e 	bl	8000acc <HAL_GetTick>
 8001470:	0003      	movs	r3, r0
 8001472:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001474:	e009      	b.n	800148a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff fb29 	bl	8000acc <HAL_GetTick>
 800147a:	0002      	movs	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a74      	ldr	r2, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x60c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0db      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148a:	4b70      	ldr	r3, [pc, #448]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x42e>
 8001494:	e013      	b.n	80014be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff fb19 	bl	8000acc <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800149e:	e009      	b.n	80014b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb14 	bl	8000acc <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	4a6a      	ldr	r2, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x60c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e0c6      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b4:	4b65      	ldr	r3, [pc, #404]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014be:	231f      	movs	r3, #31
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d105      	bne.n	80014d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014c8:	4b60      	ldr	r3, [pc, #384]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014cc:	4b5f      	ldr	r3, [pc, #380]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014ce:	4962      	ldr	r1, [pc, #392]	; (8001658 <HAL_RCC_OscConfig+0x610>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x496>
 80014dc:	e0b0      	b.n	8001640 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014de:	4b5b      	ldr	r3, [pc, #364]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2238      	movs	r2, #56	; 0x38
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d100      	bne.n	80014ec <HAL_RCC_OscConfig+0x4a4>
 80014ea:	e078      	b.n	80015de <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d153      	bne.n	800159c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f4:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b54      	ldr	r3, [pc, #336]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80014fa:	4958      	ldr	r1, [pc, #352]	; (800165c <HAL_RCC_OscConfig+0x614>)
 80014fc:	400a      	ands	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fae4 	bl	8000acc <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fadf 	bl	8000acc <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e092      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b4b      	ldr	r3, [pc, #300]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	049b      	lsls	r3, r3, #18
 8001524:	4013      	ands	r3, r2
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a4c      	ldr	r2, [pc, #304]	; (8001660 <HAL_RCC_OscConfig+0x618>)
 800152e:	4013      	ands	r3, r2
 8001530:	0019      	movs	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1a      	ldr	r2, [r3, #32]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	431a      	orrs	r2, r3
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001552:	430a      	orrs	r2, r1
 8001554:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	0449      	lsls	r1, r1, #17
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	0549      	lsls	r1, r1, #21
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff faab 	bl	8000acc <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff faa6 	bl	8000acc <HAL_GetTick>
 8001580:	0002      	movs	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e059      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_RCC_OscConfig+0x604>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	049b      	lsls	r3, r3, #18
 8001596:	4013      	ands	r3, r2
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x534>
 800159a:	e051      	b.n	8001640 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x604>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80015a2:	492e      	ldr	r1, [pc, #184]	; (800165c <HAL_RCC_OscConfig+0x614>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa90 	bl	8000acc <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b2:	f7ff fa8b 	bl	8000acc <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e03e      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	049b      	lsls	r3, r3, #18
 80015cc:	4013      	ands	r3, r2
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80015d6:	4923      	ldr	r1, [pc, #140]	; (8001664 <HAL_RCC_OscConfig+0x61c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	e030      	b.n	8001640 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e02b      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_RCC_OscConfig+0x604>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2203      	movs	r2, #3
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11e      	bne.n	800163c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2270      	movs	r2, #112	; 0x70
 8001602:	401a      	ands	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001608:	429a      	cmp	r2, r3
 800160a:	d117      	bne.n	800163c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	23fe      	movs	r3, #254	; 0xfe
 8001610:	01db      	lsls	r3, r3, #7
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d10e      	bne.n	800163c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	23f8      	movs	r3, #248	; 0xf8
 8001622:	039b      	lsls	r3, r3, #14
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	0f5b      	lsrs	r3, r3, #29
 8001632:	075a      	lsls	r2, r3, #29
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	0018      	movs	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	b008      	add	sp, #32
 8001648:	bd80      	pop	{r7, pc}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000
 8001650:	40007000 	.word	0x40007000
 8001654:	00001388 	.word	0x00001388
 8001658:	efffffff 	.word	0xefffffff
 800165c:	feffffff 	.word	0xfeffffff
 8001660:	1fc1808c 	.word	0x1fc1808c
 8001664:	effefffc 	.word	0xeffefffc

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0e9      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2207      	movs	r2, #7
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d91e      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b73      	ldr	r3, [pc, #460]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2207      	movs	r2, #7
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa16 	bl	8000acc <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff fa11 	bl	8000acc <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <HAL_RCC_ClockConfig+0x1f4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0ca      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ba:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2207      	movs	r2, #7
 80016c0:	4013      	ands	r3, r2
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	d006      	beq.n	80016ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016dc:	4b60      	ldr	r3, [pc, #384]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 80016e2:	21e0      	movs	r1, #224	; 0xe0
 80016e4:	01c9      	lsls	r1, r1, #7
 80016e6:	430a      	orrs	r2, r1
 80016e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ea:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4a5d      	ldr	r2, [pc, #372]	; (8001864 <HAL_RCC_ClockConfig+0x1fc>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	4013      	ands	r3, r2
 8001706:	d057      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	d12b      	bne.n	8001774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e097      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d107      	bne.n	8001738 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	049b      	lsls	r3, r3, #18
 8001730:	4013      	ands	r3, r2
 8001732:	d11f      	bne.n	8001774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e08b      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001740:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4013      	ands	r3, r2
 800174a:	d113      	bne.n	8001774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e07f      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001758:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 800175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d108      	bne.n	8001774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e074      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2202      	movs	r2, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e06d      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2207      	movs	r2, #7
 800177a:	4393      	bics	r3, r2
 800177c:	0019      	movs	r1, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001784:	430a      	orrs	r2, r1
 8001786:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001788:	f7ff f9a0 	bl	8000acc <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001790:	e009      	b.n	80017a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001792:	f7ff f99b 	bl	8000acc <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a2f      	ldr	r2, [pc, #188]	; (800185c <HAL_RCC_ClockConfig+0x1f4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e054      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2238      	movs	r2, #56	; 0x38
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1ec      	bne.n	8001792 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2207      	movs	r2, #7
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d21e      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2207      	movs	r2, #7
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d8:	f7ff f978 	bl	8000acc <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017e0:	e009      	b.n	80017f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7ff f973 	bl	8000acc <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_RCC_ClockConfig+0x1f4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e02c      	b.n	8001850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2207      	movs	r2, #7
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <HAL_RCC_ClockConfig+0x200>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 800181e:	430a      	orrs	r2, r1
 8001820:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001822:	f000 f829 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001826:	0001      	movs	r1, r0
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	220f      	movs	r2, #15
 8001830:	401a      	ands	r2, r3
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_RCC_ClockConfig+0x204>)
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	58d3      	ldr	r3, [r2, r3]
 8001838:	221f      	movs	r2, #31
 800183a:	4013      	ands	r3, r2
 800183c:	000a      	movs	r2, r1
 800183e:	40da      	lsrs	r2, r3
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_ClockConfig+0x208>)
 8001842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x20c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff f8e3 	bl	8000a14 <HAL_InitTick>
 800184e:	0003      	movs	r3, r0
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40022000 	.word	0x40022000
 800185c:	00001388 	.word	0x00001388
 8001860:	40021000 	.word	0x40021000
 8001864:	fffff0ff 	.word	0xfffff0ff
 8001868:	ffff8fff 	.word	0xffff8fff
 800186c:	08001f54 	.word	0x08001f54
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	4013      	ands	r3, r2
 8001886:	d10f      	bne.n	80018a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001888:	4b39      	ldr	r3, [pc, #228]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0adb      	lsrs	r3, r3, #11
 800188e:	2207      	movs	r2, #7
 8001890:	4013      	ands	r3, r2
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	0013      	movs	r3, r2
 8001898:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4835      	ldr	r0, [pc, #212]	; (8001974 <HAL_RCC_GetSysClockFreq+0xfc>)
 800189e:	f7fe fc2f 	bl	8000100 <__udivsi3>
 80018a2:	0003      	movs	r3, r0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	e05d      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2238      	movs	r2, #56	; 0x38
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_GetSysClockFreq+0x100>)
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e054      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2238      	movs	r2, #56	; 0x38
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d138      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2203      	movs	r2, #3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	2207      	movs	r2, #7
 80018d8:	4013      	ands	r3, r2
 80018da:	3301      	adds	r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d10d      	bne.n	8001900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	4824      	ldr	r0, [pc, #144]	; (8001978 <HAL_RCC_GetSysClockFreq+0x100>)
 80018e8:	f7fe fc0a 	bl	8000100 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	0019      	movs	r1, r3
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	227f      	movs	r2, #127	; 0x7f
 80018f8:	4013      	ands	r3, r2
 80018fa:	434b      	muls	r3, r1
 80018fc:	617b      	str	r3, [r7, #20]
        break;
 80018fe:	e00d      	b.n	800191c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	481c      	ldr	r0, [pc, #112]	; (8001974 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001904:	f7fe fbfc 	bl	8000100 <__udivsi3>
 8001908:	0003      	movs	r3, r0
 800190a:	0019      	movs	r1, r3
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	227f      	movs	r2, #127	; 0x7f
 8001914:	4013      	ands	r3, r2
 8001916:	434b      	muls	r3, r1
 8001918:	617b      	str	r3, [r7, #20]
        break;
 800191a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0f5b      	lsrs	r3, r3, #29
 8001922:	2207      	movs	r2, #7
 8001924:	4013      	ands	r3, r2
 8001926:	3301      	adds	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7fe fbe7 	bl	8000100 <__udivsi3>
 8001932:	0003      	movs	r3, r0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	e015      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2238      	movs	r2, #56	; 0x38
 800193e:	4013      	ands	r3, r2
 8001940:	2b20      	cmp	r3, #32
 8001942:	d103      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2238      	movs	r2, #56	; 0x38
 8001952:	4013      	ands	r3, r2
 8001954:	2b18      	cmp	r3, #24
 8001956:	d103      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001958:	23fa      	movs	r3, #250	; 0xfa
 800195a:	01db      	lsls	r3, r3, #7
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	e001      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001964:	693b      	ldr	r3, [r7, #16]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b006      	add	sp, #24
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40021000 	.word	0x40021000
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e04a      	b.n	8001a24 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	223d      	movs	r2, #61	; 0x3d
 8001992:	5c9b      	ldrb	r3, [r3, r2]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	223c      	movs	r2, #60	; 0x3c
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe ffaf 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	223d      	movs	r2, #61	; 0x3d
 80019ae:	2102      	movs	r1, #2
 80019b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	0019      	movs	r1, r3
 80019bc:	0010      	movs	r0, r2
 80019be:	f000 f90b 	bl	8001bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2248      	movs	r2, #72	; 0x48
 80019c6:	2101      	movs	r1, #1
 80019c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	223e      	movs	r2, #62	; 0x3e
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2240      	movs	r2, #64	; 0x40
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2241      	movs	r2, #65	; 0x41
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2242      	movs	r2, #66	; 0x42
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2243      	movs	r2, #67	; 0x43
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2244      	movs	r2, #68	; 0x44
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2245      	movs	r2, #69	; 0x45
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2246      	movs	r2, #70	; 0x46
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2247      	movs	r2, #71	; 0x47
 8001a16:	2101      	movs	r1, #1
 8001a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	223d      	movs	r2, #61	; 0x3d
 8001a1e:	2101      	movs	r1, #1
 8001a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	230f      	movs	r3, #15
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223c      	movs	r2, #60	; 0x3c
 8001a42:	5c9b      	ldrb	r3, [r3, r2]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_TIM_ConfigClockSource+0x20>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e0bc      	b.n	8001bc6 <HAL_TIM_ConfigClockSource+0x19a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	223c      	movs	r2, #60	; 0x3c
 8001a50:	2101      	movs	r1, #1
 8001a52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	223d      	movs	r2, #61	; 0x3d
 8001a58:	2102      	movs	r1, #2
 8001a5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4a59      	ldr	r2, [pc, #356]	; (8001bd4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0192      	lsls	r2, r2, #6
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d040      	beq.n	8001b0a <HAL_TIM_ConfigClockSource+0xde>
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	0192      	lsls	r2, r2, #6
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d900      	bls.n	8001a92 <HAL_TIM_ConfigClockSource+0x66>
 8001a90:	e088      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	0152      	lsls	r2, r2, #5
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d100      	bne.n	8001a9c <HAL_TIM_ConfigClockSource+0x70>
 8001a9a:	e088      	b.n	8001bae <HAL_TIM_ConfigClockSource+0x182>
 8001a9c:	2280      	movs	r2, #128	; 0x80
 8001a9e:	0152      	lsls	r2, r2, #5
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d900      	bls.n	8001aa6 <HAL_TIM_ConfigClockSource+0x7a>
 8001aa4:	e07e      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001aa6:	2b70      	cmp	r3, #112	; 0x70
 8001aa8:	d018      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0xb0>
 8001aaa:	d900      	bls.n	8001aae <HAL_TIM_ConfigClockSource+0x82>
 8001aac:	e07a      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001aae:	2b60      	cmp	r3, #96	; 0x60
 8001ab0:	d04f      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0x126>
 8001ab2:	d900      	bls.n	8001ab6 <HAL_TIM_ConfigClockSource+0x8a>
 8001ab4:	e076      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001ab6:	2b50      	cmp	r3, #80	; 0x50
 8001ab8:	d03b      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x106>
 8001aba:	d900      	bls.n	8001abe <HAL_TIM_ConfigClockSource+0x92>
 8001abc:	e072      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001abe:	2b40      	cmp	r3, #64	; 0x40
 8001ac0:	d057      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x146>
 8001ac2:	d900      	bls.n	8001ac6 <HAL_TIM_ConfigClockSource+0x9a>
 8001ac4:	e06e      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001ac6:	2b30      	cmp	r3, #48	; 0x30
 8001ac8:	d063      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x166>
 8001aca:	d86b      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d060      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x166>
 8001ad0:	d868      	bhi.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d05d      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x166>
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d05b      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x166>
 8001ada:	e063      	b.n	8001ba4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001aec:	f000 f95c 	bl	8001da8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2277      	movs	r2, #119	; 0x77
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	609a      	str	r2, [r3, #8]
      break;
 8001b08:	e052      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b1a:	f000 f945 	bl	8001da8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	01c9      	lsls	r1, r1, #7
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
      break;
 8001b30:	e03e      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b3e:	001a      	movs	r2, r3
 8001b40:	f000 f8b6 	bl	8001cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2150      	movs	r1, #80	; 0x50
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 f910 	bl	8001d70 <TIM_ITRx_SetConfig>
      break;
 8001b50:	e02e      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b5e:	001a      	movs	r2, r3
 8001b60:	f000 f8d4 	bl	8001d0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2160      	movs	r1, #96	; 0x60
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 f900 	bl	8001d70 <TIM_ITRx_SetConfig>
      break;
 8001b70:	e01e      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b7e:	001a      	movs	r2, r3
 8001b80:	f000 f896 	bl	8001cb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 f8f0 	bl	8001d70 <TIM_ITRx_SetConfig>
      break;
 8001b90:	e00e      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	f000 f8e7 	bl	8001d70 <TIM_ITRx_SetConfig>
      break;
 8001ba2:	e005      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
      break;
 8001bac:	e000      	b.n	8001bb0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001bae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	223d      	movs	r2, #61	; 0x3d
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	223c      	movs	r2, #60	; 0x3c
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

  return status;
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	ffceff88 	.word	0xffceff88
 8001bd4:	ffff00ff 	.word	0xffff00ff

08001bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <TIM_Base_SetConfig+0xc0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <TIM_Base_SetConfig+0x20>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <TIM_Base_SetConfig+0xc4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d108      	bne.n	8001c0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2270      	movs	r2, #112	; 0x70
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <TIM_Base_SetConfig+0xc0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00f      	beq.n	8001c32 <TIM_Base_SetConfig+0x5a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <TIM_Base_SetConfig+0xc4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00b      	beq.n	8001c32 <TIM_Base_SetConfig+0x5a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <TIM_Base_SetConfig+0xc8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <TIM_Base_SetConfig+0x5a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <TIM_Base_SetConfig+0xcc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d003      	beq.n	8001c32 <TIM_Base_SetConfig+0x5a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <TIM_Base_SetConfig+0xd0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d108      	bne.n	8001c44 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <TIM_Base_SetConfig+0xd4>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2280      	movs	r2, #128	; 0x80
 8001c48:	4393      	bics	r3, r2
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <TIM_Base_SetConfig+0xc0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <TIM_Base_SetConfig+0xaa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <TIM_Base_SetConfig+0xcc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d003      	beq.n	8001c82 <TIM_Base_SetConfig+0xaa>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <TIM_Base_SetConfig+0xd0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d103      	bne.n	8001c8a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	615a      	str	r2, [r3, #20]
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40002000 	.word	0x40002000
 8001ca4:	40014400 	.word	0x40014400
 8001ca8:	40014800 	.word	0x40014800
 8001cac:	fffffcff 	.word	0xfffffcff

08001cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4393      	bics	r3, r2
 8001cca:	001a      	movs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	22f0      	movs	r2, #240	; 0xf0
 8001cda:	4393      	bics	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	220a      	movs	r2, #10
 8001cec:	4393      	bics	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	621a      	str	r2, [r3, #32]
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b006      	add	sp, #24
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	4393      	bics	r3, r2
 8001d20:	001a      	movs	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <TIM_TI2_ConfigInputStage+0x60>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	031b      	lsls	r3, r3, #12
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	22a0      	movs	r2, #160	; 0xa0
 8001d48:	4393      	bics	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	621a      	str	r2, [r3, #32]
}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	ffff0fff 	.word	0xffff0fff

08001d70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <TIM_ITRx_SetConfig+0x34>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	2207      	movs	r2, #7
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	609a      	str	r2, [r3, #8]
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	ffcfff8f 	.word	0xffcfff8f

08001da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <TIM_ETR_SetConfig+0x3c>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	021a      	lsls	r2, r3, #8
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	609a      	str	r2, [r3, #8]
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	ffff00ff 	.word	0xffff00ff

08001de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	223c      	movs	r2, #60	; 0x3c
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e04a      	b.n	8001e96 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	223c      	movs	r2, #60	; 0x3c
 8001e04:	2101      	movs	r1, #1
 8001e06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	223d      	movs	r2, #61	; 0x3d
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d108      	bne.n	8001e3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2270      	movs	r2, #112	; 0x70
 8001e40:	4393      	bics	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d004      	beq.n	8001e6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10c      	bne.n	8001e84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	4393      	bics	r3, r2
 8001e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223d      	movs	r2, #61	; 0x3d
 8001e88:	2101      	movs	r1, #1
 8001e8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	223c      	movs	r2, #60	; 0x3c
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	ff0fffff 	.word	0xff0fffff
 8001ea8:	40000400 	.word	0x40000400

08001eac <memset>:
 8001eac:	0003      	movs	r3, r0
 8001eae:	1882      	adds	r2, r0, r2
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <memset+0xa>
 8001eb4:	4770      	bx	lr
 8001eb6:	7019      	strb	r1, [r3, #0]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	e7f9      	b.n	8001eb0 <memset+0x4>

08001ebc <__libc_init_array>:
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	2600      	movs	r6, #0
 8001ec0:	4c0c      	ldr	r4, [pc, #48]	; (8001ef4 <__libc_init_array+0x38>)
 8001ec2:	4d0d      	ldr	r5, [pc, #52]	; (8001ef8 <__libc_init_array+0x3c>)
 8001ec4:	1b64      	subs	r4, r4, r5
 8001ec6:	10a4      	asrs	r4, r4, #2
 8001ec8:	42a6      	cmp	r6, r4
 8001eca:	d109      	bne.n	8001ee0 <__libc_init_array+0x24>
 8001ecc:	2600      	movs	r6, #0
 8001ece:	f000 f819 	bl	8001f04 <_init>
 8001ed2:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <__libc_init_array+0x40>)
 8001ed4:	4d0a      	ldr	r5, [pc, #40]	; (8001f00 <__libc_init_array+0x44>)
 8001ed6:	1b64      	subs	r4, r4, r5
 8001ed8:	10a4      	asrs	r4, r4, #2
 8001eda:	42a6      	cmp	r6, r4
 8001edc:	d105      	bne.n	8001eea <__libc_init_array+0x2e>
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
 8001ee0:	00b3      	lsls	r3, r6, #2
 8001ee2:	58eb      	ldr	r3, [r5, r3]
 8001ee4:	4798      	blx	r3
 8001ee6:	3601      	adds	r6, #1
 8001ee8:	e7ee      	b.n	8001ec8 <__libc_init_array+0xc>
 8001eea:	00b3      	lsls	r3, r6, #2
 8001eec:	58eb      	ldr	r3, [r5, r3]
 8001eee:	4798      	blx	r3
 8001ef0:	3601      	adds	r6, #1
 8001ef2:	e7f2      	b.n	8001eda <__libc_init_array+0x1e>
 8001ef4:	08001f94 	.word	0x08001f94
 8001ef8:	08001f94 	.word	0x08001f94
 8001efc:	08001f98 	.word	0x08001f98
 8001f00:	08001f94 	.word	0x08001f94

08001f04 <_init>:
 8001f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0a:	bc08      	pop	{r3}
 8001f0c:	469e      	mov	lr, r3
 8001f0e:	4770      	bx	lr

08001f10 <_fini>:
 8001f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f16:	bc08      	pop	{r3}
 8001f18:	469e      	mov	lr, r3
 8001f1a:	4770      	bx	lr
